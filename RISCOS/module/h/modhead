/* Generated by CMunge 0.77 (13 Jun 2006)
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher */

#ifndef _CMUNGE_LineNoise_H_
#define _CMUNGE_LineNoise_H_

#include "kernel.h"

#define CMUNGE_VERSION (77)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"LineNoise"
#define Module_Help		"LineNoise"
#define Module_VersionString	"0.02"
#define Module_VersionNumber	2
#ifndef Module_Date
#define Module_Date		"12 Mar 2023"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw);
_kernel_oserror *Cmd_LoadHistory(const char *arg_string, int argc,
                                 int number, void *pw);
_kernel_oserror *Cmd_SaveHistory(const char *arg_string, int argc,
                                 int number, void *pw);
_kernel_oserror *Cmd_Recall(const char *arg_string, int argc, int number,
                            void *pw);
_kernel_oserror *Cmd_EraseHistory(const char *arg_string, int argc,
                                  int number, void *pw);
#define help_PRINT_BUFFER		((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX		((char *) 0)
#define arg_STATUS			((char *) 1)
#define configure_BAD_OPTION		((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED		((_kernel_oserror *) 1)
#define configure_TOO_LARGE		((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS	((_kernel_oserror *) 3)

/* Command numbers, as passed to the command handler functions (see above) */
#undef CMD_LoadHistory
#define CMD_LoadHistory (0)
#undef CMD_SaveHistory
#define CMD_SaveHistory (1)
#undef CMD_Recall
#define CMD_Recall (2)
#undef CMD_EraseHistory
#define CMD_EraseHistory (3)


/***************************************************************************
 * Function:     ReadLineV_Entry
 * Description:  Symbol for entry point to module - NOT a C function.
 *               This name should be used as an argument to
 *               OS_Claim/OS_Release as required, but should never be called
 *               from C.
 **************************************************************************/
extern void ReadLineV_Entry(void);


/***************************************************************************
 * Function:     ReadLineV_Handler
 * Description:  Generic handler function
 * Parameters:   r  = pointer to register block on entry
 *               pw = private word for module
 * On exit:      Update r to alter return values
 *               Return NULL to return with V clear
 *               Return an error pointer to set V and r0
 **************************************************************************/
_kernel_oserror *ReadLineV_Handler(_kernel_swi_regs *r, void *pw);

/* Error messages embedded in header, based at &0 */
extern void __err_err_BadLineLength(void); /* &7fffff */
#define err_BadLineLength ((_kernel_oserror*)(int)__err_err_BadLineLength)

#ifdef __cplusplus
}
#endif

#endif
