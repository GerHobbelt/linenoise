cscope 15 $HOME/practice/c/linenoise -c               0000513965
	@example.c

1 #include 
	~<stdio.h
>

2 #include 
	~<stdlib.h
>

3 #include 
	~<string.h
>

4 #include 
	~"linenoise.h
"

7 void 
	$completion
(const char *
buf
, 
linenoiseCompletions
 *
lc
) {

8 if (
buf
[0] == 'h') {

9 
	`linenoiseAddCompletion
(
lc
,"hello");

10 
	`linenoiseAddCompletion
(
lc
,"hello there");

12 
	}
}

14 char *
	$hints
(const char *
buf
, int *
color
, int *
bold
) {

15 if (!
	`strcasecmp
(
buf
,"hello")) {

16 *
color
 = 35;

17 *
bold
 = 0;

20 return 
NULL
;

21 
	}
}

23 int 
	$main
(int 
argc
, char **
argv
) {

24 char *
line
;

25 char *
prgname
 = 
argv
[0];

28 while(
argc
 > 1) {

29 
argc
--;

30 
argv
++;

31 if (!
	`strcmp
(*
argv
,"--multiline")) {

32 
	`linenoiseSetMultiLine
(1);

33 
	`printf
("Multi-line mode enabled.\n");

34 } else if (!
	`strcmp
(*
argv
,"--keycodes")) {

35 
	`linenoisePrintKeyCodes
();

36 
	`exit
(0);

38 
	`fprintf
(
stderr
, "Usage: %s [--multiline] [--keycodes]\n", 
prgname
);

39 
	`exit
(1);

45 
	`linenoiseSetCompletionCallback
(
completion
);

46 
	`linenoiseSetHintsCallback
(
hints
);

50 
	`linenoiseHistoryLoad
("history.txt");

58 while((
line
 = 
	`linenoise
("hello> ")) != 
NULL
) {

60 if (
line
[0] != '\0' && line[0] != '/') {

61 
	`printf
("echo: '%s'\n", 
line
);

62 
	`linenoiseHistoryAdd
(
line
);

63 
	`linenoiseHistorySave
("history.txt");

64 } else if (!
	`strncmp
(
line
,"/historylen",11)) {

66 int 
len
 = 
	`atoi
(
line
+11);

67 
	`linenoiseHistorySetMaxLen
(
len
);

68 } else if (
line
[0] == '/') {

69 
	`printf
("Unreconized command: %s\n", 
line
);

71 
	`free
(
line
);

74 
	}
}

	@linenoise.c

106 #include 
	~<termios.h
>

107 #include 
	~<unistd.h
>

108 #include 
	~<stdlib.h
>

109 #include 
	~<stdio.h
>

110 #include 
	~<errno.h
>

111 #include 
	~<string.h
>

112 #include 
	~<stdlib.h
>

113 #include 
	~<ctype.h
>

114 #include 
	~<sys/stat.h
>

115 #include 
	~<sys/types.h
>

116 #include 
	~<sys/ioctl.h
>

117 #include 
	~<unistd.h
>

118 #include 
	~"linenoise.h
"

120 #define 
	#LINENOISE_DEFAULT_HISTORY_MAX_LEN
 100

	)

121 #define 
	#LINENOISE_MAX_LINE
 4096

	)

122 static char *
	gunsupported_term
[] = {"dumb","cons25","emacs",
NULL
};

123 static 
linenoiseCompletionCallback
 *
	gcompletionCallback
 = 
NULL
;

124 static 
linenoiseHintsCallback
 *
	ghintsCallback
 = 
NULL
;

125 static 
linenoiseFreeHintsCallback
 *
	gfreeHintsCallback
 = 
NULL
;

127 static struct 
termios
 
	gorig_termios
;

128 static int 
	grawmode
 = 0;

129 static int 
	gmlmode
 = 0;

130 static int 
	gatexit_registered
 = 0;

131 static int 
	ghistory_max_len
 = 
LINENOISE_DEFAULT_HISTORY_MAX_LEN
;

132 static int 
	ghistory_len
 = 0;

133 static char **
	ghistory
 = 
NULL
;

138 struct 
	slinenoiseState
 {

139 int 
	mifd
;

140 int 
	mofd
;

141 char *
	mbuf
;

142 
size_t
 
	mbuflen
;

143 const char *
	mprompt
;

144 
size_t
 
	mplen
;

145 
size_t
 
	mpos
;

146 
size_t
 
	moldpos
;

147 
size_t
 
	mlen
;

148 
size_t
 
	mcols
;

149 
size_t
 
	mmaxrows
;

150 int 
	mhistory_index
;

153 enum 
	eKEY_ACTION
{

154 
	mKEY_NULL
 = 0,

155 
	mCTRL_A
 = 1,

156 
	mCTRL_B
 = 2,

157 
	mCTRL_C
 = 3,

158 
	mCTRL_D
 = 4,

159 
	mCTRL_E
 = 5,

160 
	mCTRL_F
 = 6,

161 
	mCTRL_H
 = 8,

162 
	mTAB
 = 9,

163 
	mCTRL_K
 = 11,

164 
	mCTRL_L
 = 12,

165 
	mENTER
 = 13,

166 
	mCTRL_N
 = 14,

167 
	mCTRL_P
 = 16,

168 
	mCTRL_T
 = 20,

169 
	mCTRL_U
 = 21,

170 
	mCTRL_W
 = 23,

171 
	mESC
 = 27,

172 
	mBACKSPACE
 = 127

175 static void 
linenoiseAtExit
(void);

176 int 
linenoiseHistoryAdd
(const char *
line
);

177 static void 
refreshLine
(struct 
linenoiseState
 *
l
);

181 
FILE
 *
	glndebug_fp
 = 
NULL
;

182 #define 
	#lndebug
(...) \

184 if (
lndebug_fp
 == 
NULL
) { \

185 
lndebug_fp
 = 
	`fopen
("/tmp/lndebug.txt","a"); \

186 
	`fprintf
(
lndebug_fp
, \

188 (int)
l
->
len
,(int)l->
pos
,(int)l->
oldpos
,
plen
,
rows
,
rpos
, \

189 (int)
l
->
maxrows
,
old_rows
); \

191 
	`fprintf
(
lndebug_fp
, ", " 
__VA_ARGS__
); \

192 
	`fflush
(
lndebug_fp
); \

193 } while (0)

	)

195 #define 
	#lndebug
(
fmt
, ...)

	)

201 void 
	$linenoiseSetMultiLine
(int 
ml
) {

202 
mlmode
 = 
ml
;

203 
	}
}

207 static int 
	$isUnsupportedTerm
(void) {

208 char *
term
 = 
	`getenv
("TERM");

209 int 
j
;

211 if (
term
 == 
NULL
) return 0;

212 for (
j
 = 0; 
unsupported_term
[j]; j++)

213 if (!
	`strcasecmp
(
term
,
unsupported_term
[
j
])) return 1;

215 
	}
}

218 static int 
	$enableRawMode
(int 
fd
) {

219 struct 
termios
 
raw
;

221 if (!
	`isatty
(
STDIN_FILENO
)) goto 
fatal
;

222 if (!
atexit_registered
) {

223 
	`atexit
(
linenoiseAtExit
);

224 
atexit_registered
 = 1;

226 if (
	`tcgetattr
(
fd
,&
orig_termios
) == -1) goto 
fatal
;

228 
raw
 = 
orig_termios
;

231 
raw
.
c_iflag
 &= ~(
BRKINT
 | 
ICRNL
 | 
INPCK
 | 
ISTRIP
 | 
IXON
);

233 
raw
.
c_oflag
 &= ~(
OPOST
);

235 
raw
.
c_cflag
 |= (
CS8
);

238 
raw
.
c_lflag
 &= ~(
ECHO
 | 
ICANON
 | 
IEXTEN
 | 
ISIG
);

241 
raw
.
c_cc
[
VMIN
] = 1; raw.c_cc[
VTIME
] = 0;

244 if (
	`tcsetattr
(
fd
,
TCSAFLUSH
,&
raw
) < 0) goto 
fatal
;

245 
rawmode
 = 1;

248 
fatal
:

249 
errno
 = 
ENOTTY
;

251 
	}
}

253 static void 
	$disableRawMode
(int 
fd
) {

255 if (
rawmode
 && 
	`tcsetattr
(
fd
,
TCSAFLUSH
,&
orig_termios
) != -1)

256 
rawmode
 = 0;

257 
	}
}

262 static int 
	$getCursorPosition
(int 
ifd
, int 
ofd
) {

263 char 
buf
[32];

264 int 
cols
, 
rows
;

265 unsigned int 
i
 = 0;

268 if (
	`write
(
ofd
, "\x1b[6n", 4) != 4) return -1;

271 while (
i
 < sizeof(
buf
)-1) {

272 if (
	`read
(
ifd
,
buf
+
i
,1) != 1) break;

273 if (
buf
[
i
] == 'R') break;

274 
i
++;

276 
buf
[
i
] = '\0';

279 if (
buf
[0] != 
ESC
 || buf[1] != '[') return -1;

280 if (
	`sscanf
(
buf
+2,"%d;%d",&
rows
,&
cols
) != 2) return -1;

281 return 
cols
;

282 
	}
}

286 static int 
	$getColumns
(int 
ifd
, int 
ofd
) {

287 struct 
winsize
 
ws
;

289 if (
	`ioctl
(1, 
TIOCGWINSZ
, &
ws
) == -1 || ws.
ws_col
 == 0) {

291 int 
start
, 
cols
;

294 
start
 = 
	`getCursorPosition
(
ifd
,
ofd
);

295 if (
start
 == -1) goto 
failed
;

298 if (
	`write
(
ofd
,"\x1b[999C",6) != 6) goto 
failed
;

299 
cols
 = 
	`getCursorPosition
(
ifd
,
ofd
);

300 if (
cols
 == -1) goto 
failed
;

303 if (
cols
 > 
start
) {

304 char 
seq
[32];

305 
	`snprintf
(
seq
,32,"\x1b[%dD",
cols
-
start
);

306 if (
	`write
(
ofd
,
seq
,
	`strlen
(seq)) == -1) {

310 return 
cols
;

312 return 
ws
.
ws_col
;

315 
failed
:

317 
	}
}

320 void 
	$linenoiseClearScreen
(void) {

321 if (
	`write
(
STDOUT_FILENO
,"\x1b[H\x1b[2J",7) <= 0) {

324 
	}
}

328 static void 
	$linenoiseBeep
(void) {

329 
	`fprintf
(
stderr
, "\x7");

330 
	`fflush
(
stderr
);

331 
	}
}

336 static void 
	$freeCompletions
(
linenoiseCompletions
 *
lc
) {

337 
size_t
 
i
;

338 for (
i
 = 0; i < 
lc
->
len
; i++)

339 
	`free
(
lc
->
cvec
[
i
]);

340 if (
lc
->
cvec
 != 
NULL
)

341 
	`free
(
lc
->
cvec
);

342 
	}
}

350 static int 
	$completeLine
(struct 
linenoiseState
 *
ls
) {

351 
linenoiseCompletions
 
lc
 = { 0, 
NULL
 };

352 int 
nread
, 
nwritten
;

353 char 
c
 = 0;

355 
	`completionCallback
(
ls
->
buf
,&
lc
);

356 if (
lc
.
len
 == 0) {

357 
	`linenoiseBeep
();

359 
size_t
 
stop
 = 0, 
i
 = 0;

361 while(!
stop
) {

363 if (
i
 < 
lc
.
len
) {

364 struct 
linenoiseState
 
saved
 = *
ls
;

366 
ls
->
len
 = ls->
pos
 = 
	`strlen
(
lc
.
cvec
[
i
]);

367 
ls
->
buf
 = 
lc
.
cvec
[
i
];

368 
	`refreshLine
(
ls
);

369 
ls
->
len
 = 
saved
.len;

370 
ls
->
pos
 = 
saved
.pos;

371 
ls
->
buf
 = 
saved
.buf;

373 
	`refreshLine
(
ls
);

376 
nread
 = 
	`read
(
ls
->
ifd
,&
c
,1);

377 if (
nread
 <= 0) {

378 
	`freeCompletions
(&
lc
);

382 switch(
c
) {

384 
i
 = (i+1) % (
lc
.
len
+1);

385 if (
i
 == 
lc
.
len
) 
	`linenoiseBeep
();

389 if (
i
 < 
lc
.
len
) 
	`refreshLine
(
ls
);

390 
stop
 = 1;

394 if (
i
 < 
lc
.
len
) {

395 
nwritten
 = 
	`snprintf
(
ls
->
buf
,ls->
buflen
,"%s",
lc
.
cvec
[
i
]);

396 
ls
->
len
 = ls->
pos
 = 
nwritten
;

398 
stop
 = 1;

404 
	`freeCompletions
(&
lc
);

405 return 
c
;

406 
	}
}

409 void 
	$linenoiseSetCompletionCallback
(
linenoiseCompletionCallback
 *
fn
) {

410 
completionCallback
 = 
fn
;

411 
	}
}

415 void 
	$linenoiseSetHintsCallback
(
linenoiseHintsCallback
 *
fn
) {

416 
hintsCallback
 = 
fn
;

417 
	}
}

421 void 
	$linenoiseSetFreeHintsCallback
(
linenoiseFreeHintsCallback
 *
fn
) {

422 
freeHintsCallback
 = 
fn
;

423 
	}
}

429 void 
	$linenoiseAddCompletion
(
linenoiseCompletions
 *
lc
, const char *
str
) {

430 
size_t
 
len
 = 
	`strlen
(
str
);

431 char *
copy
, **
cvec
;

433 
copy
 = 
	`malloc
(
len
+1);

434 if (
copy
 == 
NULL
) return;

435 
	`memcpy
(
copy
,
str
,
len
+1);

436 
cvec
 = 
	`realloc
(
lc
->cvec,sizeof(char*)*(lc->
len
+1));

437 if (
cvec
 == 
NULL
) {

438 
	`free
(
copy
);

441 
lc
->
cvec
 = cvec;

442 
lc
->
cvec
[lc->
len
++] = 
copy
;

443 
	}
}

451 struct 
	sabuf
 {

452 char *
	mb
;

453 int 
	mlen
;

456 static void 
	$abInit
(struct 
abuf
 *
ab
) {

457 
ab
->
b
 = 
NULL
;

458 
ab
->
len
 = 0;

459 
	}
}

461 static void 
	$abAppend
(struct 
abuf
 *
ab
, const char *
s
, int 
len
) {

462 char *
new
 = 
	`realloc
(
ab
->
b
,ab->
len
+len);

464 if (
new
 == 
NULL
) return;

465 
	`memcpy
(
new
+
ab
->
len
,
s
,len);

466 
ab
->
b
 = 
new
;

467 
ab
->
len
 += len;

468 
	}
}

470 static void 
	$abFree
(struct 
abuf
 *
ab
) {

471 
	`free
(
ab
->
b
);

472 
	}
}

476 void 
	$refreshShowHints
(struct 
abuf
 *
ab
, struct 
linenoiseState
 *
l
, int 
plen
) {

477 char 
seq
[64];

478 if (
hintsCallback
 && 
plen
+
l
->
len
 < l->
cols
) {

479 int 
color
 = -1, 
bold
 = 0;

480 char *
hint
 = 
	`hintsCallback
(
l
->
buf
,&
color
,&
bold
);

481 if (
hint
) {

482 int 
hintlen
 = 
	`strlen
(
hint
);

483 int 
hintmaxlen
 = 
l
->
cols
-(
plen
+l->
len
);

484 if (
hintlen
 > 
hintmaxlen
) hintlen = hintmaxlen;

485 if (
bold
 == 1 && 
color
 == -1) color = 37;

486 if (
color
 != -1 || 
bold
 != 0)

487 
	`snprintf
(
seq
,64,"\033[%d;%d;49m",
bold
,
color
);

489 
seq
[0] = '\0';

490 
	`abAppend
(
ab
,
seq
,
	`strlen
(seq));

491 
	`abAppend
(
ab
,
hint
,
hintlen
);

492 if (
color
 != -1 || 
bold
 != 0)

493 
	`abAppend
(
ab
,"\033[0m",4);

495 if (
freeHintsCallback
) 
	`freeHintsCallback
(
hint
);

498 
	}
}

504 static void 
	$refreshSingleLine
(struct 
linenoiseState
 *
l
) {

505 char 
seq
[64];

506 
size_t
 
plen
 = 
	`strlen
(
l
->
prompt
);

507 int 
fd
 = 
l
->
ofd
;

508 char *
buf
 = 
l
->buf;

509 
size_t
 
len
 = 
l
->len;

510 
size_t
 
pos
 = 
l
->pos;

511 struct 
abuf
 
ab
;

513 while((
plen
+
pos
) >= 
l
->
cols
) {

514 
buf
++;

515 
len
--;

516 
pos
--;

518 while (
plen
+
len
 > 
l
->
cols
) {

519 
len
--;

522 
	`abInit
(&
ab
);

524 
	`snprintf
(
seq
,64,"\r");

525 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

527 
	`abAppend
(&
ab
,
l
->
prompt
,
	`strlen
(l->prompt));

528 
	`abAppend
(&
ab
,
buf
,
len
);

530 
	`refreshShowHints
(&
ab
,
l
,
plen
);

532 
	`snprintf
(
seq
,64,"\x1b[0K");

533 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

535 
	`snprintf
(
seq
,64,"\r\x1b[%dC", (int)(
pos
+
plen
));

536 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

537 if (
	`write
(
fd
,
ab
.
b
,ab.
len
) == -1) {}

538 
	`abFree
(&
ab
);

539 
	}
}

545 static void 
	$refreshMultiLine
(struct 
linenoiseState
 *
l
) {

546 char 
seq
[64];

547 int 
plen
 = 
	`strlen
(
l
->
prompt
);

548 int 
rows
 = (
plen
+
l
->
len
+l->
cols
-1)/l->cols;

549 int 
rpos
 = (
plen
+
l
->
oldpos
+l->
cols
)/l->cols;

550 int 
rpos2
;

551 int 
col
;

552 int 
old_rows
 = 
l
->
maxrows
;

553 int 
fd
 = 
l
->
ofd
, 
j
;

554 struct 
abuf
 
ab
;

557 if (
rows
 > (int)
l
->
maxrows
) l->maxrows = rows;

561 
	`abInit
(&
ab
);

562 if (
old_rows
-
rpos
 > 0) {

563 
	`lndebug
("go down %d", 
old_rows
-
rpos
);

564 
	`snprintf
(
seq
,64,"\x1b[%dB", 
old_rows
-
rpos
);

565 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

569 for (
j
 = 0; j < 
old_rows
-1; j++) {

570 
	`lndebug
("clear+up");

571 
	`snprintf
(
seq
,64,"\r\x1b[0K\x1b[1A");

572 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

576 
	`lndebug
("clear");

577 
	`snprintf
(
seq
,64,"\r\x1b[0K");

578 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

581 
	`abAppend
(&
ab
,
l
->
prompt
,
	`strlen
(l->prompt));

582 
	`abAppend
(&
ab
,
l
->
buf
,l->
len
);

585 
	`refreshShowHints
(&
ab
,
l
,
plen
);

589 if (
l
->
pos
 &&

590 
l
->
pos
 == l->
len
 &&

591 (
l
->
pos
+
plen
) % l->
cols
 == 0)

593 
	`lndebug
("<newline>");

594 
	`abAppend
(&
ab
,"\n",1);

595 
	`snprintf
(
seq
,64,"\r");

596 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

597 
rows
++;

598 if (
rows
 > (int)
l
->
maxrows
) l->maxrows = rows;

602 
rpos2
 = (
plen
+
l
->
pos
+l->
cols
)/l->cols;

603 
	`lndebug
("rpos2 %d", 
rpos2
);

606 if (
rows
-
rpos2
 > 0) {

607 
	`lndebug
("go-up %d", 
rows
-
rpos2
);

608 
	`snprintf
(
seq
,64,"\x1b[%dA", 
rows
-
rpos2
);

609 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

613 
col
 = (
plen
+(int)
l
->
pos
) % (int)l->
cols
;

614 
	`lndebug
("set col %d", 1+
col
);

615 if (
col
)

616 
	`snprintf
(
seq
,64,"\r\x1b[%dC", 
col
);

618 
	`snprintf
(
seq
,64,"\r");

619 
	`abAppend
(&
ab
,
seq
,
	`strlen
(seq));

621 
	`lndebug
("\n");

622 
l
->
oldpos
 = l->
pos
;

624 if (
	`write
(
fd
,
ab
.
b
,ab.
len
) == -1) {}

625 
	`abFree
(&
ab
);

626 
	}
}

630 static void 
	$refreshLine
(struct 
linenoiseState
 *
l
) {

631 if (
mlmode
)

632 
	`refreshMultiLine
(
l
);

634 
	`refreshSingleLine
(
l
);

635 
	}
}

640 int 
	$linenoiseEditInsert
(struct 
linenoiseState
 *
l
, char 
c
) {

641 if (
l
->
len
 < l->
buflen
) {

642 if (
l
->
len
 == l->
pos
) {

643 
l
->
buf
[l->
pos
] = 
c
;

644 
l
->
pos
++;

645 
l
->
len
++;

646 
l
->
buf
[l->
len
] = '\0';

647 if ((!
mlmode
 && 
l
->
plen
+l->
len
 < l->
cols
 && !
hintsCallback
)) {

650 if (
	`write
(
l
->
ofd
,&
c
,1) == -1) return -1;

652 
	`refreshLine
(
l
);

655 
	`memmove
(
l
->
buf
+l->
pos
+1,l->buf+l->pos,l->
len
-l->pos);

656 
l
->
buf
[l->
pos
] = 
c
;

657 
l
->
len
++;

658 
l
->
pos
++;

659 
l
->
buf
[l->
len
] = '\0';

660 
	`refreshLine
(
l
);

664 
	}
}

667 void 
	$linenoiseEditMoveLeft
(struct 
linenoiseState
 *
l
) {

668 if (
l
->
pos
 > 0) {

669 
l
->
pos
--;

670 
	`refreshLine
(
l
);

672 
	}
}

675 void 
	$linenoiseEditMoveRight
(struct 
linenoiseState
 *
l
) {

676 if (
l
->
pos
 != l->
len
) {

677 
l
->
pos
++;

678 
	`refreshLine
(
l
);

680 
	}
}

683 void 
	$linenoiseEditMoveHome
(struct 
linenoiseState
 *
l
) {

684 if (
l
->
pos
 != 0) {

685 
l
->
pos
 = 0;

686 
	`refreshLine
(
l
);

688 
	}
}

691 void 
	$linenoiseEditMoveEnd
(struct 
linenoiseState
 *
l
) {

692 if (
l
->
pos
 != l->
len
) {

693 
l
->
pos
 = l->
len
;

694 
	`refreshLine
(
l
);

696 
	}
}

700 #define 
	#LINENOISE_HISTORY_NEXT
 0

	)

701 #define 
	#LINENOISE_HISTORY_PREV
 1

	)

702 void 
	$linenoiseEditHistoryNext
(struct 
linenoiseState
 *
l
, int 
dir
) {

703 if (
history_len
 > 1) {

706 
	`free
(
history
[
history_len
 - 1 - 
l
->
history_index
]);

707 
history
[
history_len
 - 1 - 
l
->
history_index
] = 
	`strdup
(l->
buf
);

709 
l
->
history_index
 += (
dir
 == 
LINENOISE_HISTORY_PREV
) ? 1 : -1;

710 if (
l
->
history_index
 < 0) {

711 
l
->
history_index
 = 0;

713 } else if (
l
->
history_index
 >= 
history_len
) {

714 
l
->
history_index
 = 
history_len
-1;

717 
	`strncpy
(
l
->
buf
,
history
[
history_len
 - 1 - l->
history_index
],l->
buflen
);

718 
l
->
buf
[l->
buflen
-1] = '\0';

719 
l
->
len
 = l->
pos
 = 
	`strlen
(l->
buf
);

720 
	`refreshLine
(
l
);

722 
	}
}

726 void 
	$linenoiseEditDelete
(struct 
linenoiseState
 *
l
) {

727 if (
l
->
len
 > 0 && l->
pos
 < l->len) {

728 
	`memmove
(
l
->
buf
+l->
pos
,l->buf+l->pos+1,l->
len
-l->pos-1);

729 
l
->
len
--;

730 
l
->
buf
[l->
len
] = '\0';

731 
	`refreshLine
(
l
);

733 
	}
}

736 void 
	$linenoiseEditBackspace
(struct 
linenoiseState
 *
l
) {

737 if (
l
->
pos
 > 0 && l->
len
 > 0) {

738 
	`memmove
(
l
->
buf
+l->
pos
-1,l->buf+l->pos,l->
len
-l->pos);

739 
l
->
pos
--;

740 
l
->
len
--;

741 
l
->
buf
[l->
len
] = '\0';

742 
	`refreshLine
(
l
);

744 
	}
}

748 void 
	$linenoiseEditDeletePrevWord
(struct 
linenoiseState
 *
l
) {

749 
size_t
 
old_pos
 = 
l
->
pos
;

750 
size_t
 
diff
;

752 while (
l
->
pos
 > 0 && l->
buf
[l->pos-1] == ' ')

753 
l
->
pos
--;

754 while (
l
->
pos
 > 0 && l->
buf
[l->pos-1] != ' ')

755 
l
->
pos
--;

756 
diff
 = 
old_pos
 - 
l
->
pos
;

757 
	`memmove
(
l
->
buf
+l->
pos
,l->buf+
old_pos
,l->
len
-old_pos+1);

758 
l
->
len
 -= 
diff
;

759 
	`refreshLine
(
l
);

760 
	}
}

770 static int 
	$linenoiseEdit
(int 
stdin_fd
, int 
stdout_fd
, char *
buf
, 
size_t
 
buflen
, const char *
prompt
)

772 struct 
linenoiseState
 
l
;

776 
l
.
ifd
 = 
stdin_fd
;

777 
l
.
ofd
 = 
stdout_fd
;

778 
l
.
buf
 = buf;

779 
l
.
buflen
 = buflen;

780 
l
.
prompt
 = prompt;

781 
l
.
plen
 = 
	`strlen
(
prompt
);

782 
l
.
oldpos
 = l.
pos
 = 0;

783 
l
.
len
 = 0;

784 
l
.
cols
 = 
	`getColumns
(
stdin_fd
, 
stdout_fd
);

785 
l
.
maxrows
 = 0;

786 
l
.
history_index
 = 0;

789 
l
.
buf
[0] = '\0';

790 
l
.
buflen
--;

794 
	`linenoiseHistoryAdd
("");

796 if (
	`write
(
l
.
ofd
,
prompt
,l.
plen
) == -1) return -1;

798 char 
c
;

799 int 
nread
;

800 char 
seq
[3];

802 
nread
 = 
	`read
(
l
.
ifd
,&
c
,1);

803 if (
nread
 <= 0) return 
l
.
len
;

808 if (
c
 == 9 && 
completionCallback
 != 
NULL
) {

809 
c
 = 
	`completeLine
(&
l
);

811 if (
c
 < 0) return 
l
.
len
;

813 if (
c
 == 0) continue;

816 switch(
c
) {

817 case 
ENTER
:

818 
history_len
--;

819 
	`free
(
history
[
history_len
]);

820 if (
mlmode
) 
	`linenoiseEditMoveEnd
(&
l
);

821 if (
hintsCallback
) {

824 
linenoiseHintsCallback
 *
hc
 = 
hintsCallback
;

825 
hintsCallback
 = 
NULL
;

826 
	`refreshLine
(&
l
);

827 
hintsCallback
 = 
hc
;

829 return (int)
l
.
len
;

830 case 
CTRL_C
:

831 
errno
 = 
EAGAIN
;

833 case 
BACKSPACE
:

835 
	`linenoiseEditBackspace
(&
l
);

837 case 
CTRL_D
:

839 if (
l
.
len
 > 0) {

840 
	`linenoiseEditDelete
(&
l
);

842 
history_len
--;

843 
	`free
(
history
[
history_len
]);

847 case 
CTRL_T
:

848 if (
l
.
pos
 > 0 && l.pos < l.
len
) {

849 int 
aux
 = 
buf
[
l
.
pos
-1];

850 
buf
[
l
.
pos
-1] = buf[l.pos];

851 
buf
[
l
.
pos
] = 
aux
;

852 if (
l
.
pos
 != l.
len
-1) l.pos++;

853 
	`refreshLine
(&
l
);

856 case 
CTRL_B
:

857 
	`linenoiseEditMoveLeft
(&
l
);

859 case 
CTRL_F
:

860 
	`linenoiseEditMoveRight
(&
l
);

862 case 
CTRL_P
:

863 
	`linenoiseEditHistoryNext
(&
l
, 
LINENOISE_HISTORY_PREV
);

865 case 
CTRL_N
:

866 
	`linenoiseEditHistoryNext
(&
l
, 
LINENOISE_HISTORY_NEXT
);

868 case 
ESC
:

872 if (
	`read
(
l
.
ifd
,
seq
,1) == -1) break;

873 if (
	`read
(
l
.
ifd
,
seq
+1,1) == -1) break;

876 if (
seq
[0] == '[') {

877 if (
seq
[1] >= '0' && seq[1] <= '9') {

879 if (
	`read
(
l
.
ifd
,
seq
+2,1) == -1) break;

880 if (
seq
[2] == '~') {

881 switch(
seq
[1]) {

883 
	`linenoiseEditDelete
(&
l
);

888 switch(
seq
[1]) {

890 
	`linenoiseEditHistoryNext
(&
l
, 
LINENOISE_HISTORY_PREV
);

893 
	`linenoiseEditHistoryNext
(&
l
, 
LINENOISE_HISTORY_NEXT
);

896 
	`linenoiseEditMoveRight
(&
l
);

899 
	`linenoiseEditMoveLeft
(&
l
);

902 
	`linenoiseEditMoveHome
(&
l
);

905 
	`linenoiseEditMoveEnd
(&
l
);

912 else if (
seq
[0] == 'O') {

913 switch(
seq
[1]) {

915 
	`linenoiseEditMoveHome
(&
l
);

918 
	`linenoiseEditMoveEnd
(&
l
);

924 if (
	`linenoiseEditInsert
(&
l
,
c
)) return -1;

926 case 
CTRL_U
:

927 
buf
[0] = '\0';

928 
l
.
pos
 = l.
len
 = 0;

929 
	`refreshLine
(&
l
);

931 case 
CTRL_K
:

932 
buf
[
l
.
pos
] = '\0';

933 
l
.
len
 = l.
pos
;

934 
	`refreshLine
(&
l
);

936 case 
CTRL_A
:

937 
	`linenoiseEditMoveHome
(&
l
);

939 case 
CTRL_E
:

940 
	`linenoiseEditMoveEnd
(&
l
);

942 case 
CTRL_L
:

943 
	`linenoiseClearScreen
();

944 
	`refreshLine
(&
l
);

946 case 
CTRL_W
:

947 
	`linenoiseEditDeletePrevWord
(&
l
);

951 return 
l
.
len
;

952 
	}
}

957 void 
	$linenoisePrintKeyCodes
(void) {

958 char 
quit
[4];

960 
	`printf
("Linenoise key codes debugging mode.\n"

962 if (
	`enableRawMode
(
STDIN_FILENO
) == -1) return;

963 
	`memset
(
quit
,' ',4);

965 char 
c
;

966 int 
nread
;

968 
nread
 = 
	`read
(
STDIN_FILENO
,&
c
,1);

969 if (
nread
 <= 0) continue;

970 
	`memmove
(
quit
,quit+1,sizeof(quit)-1);

971 
quit
[sizeof(quit)-1] = 
c
;

972 if (
	`memcmp
(
quit
,"quit",sizeof(quit)) == 0) break;

974 
	`printf
("'%c' %02x (%d) (type quit to exit)\n",

975 
	`isprint
(
c
) ? c : '?', (int)c, (int)c);

976 
	`printf
("\r");

977 
	`fflush
(
stdout
);

979 
	`disableRawMode
(
STDIN_FILENO
);

980 
	}
}

984 static int 
	$linenoiseRaw
(char *
buf
, 
size_t
 
buflen
, const char *
prompt
) {

985 int 
count
;

987 if (
buflen
 == 0) {

988 
errno
 = 
EINVAL
;

992 if (
	`enableRawMode
(
STDIN_FILENO
) == -1) return -1;

993 
count
 = 
	`linenoiseEdit
(
STDIN_FILENO
, 
STDOUT_FILENO
, 
buf
, 
buflen
, 
prompt
);

994 
	`disableRawMode
(
STDIN_FILENO
);

995 
	`printf
("\n");

996 return 
count
;

997 
	}
}

1004 static char *
	$linenoiseNoTTY
(void) {

1005 char *
line
 = 
NULL
;

1006 
size_t
 
len
 = 0, 
maxlen
 = 0;

1009 if (
len
 == 
maxlen
) {

1010 if (
maxlen
 == 0) maxlen = 16;

1011 
maxlen
 *= 2;

1012 char *
oldval
 = 
line
;

1013 
line
 = 
	`realloc
(line,
maxlen
);

1014 if (
line
 == 
NULL
) {

1015 if (
oldval
) 
	`free
(oldval);

1016 return 
NULL
;

1019 int 
c
 = 
	`fgetc
(
stdin
);

1020 if (
c
 == 
EOF
 || c == '\n') {

1021 if (
c
 == 
EOF
 && 
len
 == 0) {

1022 
	`free
(
line
);

1023 return 
NULL
;

1025 
line
[
len
] = '\0';

1026 return 
line
;

1029 
line
[
len
] = 
c
;

1030 
len
++;

1033 
	}
}

1040 char *
	$linenoise
(const char *
prompt
) {

1041 char 
buf
[
LINENOISE_MAX_LINE
];

1042 int 
count
;

1044 if (!
	`isatty
(
STDIN_FILENO
)) {

1047 return 
	`linenoiseNoTTY
();

1048 } else if (
	`isUnsupportedTerm
()) {

1049 
size_t
 
len
;

1051 
	`printf
("%s",
prompt
);

1052 
	`fflush
(
stdout
);

1053 if (
	`fgets
(
buf
,
LINENOISE_MAX_LINE
,
stdin
) == 
NULL
) return NULL;

1054 
len
 = 
	`strlen
(
buf
);

1055 while(
len
 && (
buf
[len-1] == '\n' || buf[len-1] == '\r')) {

1056 
len
--;

1057 
buf
[
len
] = '\0';

1059 return 
	`strdup
(
buf
);

1061 
count
 = 
	`linenoiseRaw
(
buf
,
LINENOISE_MAX_LINE
,
prompt
);

1062 if (
count
 == -1) return 
NULL
;

1063 return 
	`strdup
(
buf
);

1065 
	}
}

1071 void 
	$linenoiseFree
(void *
ptr
) {

1072 
	`free
(
ptr
);

1073 
	}
}

1079 static void 
	$freeHistory
(void) {

1080 if (
history
) {

1081 int 
j
;

1083 for (
j
 = 0; j < 
history_len
; j++)

1084 
	`free
(
history
[
j
]);

1085 
	`free
(
history
);

1087 
	}
}

1090 static void 
	$linenoiseAtExit
(void) {

1091 
	`disableRawMode
(
STDIN_FILENO
);

1092 
	`freeHistory
();

1093 
	}
}

1102 int 
	$linenoiseHistoryAdd
(const char *
line
) {

1103 char *
linecopy
;

1105 if (
history_max_len
 == 0) return 0;

1108 if (
history
 == 
NULL
) {

1109 
history
 = 
	`malloc
(sizeof(char*)*
history_max_len
);

1110 if (
history
 == 
NULL
) return 0;

1111 
	`memset
(
history
,0,(sizeof(char*)*
history_max_len
));

1115 if (
history_len
 && !
	`strcmp
(
history
[history_len-1], 
line
)) return 0;

1119 
linecopy
 = 
	`strdup
(
line
);

1120 if (!
linecopy
) return 0;

1121 if (
history_len
 == 
history_max_len
) {

1122 
	`free
(
history
[0]);

1123 
	`memmove
(
history
,history+1,sizeof(char*)*(
history_max_len
-1));

1124 
history_len
--;

1126 
history
[
history_len
] = 
linecopy
;

1127 
history_len
++;

1129 
	}
}

1135 int 
	$linenoiseHistorySetMaxLen
(int 
len
) {

1136 char **
new
;

1138 if (
len
 < 1) return 0;

1139 if (
history
) {

1140 int 
tocopy
 = 
history_len
;

1142 
new
 = 
	`malloc
(sizeof(char*)*
len
);

1143 if (
new
 == 
NULL
) return 0;

1146 if (
len
 < 
tocopy
) {

1147 int 
j
;

1149 for (
j
 = 0; j < 
tocopy
-
len
; j++) 
	`free
(
history
[j]);

1150 
tocopy
 = 
len
;

1152 
	`memset
(
new
,0,sizeof(char*)*
len
);

1153 
	`memcpy
(
new
,
history
+(
history_len
-
tocopy
), sizeof(char*)*tocopy);

1154 
	`free
(
history
);

1155 
history
 = 
new
;

1157 
history_max_len
 = 
len
;

1158 if (
history_len
 > 
history_max_len
)

1159 
history_len
 = 
history_max_len
;

1161 
	}
}

1165 int 
	$linenoiseHistorySave
(const char *
filename
) {

1166 
mode_t
 
old_umask
 = 
	`umask
(
S_IXUSR
|
S_IRWXG
|
S_IRWXO
);

1167 
FILE
 *
fp
;

1168 int 
j
;

1170 
fp
 = 
	`fopen
(
filename
,"w");

1171 
	`umask
(
old_umask
);

1172 if (
fp
 == 
NULL
) return -1;

1173 
	`chmod
(
filename
,
S_IRUSR
|
S_IWUSR
);

1174 for (
j
 = 0; j < 
history_len
; j++)

1175 
	`fprintf
(
fp
,"%s\n",
history
[
j
]);

1176 
	`fclose
(
fp
);

1178 
	}
}

1185 int 
	$linenoiseHistoryLoad
(const char *
filename
) {

1186 
FILE
 *
fp
 = 
	`fopen
(
filename
,"r");

1187 char 
buf
[
LINENOISE_MAX_LINE
];

1189 if (
fp
 == 
NULL
) return -1;

1191 while (
	`fgets
(
buf
,
LINENOISE_MAX_LINE
,
fp
) != 
NULL
) {

1192 char *
p
;

1194 
p
 = 
	`strchr
(
buf
,'\r');

1195 if (!
p
) p = 
	`strchr
(
buf
,'\n');

1196 if (
p
) *p = '\0';

1197 
	`linenoiseHistoryAdd
(
buf
);

1199 
	`fclose
(
fp
);

1201 
	}
}

	@linenoise.h

39 #ifndef 
__LINENOISE_H


40 #define 
	#__LINENOISE_H


	)

42 #ifdef 
__cplusplus


46 typedef struct 
	slinenoiseCompletions
 {

47 
size_t
 
len
;

48 char **
cvec
;

49 } 
	tlinenoiseCompletions
;

51 typedef void(
linenoiseCompletionCallback
)(const char *, 
	tlinenoiseCompletions
 *);

52 typedef char*(
	tlinenoiseHintsCallback
)(const char *, int *
	tcolor
, int *
	tbold
);

53 typedef void(
linenoiseFreeHintsCallback
)(void *);

54 void 
linenoiseSetCompletionCallback
(
linenoiseCompletionCallback
 *);

55 void 
linenoiseSetHintsCallback
(
linenoiseHintsCallback
 *);

56 void 
linenoiseSetFreeHintsCallback
(
linenoiseFreeHintsCallback
 *);

57 void 
linenoiseAddCompletion
(
linenoiseCompletions
 *, const char *);

59 char *
linenoise
(const char *
prompt
);

60 void 
linenoiseFree
(void *
ptr
);

61 int 
linenoiseHistoryAdd
(const char *
line
);

62 int 
linenoiseHistorySetMaxLen
(int 
len
);

63 int 
linenoiseHistorySave
(const char *
filename
);

64 int 
linenoiseHistoryLoad
(const char *
filename
);

65 void 
linenoiseClearScreen
(void);

66 void 
linenoiseSetMultiLine
(int 
ml
);

67 void 
linenoisePrintKeyCodes
(void);

69 #ifdef 
__cplusplus


	@/usr/include/ctype.h

23 #ifndef 
_CTYPE_H


24 #define 
	#_CTYPE_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

29 
	g__BEGIN_DECLS


31 #ifndef 
_ISbit


40 #include 
	~<endian.h
>

41 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


42 #define 
	#_ISbit
(
bit
) (1 << (bit))

	)

44 #define 
	#_ISbit
(
bit
) ((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))

	)

49 
	m_ISupper
 = 
_ISbit
 (0),

50 
	m_ISlower
 = 
_ISbit
 (1),

51 
	m_ISalpha
 = 
_ISbit
 (2),

52 
	m_ISdigit
 = 
_ISbit
 (3),

53 
	m_ISxdigit
 = 
_ISbit
 (4),

54 
	m_ISspace
 = 
_ISbit
 (5),

55 
	m_ISprint
 = 
_ISbit
 (6),

56 
	m_ISgraph
 = 
_ISbit
 (7),

57 
	m_ISblank
 = 
_ISbit
 (8),

58 
	m_IScntrl
 = 
_ISbit
 (9),

59 
	m_ISpunct
 = 
_ISbit
 (10),

60 
	m_ISalnum
 = 
_ISbit
 (11)

80 extern const unsigned short int **
	$__ctype_b_loc
 (void)

81 
__THROW
 
	`__attribute__
 ((
__const__
));

82 extern const 
__int32_t
 **
	$__ctype_tolower_loc
 (void)

83 
__THROW
 
	`__attribute__
 ((
__const__
));

84 extern const 
__int32_t
 **
	$__ctype_toupper_loc
 (void)

85 
__THROW
 
	`__attribute__
 ((
__const__
));

88 #ifndef 
__cplusplus


89 #define 
	#__isctype
(
c
, 
type
) \

90 ((*
	`__ctype_b_loc
 ())[(int) (
c
)] & (unsigned short int) 
type
)

	)

91 #elif 
defined
 
__USE_EXTERN_INLINES


92 #define 
	#__isctype_f
(
type
) \

93 
__extern_inline
 int \

94 
is
##
	`type
 (int 
__c
) 
__THROW
 \

96 return (*
	`__ctype_b_loc
 ())[(int) (
__c
)] & (unsigned short int) 
_IS
##
type
; \

97 
	}

	)
}

100 #define 
	#__isascii
(
c
) (((c) & ~0x7f) == 0)

	)

101 #define 
	#__toascii
(
c
) ((c) & 0x7f)

	)

103 #define 
	#__exctype
(
name
) extern int 
	`name
 (int) 
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__exctype
 (
isalnum
);

112 
__exctype
 (
isalpha
);

113 
__exctype
 (
iscntrl
);

114 
__exctype
 (
isdigit
);

115 
__exctype
 (
islower
);

116 
__exctype
 (
isgraph
);

117 
__exctype
 (
isprint
);

118 
__exctype
 (
ispunct
);

119 
__exctype
 (
isspace
);

120 
__exctype
 (
isupper
);

121 
__exctype
 (
isxdigit
);

125 extern int 
	$tolower
 (int 
__c
) 
__THROW
;

128 extern int 
	$toupper
 (int 
__c
) 
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__exctype
 (
isblank
);

139 
__END_NAMESPACE_C99


142 #ifdef 
__USE_GNU


144 extern int 
	$isctype
 (int 
__c
, int 
__mask
) 
__THROW
;

147 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


151 extern int 
	$isascii
 (int 
__c
) 
__THROW
;

155 extern int 
	$toascii
 (int 
__c
) 
__THROW
;

159 
	`__exctype
 (
_toupper
);

160 
	`__exctype
 (
_tolower
);

164 #define 
	#__tobody
(
c
, 
f
, 
a
, 
args
) \

165 (
__extension__
 \

166 ({ int 
__res
; \

167 if (sizeof (
c
) > 1) \

169 if (
	`__builtin_constant_p
 (
c
)) \

171 int 
__c
 = (
c
); \

172 
__res
 = 
__c
 < -128 || __c > 255 ? __c : (
a
)[__c]; \

175 
__res
 = 
f
 
args
; \

178 
__res
 = (
a
)[(int) (
c
)]; \

179 
__res
; 
	}
}))

	)

181 #if !
defined
 
__NO_CTYPE


182 #ifdef 
__isctype_f


183 
	$__isctype_f
 (
alnum
)

184 
	$__isctype_f
 (
alpha
)

185 
	$__isctype_f
 (
cntrl
)

186 
	$__isctype_f
 (
digit
)

187 
	$__isctype_f
 (
lower
)

188 
	$__isctype_f
 (
graph
)

189 
	$__isctype_f
 (
print
)

190 
	$__isctype_f
 (
punct
)

191 
	$__isctype_f
 (
space
)

192 
	$__isctype_f
 (
upper
)

193 
	$__isctype_f
 (
xdigit
)

194 #ifdef 
__USE_ISOC99


195 
	$__isctype_f
 (
blank
)

197 #elif 
defined
 
__isctype


198 #define 
	#isalnum
(
c
) 
	`__isctype
((c), 
_ISalnum
)

	)

199 #define 
	#isalpha
(
c
) 
	`__isctype
((c), 
_ISalpha
)

	)

200 #define 
	#iscntrl
(
c
) 
	`__isctype
((c), 
_IScntrl
)

	)

201 #define 
	#isdigit
(
c
) 
	`__isctype
((c), 
_ISdigit
)

	)

202 #define 
	#islower
(
c
) 
	`__isctype
((c), 
_ISlower
)

	)

203 #define 
	#isgraph
(
c
) 
	`__isctype
((c), 
_ISgraph
)

	)

204 #define 
	#isprint
(
c
) 
	`__isctype
((c), 
_ISprint
)

	)

205 #define 
	#ispunct
(
c
) 
	`__isctype
((c), 
_ISpunct
)

	)

206 #define 
	#isspace
(
c
) 
	`__isctype
((c), 
_ISspace
)

	)

207 #define 
	#isupper
(
c
) 
	`__isctype
((c), 
_ISupper
)

	)

208 #define 
	#isxdigit
(
c
) 
	`__isctype
((c), 
_ISxdigit
)

	)

209 #ifdef 
__USE_ISOC99


210 #define 
	#isblank
(
c
) 
	`__isctype
((c), 
_ISblank
)

	)

214 #ifdef 
__USE_EXTERN_INLINES


215 
__extern_inline
 int

216 
	`__NTH
 (
	$tolower
 (int 
__c
))

218 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_tolower_loc
 ())[__c] : __c;

219 
	}
}

221 
__extern_inline
 int

222 
__NTH
 (
	$toupper
 (int 
__c
))

224 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_toupper_loc
 ())[__c] : __c;

225 
	}
}

228 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


229 #define 
	#tolower
(
c
) 
	`__tobody
 (c, 
tolower
, *
	`__ctype_tolower_loc
 (), (c))

	)

230 #define 
	#toupper
(
c
) 
	`__tobody
 (c, 
toupper
, *
	`__ctype_toupper_loc
 (), (c))

	)

233 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


234 #define 
	#isascii
(
c
) 
	`__isascii
 (c)

	)

235 #define 
	#toascii
(
c
) 
	`__toascii
 (c)

	)

237 #define 
	#_tolower
(
c
) ((int) (*
	`__ctype_tolower_loc
 ())[(int) (c)])

	)

238 #define 
	#_toupper
(
c
) ((int) (*
	`__ctype_toupper_loc
 ())[(int) (c)])

	)

244 #ifdef 
__USE_XOPEN2K8


258 #include 
	~<xlocale.h
>

262 #define 
	#__isctype_l
(
c
, 
type
, 
locale
) \

263 ((
locale
)->
__ctype_b
[(int) (
c
)] & (unsigned short int) 
type
)

	)

265 #define 
	#__exctype_l
(
name
) \

266 extern int 
	`name
 (int, 
__locale_t
) 
__THROW


	)

272 
__exctype_l
 (
isalnum_l
);

273 
__exctype_l
 (
isalpha_l
);

274 
__exctype_l
 (
iscntrl_l
);

275 
__exctype_l
 (
isdigit_l
);

276 
__exctype_l
 (
islower_l
);

277 
__exctype_l
 (
isgraph_l
);

278 
__exctype_l
 (
isprint_l
);

279 
__exctype_l
 (
ispunct_l
);

280 
__exctype_l
 (
isspace_l
);

281 
__exctype_l
 (
isupper_l
);

282 
__exctype_l
 (
isxdigit_l
);

284 
__exctype_l
 (
isblank_l
);

288 extern int 
	$__tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

289 extern int 
	$tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

292 extern int 
	$__toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

293 extern int 
	$toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

295 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


296 #define 
	#__tolower_l
(
c
, 
locale
) \

297 
	`__tobody
 (
c
, 
__tolower_l
, (
locale
)->
__ctype_tolower
, (c, locale))

	)

298 #define 
	#__toupper_l
(
c
, 
locale
) \

299 
	`__tobody
 (
c
, 
__toupper_l
, (
locale
)->
__ctype_toupper
, (c, locale))

	)

300 #define 
	#tolower_l
(
c
, 
locale
) 
	`__tolower_l
 ((c), (locale))

	)

301 #define 
	#toupper_l
(
c
, 
locale
) 
	`__toupper_l
 ((c), (locale))

	)

305 #ifndef 
__NO_CTYPE


306 #define 
	#__isalnum_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalnum
, (l))

	)

307 #define 
	#__isalpha_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalpha
, (l))

	)

308 #define 
	#__iscntrl_l
(
c
,
l
) 
	`__isctype_l
((c), 
_IScntrl
, (l))

	)

309 #define 
	#__isdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISdigit
, (l))

	)

310 #define 
	#__islower_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISlower
, (l))

	)

311 #define 
	#__isgraph_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISgraph
, (l))

	)

312 #define 
	#__isprint_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISprint
, (l))

	)

313 #define 
	#__ispunct_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISpunct
, (l))

	)

314 #define 
	#__isspace_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISspace
, (l))

	)

315 #define 
	#__isupper_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISupper
, (l))

	)

316 #define 
	#__isxdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISxdigit
, (l))

	)

318 #define 
	#__isblank_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISblank
, (l))

	)

320 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


321 #define 
	#__isascii_l
(
c
,
l
) ((l), 
	`__isascii
 (c))

	)

322 #define 
	#__toascii_l
(
c
,
l
) ((l), 
	`__toascii
 (c))

	)

325 #define 
	#isalnum_l
(
c
,
l
) 
	`__isalnum_l
 ((c), (l))

	)

326 #define 
	#isalpha_l
(
c
,
l
) 
	`__isalpha_l
 ((c), (l))

	)

327 #define 
	#iscntrl_l
(
c
,
l
) 
	`__iscntrl_l
 ((c), (l))

	)

328 #define 
	#isdigit_l
(
c
,
l
) 
	`__isdigit_l
 ((c), (l))

	)

329 #define 
	#islower_l
(
c
,
l
) 
	`__islower_l
 ((c), (l))

	)

330 #define 
	#isgraph_l
(
c
,
l
) 
	`__isgraph_l
 ((c), (l))

	)

331 #define 
	#isprint_l
(
c
,
l
) 
	`__isprint_l
 ((c), (l))

	)

332 #define 
	#ispunct_l
(
c
,
l
) 
	`__ispunct_l
 ((c), (l))

	)

333 #define 
	#isspace_l
(
c
,
l
) 
	`__isspace_l
 ((c), (l))

	)

334 #define 
	#isupper_l
(
c
,
l
) 
	`__isupper_l
 ((c), (l))

	)

335 #define 
	#isxdigit_l
(
c
,
l
) 
	`__isxdigit_l
 ((c), (l))

	)

337 #define 
	#isblank_l
(
c
,
l
) 
	`__isblank_l
 ((c), (l))

	)

339 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


340 #define 
	#isascii_l
(
c
,
l
) 
	`__isascii_l
 ((c), (l))

	)

341 #define 
	#toascii_l
(
c
,
l
) 
	`__toascii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/errno.h

22 #ifndef 
_ERRNO_H


26 #ifndef 
__need_Emath


27 #define 
	#_ERRNO_H
 1

	)

28 #include 
	~<features.h
>

31 
	g__BEGIN_DECLS


35 #include 
	~<bits/errno.h
>

36 #undef 
__need_Emath


38 #ifdef 
_ERRNO_H


45 #ifndef 
errno


46 extern int 
errno
;

49 #ifdef 
__USE_GNU


54 extern char *
program_invocation_name
, *
program_invocation_short_name
;

58 
	g__END_DECLS


66 #if 
defined
 
__USE_GNU
 || defined 
__need_error_t


67 #ifndef 
__error_t_defined


68 typedef int 
	terror_t
;

69 #define 
	#__error_t_defined
 1

	)

71 #undef 
__need_error_t


	@/usr/include/stdio.h

23 #ifndef 
_STDIO_H


25 #if !
defined
 
__need_FILE
 && !defined 
__need___FILE


26 #define 
	#_STDIO_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

35 #include 
	~<bits/types.h
>

36 #define 
	#__need_FILE


	)

37 #define 
	#__need___FILE


	)

41 #if !
defined
 
__FILE_defined
 && defined 
__need_FILE


44 struct 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 typedef struct 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #if 
defined
 
__USE_LARGEFILE64
 || defined 
__USE_SVID
 || defined 
__USE_POSIX
 \

51 || 
defined
 
	g__USE_BSD
 || defined 
	g__USE_ISOC99
 || defined 
	g__USE_XOPEN
 \

52 || 
defined
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 #define 
	#__FILE_defined
 1

	)

58 #undef 
__need_FILE


61 #if !
defined
 
____FILE_defined
 && defined 
__need___FILE


64 typedef struct 
_IO_FILE
 
	t__FILE
;

66 #define 
	#____FILE_defined
 1

	)

68 #undef 
__need___FILE


71 #ifdef 
_STDIO_H


72 #define 
	#_STDIO_USES_IOSTREAM


	)

74 #include 
	~<libio.h
>

76 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


77 #ifdef 
__GNUC__


78 #ifndef 
_VA_LIST_DEFINED


79 typedef 
_G_va_list
 
	tva_list
;

80 #define 
	#_VA_LIST_DEFINED


	)

83 #include 
	~<stdarg.h
>

87 #ifdef 
__USE_XOPEN2K8


88 #ifndef 
__off_t_defined


89 #ifndef 
__USE_FILE_OFFSET64


90 typedef 
__off_t
 
	toff_t
;

92 typedef 
__off64_t
 
	toff_t
;

94 #define 
	#__off_t_defined


	)

96 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


97 typedef 
__off64_t
 
	toff64_t
;

98 #define 
	#__off64_t_defined


	)

101 #ifndef 
__ssize_t_defined


102 typedef 
__ssize_t
 
	tssize_t
;

103 #define 
	#__ssize_t_defined


	)

108 
__BEGIN_NAMESPACE_STD


109 #ifndef 
__USE_FILE_OFFSET64


110 typedef 
_G_fpos_t
 
	tfpos_t
;

112 typedef 
_G_fpos64_t
 
	tfpos_t
;

114 
__END_NAMESPACE_STD


115 #ifdef 
__USE_LARGEFILE64


116 typedef 
_G_fpos64_t
 
	tfpos64_t
;

120 #define 
	#_IOFBF
 0

	)

121 #define 
	#_IOLBF
 1

	)

122 #define 
	#_IONBF
 2

	)

126 #ifndef 
BUFSIZ


127 #define 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #ifndef 
EOF


134 #define 
	#EOF
 (-1)

	)

140 #define 
	#SEEK_SET
 0

	)

141 #define 
	#SEEK_CUR
 1

	)

142 #define 
	#SEEK_END
 2

	)

143 #ifdef 
__USE_GNU


144 #define 
	#SEEK_DATA
 3

	)

145 #define 
	#SEEK_HOLE
 4

	)

149 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


151 #define 
	#P_tmpdir
 "/tmp"

	)

164 #include 
	~<bits/stdio_lim.h
>

168 extern struct 
_IO_FILE
 *
stdin
;

169 extern struct 
_IO_FILE
 *
stdout
;

170 extern struct 
_IO_FILE
 *
stderr
;

172 #define 
	#stdin
 
stdin


	)

173 #define 
	#stdout
 
stdout


	)

174 #define 
	#stderr
 
stderr


	)

176 
__BEGIN_NAMESPACE_STD


178 extern int 
	$remove
 (const char *
__filename
) 
__THROW
;

180 extern int 
	$rename
 (const char *
__old
, const char *
__new
) 
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifdef 
__USE_ATFILE


185 extern int 
	$renameat
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

186 const char *
__new
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #ifndef 
__USE_FILE_OFFSET64


195 extern 
FILE
 *
	$tmpfile
 (void) 
__wur
;

197 #ifdef 
__REDIRECT


198 extern 
FILE
 *
	`__REDIRECT
 (
tmpfile
, (void), 
tmpfile64
) 
__wur
;

200 #define 
	#tmpfile
 
tmpfile64


	)

204 #ifdef 
__USE_LARGEFILE64


205 extern 
FILE
 *
	$tmpfile64
 (void) 
__wur
;

209 extern char *
	$tmpnam
 (char *
__s
) 
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifdef 
__USE_MISC


215 extern char *
	$tmpnam_r
 (char *
__s
) 
__THROW
 
__wur
;

219 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


227 extern char *
	$tempnam
 (const char *
__dir
, const char *
__pfx
)

228 
__THROW
 
__attribute_malloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 extern int 
	`fclose
 (
FILE
 *
__stream
);

242 extern int 
	`fflush
 (
FILE
 *
__stream
);

243 
__END_NAMESPACE_STD


245 #ifdef 
__USE_MISC


252 extern int 
	`fflush_unlocked
 (
FILE
 *
__stream
);

255 #ifdef 
__USE_GNU


262 extern int 
	`fcloseall
 (void);

266 
__BEGIN_NAMESPACE_STD


267 #ifndef 
__USE_FILE_OFFSET64


272 extern 
FILE
 *
	$fopen
 (const char *
__restrict
 
__filename
,

273 const char *
__restrict
 
__modes
) 
__wur
;

278 extern 
FILE
 *
	$freopen
 (const char *
__restrict
 
__filename
,

279 const char *
__restrict
 
__modes
,

280 
FILE
 *
__restrict
 
__stream
) 
__wur
;

282 #ifdef 
__REDIRECT


283 extern 
FILE
 *
	`__REDIRECT
 (
fopen
, (const char *
__restrict
 
__filename
,

284 const char *
__restrict
 
__modes
), 
fopen64
)

285 
__wur
;

286 extern 
FILE
 *
	`__REDIRECT
 (
freopen
, (const char *
__restrict
 
__filename
,

287 const char *
__restrict
 
__modes
,

288 
FILE
 *
__restrict
 
__stream
), 
freopen64
)

289 
__wur
;

291 #define 
	#fopen
 
fopen64


	)

292 #define 
	#freopen
 
freopen64


	)

295 
__END_NAMESPACE_STD


296 #ifdef 
__USE_LARGEFILE64


297 extern 
FILE
 *
	$fopen64
 (const char *
__restrict
 
__filename
,

298 const char *
__restrict
 
__modes
) 
__wur
;

299 extern 
FILE
 *
	$freopen64
 (const char *
__restrict
 
__filename
,

300 const char *
__restrict
 
__modes
,

301 
FILE
 *
__restrict
 
__stream
) 
__wur
;

304 #ifdef 
__USE_POSIX


306 extern 
FILE
 *
	$fdopen
 (int 
__fd
, const char *
__modes
) 
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 extern 
FILE
 *
	$fopencookie
 (void *
__restrict
 
__magic_cookie
,

313 const char *
__restrict
 
__modes
,

314 
_IO_cookie_io_functions_t
 
__io_funcs
) 
__THROW
 
__wur
;

317 #ifdef 
__USE_XOPEN2K8


319 extern 
FILE
 *
	$fmemopen
 (void *
__s
, 
size_t
 
__len
, const char *
__modes
)

320 
__THROW
 
__wur
;

325 extern 
FILE
 *
	$open_memstream
 (char **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 extern void 
	$setbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
) 
__THROW
;

336 extern int 
	$setvbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

337 int 
__modes
, 
size_t
 
__n
) 
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 extern void 
	$setbuffer
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

344 
size_t
 
__size
) 
__THROW
;

347 extern void 
	$setlinebuf
 (
FILE
 *
__stream
) 
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 extern int 
	`fprintf
 (
FILE
 *
__restrict
 
__stream
,

357 const char *
__restrict
 
__format
, ...);

362 extern int 
	`printf
 (const char *
__restrict
 
__format
, ...);

364 extern int 
	$sprintf
 (char *
__restrict
 
__s
,

365 const char *
__restrict
 
__format
, ...) 
__THROWNL
;

371 extern int 
	`vfprintf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

372 
_G_va_list
 
__arg
);

377 extern int 
	`vprintf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
);

379 extern int 
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__format
,

380 
_G_va_list
 
__arg
) 
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 extern int 
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

387 const char *
__restrict
 
__format
, ...)

388 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

390 extern int 
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

391 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

392 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifdef 
__USE_GNU


399 extern int 
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__f
,

400 
_G_va_list
 
__arg
)

401 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 0))) 
__wur
;

402 extern int 
	$__asprintf
 (char **
__restrict
 
__ptr
,

403 const char *
__restrict
 
__fmt
, ...)

404 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

405 extern int 
	$asprintf
 (char **
__restrict
 
__ptr
,

406 const char *
__restrict
 
__fmt
, ...)

407 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

410 #ifdef 
__USE_XOPEN2K8


412 extern int 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
,

413 
_G_va_list
 
__arg
)

414 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

415 extern int 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

416 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 extern int 
	$fscanf
 (
FILE
 *
__restrict
 
__stream
,

426 const char *
__restrict
 
__format
, ...) 
__wur
;

431 extern int 
	$scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

433 extern int 
	$sscanf
 (const char *
__restrict
 
__s
,

434 const char *
__restrict
 
__format
, ...) 
__THROW
;

436 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

437 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

438 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

439 #ifdef 
__REDIRECT


443 extern int 
	`__REDIRECT
 (
fscanf
, (
FILE
 *
__restrict
 
__stream
,

444 const char *
__restrict
 
__format
, ...),

445 
__isoc99_fscanf
) 
__wur
;

446 extern int 
	`__REDIRECT
 (
scanf
, (const char *
__restrict
 
__format
, ...),

447 
__isoc99_scanf
) 
__wur
;

448 extern int 
	`__REDIRECT_NTH
 (
sscanf
, (const char *
__restrict
 
__s
,

449 const char *
__restrict
 
__format
, ...),

450 
__isoc99_sscanf
);

452 extern int 
	$__isoc99_fscanf
 (
FILE
 *
__restrict
 
__stream
,

453 const char *
__restrict
 
__format
, ...) 
__wur
;

454 extern int 
	$__isoc99_scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

455 extern int 
	$__isoc99_sscanf
 (const char *
__restrict
 
__s
,

456 const char *
__restrict
 
__format
, ...) 
__THROW
;

457 #define 
	#fscanf
 
__isoc99_fscanf


	)

458 #define 
	#scanf
 
__isoc99_scanf


	)

459 #define 
	#sscanf
 
__isoc99_sscanf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 extern int 
	$vfscanf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

472 
_G_va_list
 
__arg
)

473 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

479 extern int 
	$vscanf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

480 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

483 extern int 
	$vsscanf
 (const char *
__restrict
 
__s
,

484 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

485 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

487 #if !
defined
 
__USE_GNU
 \

488 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

489 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

490 #ifdef 
__REDIRECT


494 extern int 
	`__REDIRECT
 (
vfscanf
,

495 (
FILE
 *
__restrict
 
__s
,

496 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
),

497 
__isoc99_vfscanf
)

498 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

499 extern int 
	`__REDIRECT
 (
vscanf
, (const char *
__restrict
 
__format
,

500 
_G_va_list
 
__arg
), 
__isoc99_vscanf
)

501 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

502 extern int 
	`__REDIRECT_NTH
 (
vsscanf
,

503 (const char *
__restrict
 
__s
,

504 const char *
__restrict
 
__format
,

505 
_G_va_list
 
__arg
), 
__isoc99_vsscanf
)

506 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

508 extern int 
	$__isoc99_vfscanf
 (
FILE
 *
__restrict
 
__s
,

509 const char *
__restrict
 
__format
,

510 
_G_va_list
 
__arg
) 
__wur
;

511 extern int 
	$__isoc99_vscanf
 (const char *
__restrict
 
__format
,

512 
_G_va_list
 
__arg
) 
__wur
;

513 extern int 
	$__isoc99_vsscanf
 (const char *
__restrict
 
__s
,

514 const char *
__restrict
 
__format
,

515 
_G_va_list
 
__arg
) 
__THROW
;

516 #define 
	#vfscanf
 
__isoc99_vfscanf


	)

517 #define 
	#vscanf
 
__isoc99_vscanf


	)

518 #define 
	#vsscanf
 
__isoc99_vsscanf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 extern int 
	`fgetc
 (
FILE
 *
__stream
);

532 extern int 
	`getc
 (
FILE
 *
__stream
);

538 extern int 
	`getchar
 (void);

539 
__END_NAMESPACE_STD


543 #define 
	#getc
(
_fp
) 
	`_IO_getc
 (_fp)

	)

545 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


550 extern int 
	`getc_unlocked
 (
FILE
 *
__stream
);

551 extern int 
	`getchar_unlocked
 (void);

554 #ifdef 
__USE_MISC


561 extern int 
	`fgetc_unlocked
 (
FILE
 *
__stream
);

565 
__BEGIN_NAMESPACE_STD


573 extern int 
	`fputc
 (int 
__c
, 
FILE
 *
__stream
);

574 extern int 
	`putc
 (int 
__c
, 
FILE
 *
__stream
);

580 extern int 
	`putchar
 (int 
__c
);

581 
__END_NAMESPACE_STD


585 #define 
	#putc
(
_ch
, 
_fp
) 
	`_IO_putc
 (_ch, _fp)

	)

587 #ifdef 
__USE_MISC


594 extern int 
	`fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

597 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


602 extern int 
	`putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

603 extern int 
	`putchar_unlocked
 (int 
__c
);

607 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 \

608 || (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

610 extern int 
	`getw
 (
FILE
 *
__stream
);

613 extern int 
	`putw
 (int 
__w
, 
FILE
 *
__stream
);

617 
__BEGIN_NAMESPACE_STD


622 extern char *
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

623 
__wur
;

625 #if !
defined
 
__USE_ISOC11
 \

626 || (
defined
 
__cplusplus
 && __cplusplus <= 201103L)

638 extern char *
	$gets
 (char *
__s
) 
__wur
 
__attribute_deprecated__
;

640 
__END_NAMESPACE_STD


642 #ifdef 
__USE_GNU


649 extern char *
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
,

650 
FILE
 *
__restrict
 
__stream
) 
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 extern 
_IO_ssize_t
 
	$__getdelim
 (char **
__restrict
 
__lineptr
,

666 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

667 
FILE
 *
__restrict
 
__stream
) 
__wur
;

668 extern 
_IO_ssize_t
 
	$getdelim
 (char **
__restrict
 
__lineptr
,

669 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

670 
FILE
 *
__restrict
 
__stream
) 
__wur
;

678 extern 
_IO_ssize_t
 
	$getline
 (char **
__restrict
 
__lineptr
,

679 
size_t
 *
__restrict
 
__n
,

680 
FILE
 *
__restrict
 
__stream
) 
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 extern int 
	`fputs
 (const char *
__restrict
 
__s
, 
FILE
 *__restrict 
__stream
);

695 extern int 
	`puts
 (const char *
__s
);

702 extern int 
	`ungetc
 (int 
__c
, 
FILE
 *
__stream
);

709 extern 
size_t
 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

715 extern 
size_t
 
	`fwrite
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

716 
size_t
 
__n
, 
FILE
 *
__restrict
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifdef 
__USE_GNU


726 extern int 
	`fputs_unlocked
 (const char *
__restrict
 
__s
,

727 
FILE
 *
__restrict
 
__stream
);

730 #ifdef 
__USE_MISC


737 extern 
size_t
 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

739 extern 
size_t
 
	`fwrite_unlocked
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
);

744 
__BEGIN_NAMESPACE_STD


749 extern int 
	`fseek
 (
FILE
 *
__stream
, long int 
__off
, int 
__whence
);

754 extern long int 
	$ftell
 (
FILE
 *
__stream
) 
__wur
;

759 extern void 
	`rewind
 (
FILE
 *
__stream
);

760 
__END_NAMESPACE_STD


767 #if 
defined
 
__USE_LARGEFILE
 || defined 
__USE_XOPEN2K


768 #ifndef 
__USE_FILE_OFFSET64


773 extern int 
	`fseeko
 (
FILE
 *
__stream
, 
__off_t
 
__off
, int 
__whence
);

778 extern 
__off_t
 
	$ftello
 (
FILE
 *
__stream
) 
__wur
;

780 #ifdef 
__REDIRECT


781 extern int 
	`__REDIRECT
 (
fseeko
,

782 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
),

783 
fseeko64
);

784 extern 
__off64_t
 
	`__REDIRECT
 (
ftello
, (
FILE
 *
__stream
), 
ftello64
);

786 #define 
	#fseeko
 
fseeko64


	)

787 #define 
	#ftello
 
ftello64


	)

792 
__BEGIN_NAMESPACE_STD


793 #ifndef 
__USE_FILE_OFFSET64


798 extern int 
	`fgetpos
 (
FILE
 *
__restrict
 
__stream
, 
fpos_t
 *__restrict 
__pos
);

803 extern int 
	`fsetpos
 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
);

805 #ifdef 
__REDIRECT


806 extern int 
	`__REDIRECT
 (
fgetpos
, (
FILE
 *
__restrict
 
__stream
,

807 
fpos_t
 *
__restrict
 
__pos
), 
fgetpos64
);

808 extern int 
	`__REDIRECT
 (
fsetpos
,

809 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
), 
fsetpos64
);

811 #define 
	#fgetpos
 
fgetpos64


	)

812 #define 
	#fsetpos
 
fsetpos64


	)

815 
__END_NAMESPACE_STD


817 #ifdef 
__USE_LARGEFILE64


818 extern int 
	`fseeko64
 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
);

819 extern 
__off64_t
 
	$ftello64
 (
FILE
 *
__stream
) 
__wur
;

820 extern int 
	`fgetpos64
 (
FILE
 *
__restrict
 
__stream
, 
fpos64_t
 *__restrict 
__pos
);

821 extern int 
	`fsetpos64
 (
FILE
 *
__stream
, const 
fpos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 extern void 
	$clearerr
 (
FILE
 *
__stream
) 
__THROW
;

828 extern int 
	$feof
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

830 extern int 
	$ferror
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifdef 
__USE_MISC


835 extern void 
	$clearerr_unlocked
 (
FILE
 *
__stream
) 
__THROW
;

836 extern int 
	$feof_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

837 extern int 
	$ferror_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 extern void 
	`perror
 (const char *
__s
);

847 
__END_NAMESPACE_STD


853 #include 
	~<bits/sys_errlist.h
>

856 #ifdef 
__USE_POSIX


858 extern int 
	$fileno
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

861 #ifdef 
__USE_MISC


863 extern int 
	$fileno_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

867 #if (
defined
 
__USE_POSIX2
 || defined 
__USE_SVID
 || defined 
__USE_BSD
 || \

868 
defined
 
__USE_MISC
)

873 extern 
FILE
 *
	$popen
 (const char *
__command
, const char *
__modes
) 
__wur
;

879 extern int 
	`pclose
 (
FILE
 *
__stream
);

883 #ifdef 
__USE_POSIX


885 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

889 #ifdef 
__USE_XOPEN


891 extern char *
	`cuserid
 (char *
__s
);

895 #ifdef 
__USE_GNU


896 struct 
obstack
;

899 extern int 
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

900 const char *
__restrict
 
__format
, ...)

901 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

902 extern int 
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

903 const char *
__restrict
 
__format
,

904 
_G_va_list
 
__args
)

905 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

909 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


913 extern void 
	$flockfile
 (
FILE
 *
__stream
) 
__THROW
;

917 extern int 
	$ftrylockfile
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

920 extern void 
	$funlockfile
 (
FILE
 *
__stream
) 
__THROW
;

923 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
 && !defined 
__USE_GNU


927 #define 
	#__need_getopt


	)

928 #include 
	~<getopt.h
>

933 #ifdef 
__USE_EXTERN_INLINES


934 #include 
	~<bits/stdio.h
>

936 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


937 #include 
	~<bits/stdio2.h
>

939 #ifdef 
__LDBL_COMPAT


940 #include 
	~<bits/stdio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #ifndef 
_STDLIB_H


24 #include 
	~<features.h
>

27 #define 
	#__need_size_t


	)

28 #ifndef 
__need_malloc_and_calloc


29 #define 
	#__need_wchar_t


	)

30 #define 
	#__need_NULL


	)

32 #include 
	~<stddef.h
>

34 
	g__BEGIN_DECLS


36 #ifndef 
__need_malloc_and_calloc


37 #define 
	#_STDLIB_H
 1

	)

39 #if (
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) && !defined 
_SYS_WAIT_H


41 #include 
	~<bits/waitflags.h
>

42 #include 
	~<bits/waitstatus.h
>

44 #ifdef 
__USE_BSD


49 #if 
defined
 
__GNUC__
 && !defined 
__cplusplus


50 #define 
	#__WAIT_INT
(
status
) \

51 (
	`__extension__
 (((union { 
	`__typeof
(
status
) 
__in
; int 
__i
; }) \

52 { .
__in
 = (
status
) }).
__i
))

	)

54 #define 
	#__WAIT_INT
(
status
) (*(int *) &(status))

	)

62 #if !
defined
 
__GNUC__
 || __GNUC__ < 2 || defined 
__cplusplus


63 #define 
	#__WAIT_STATUS
 void *

	)

64 #define 
	#__WAIT_STATUS_DEFN
 void *

	)

69 union 
wait
 *
	m__uptr
;

70 int *
	m__iptr
;

71 } 
	t__WAIT_STATUS
 
	t__attribute__
 ((
	t__transparent_union__
));

72 #define 
	#__WAIT_STATUS_DEFN
 int *

	)

77 #define 
	#__WAIT_INT
(
status
) (status)

	)

78 #define 
	#__WAIT_STATUS
 int *

	)

79 #define 
	#__WAIT_STATUS_DEFN
 int *

	)

84 #define 
	#WEXITSTATUS
(
status
) 
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (status))

	)

85 #define 
	#WTERMSIG
(
status
) 
	`__WTERMSIG
 (
	`__WAIT_INT
 (status))

	)

86 #define 
	#WSTOPSIG
(
status
) 
	`__WSTOPSIG
 (
	`__WAIT_INT
 (status))

	)

87 #define 
	#WIFEXITED
(
status
) 
	`__WIFEXITED
 (
	`__WAIT_INT
 (status))

	)

88 #define 
	#WIFSIGNALED
(
status
) 
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (status))

	)

89 #define 
	#WIFSTOPPED
(
status
) 
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (status))

	)

90 #ifdef 
__WIFCONTINUED


91 #define 
	#WIFCONTINUED
(
status
) 
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (status))

	)

95 
__BEGIN_NAMESPACE_STD


99 int 
	mquot
;

100 int 
	mrem
;

101 } 
	tdiv_t
;

104 #ifndef 
__ldiv_t_defined


107 long int 
	mquot
;

108 long int 
	mrem
;

109 } 
	tldiv_t
;

110 #define 
	#__ldiv_t_defined
 1

	)

112 
	g__END_NAMESPACE_STD


114 #if 
defined
 
__USE_ISOC99
 && !defined 
__lldiv_t_defined


115 
__BEGIN_NAMESPACE_C99


117 
__extension__
 typedef struct

119 long long int 
	mquot
;

120 long long int 
	mrem
;

121 } 
	tlldiv_t
;

122 #define 
	#__lldiv_t_defined
 1

	)

123 
	g__END_NAMESPACE_C99


128 #define 
	#RAND_MAX
 2147483647

	)

133 #define 
	#EXIT_FAILURE
 1

	)

134 #define 
	#EXIT_SUCCESS
 0

	)

138 #define 
	#MB_CUR_MAX
 (
	`__ctype_get_mb_cur_max
 ())

	)

139 extern 
size_t
 
	$__ctype_get_mb_cur_max
 (void) 
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 extern double 
	$atof
 (const char *
__nptr
)

145 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

147 extern int 
	$atoi
 (const char *
__nptr
)

148 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

150 extern long int 
	$atol
 (const char *
__nptr
)

151 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

152 
__END_NAMESPACE_STD


154 #if 
defined
 
__USE_ISOC99
 || (defined 
__GLIBC_HAVE_LONG_LONG
 && defined 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__extension__
 extern long long int 
	$atoll
 (const char *
__nptr
)

158 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 extern double 
	$strtod
 (const char *
__restrict
 
__nptr
,

165 char **
__restrict
 
__endptr
)

166 
__THROW
 
	`__nonnull
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 extern float 
	$strtof
 (const char *
__restrict
 
__nptr
,

173 char **
__restrict
 
__endptr
) 
__THROW
 
	`__nonnull
 ((1));

175 extern long double 
	$strtold
 (const char *
__restrict
 
__nptr
,

176 char **
__restrict
 
__endptr
)

177 
__THROW
 
	`__nonnull
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 extern long int 
	$strtol
 (const char *
__restrict
 
__nptr
,

184 char **
__restrict
 
__endptr
, int 
__base
)

185 
__THROW
 
	`__nonnull
 ((1));

187 extern unsigned long int 
	$strtoul
 (const char *
__restrict
 
__nptr
,

188 char **
__restrict
 
__endptr
, int 
__base
)

189 
__THROW
 
	`__nonnull
 ((1));

190 
__END_NAMESPACE_STD


192 #if 
defined
 
__GLIBC_HAVE_LONG_LONG
 && defined 
__USE_BSD


194 
__extension__


195 extern long long int 
	$strtoq
 (const char *
__restrict
 
__nptr
,

196 char **
__restrict
 
__endptr
, int 
__base
)

197 
__THROW
 
	`__nonnull
 ((1));

199 
__extension__


200 extern unsigned long long int 
	$strtouq
 (const char *
__restrict
 
__nptr
,

201 char **
__restrict
 
__endptr
, int 
__base
)

202 
__THROW
 
	`__nonnull
 ((1));

205 #if 
defined
 
__USE_ISOC99
 || (defined 
__GLIBC_HAVE_LONG_LONG
 && defined 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__extension__


209 extern long long int 
	$strtoll
 (const char *
__restrict
 
__nptr
,

210 char **
__restrict
 
__endptr
, int 
__base
)

211 
__THROW
 
	`__nonnull
 ((1));

213 
__extension__


214 extern unsigned long long int 
	$strtoull
 (const char *
__restrict
 
__nptr
,

215 char **
__restrict
 
__endptr
, int 
__base
)

216 
__THROW
 
	`__nonnull
 ((1));

217 
__END_NAMESPACE_C99


221 #ifdef 
__USE_GNU


235 #include 
	~<xlocale.h
>

239 extern long int 
	$strtol_l
 (const char *
__restrict
 
__nptr
,

240 char **
__restrict
 
__endptr
, int 
__base
,

241 
__locale_t
 
__loc
) 
__THROW
 
	`__nonnull
 ((1, 4));

243 extern unsigned long int 
	$strtoul_l
 (const char *
__restrict
 
__nptr
,

244 char **
__restrict
 
__endptr
,

245 int 
__base
, 
__locale_t
 
__loc
)

246 
__THROW
 
	`__nonnull
 ((1, 4));

248 
__extension__


249 extern long long int 
	$strtoll_l
 (const char *
__restrict
 
__nptr
,

250 char **
__restrict
 
__endptr
, int 
__base
,

251 
__locale_t
 
__loc
)

252 
__THROW
 
	`__nonnull
 ((1, 4));

254 
__extension__


255 extern unsigned long long int 
	$strtoull_l
 (const char *
__restrict
 
__nptr
,

256 char **
__restrict
 
__endptr
,

257 int 
__base
, 
__locale_t
 
__loc
)

258 
__THROW
 
	`__nonnull
 ((1, 4));

260 extern double 
	$strtod_l
 (const char *
__restrict
 
__nptr
,

261 char **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

262 
__THROW
 
	`__nonnull
 ((1, 3));

264 extern float 
	$strtof_l
 (const char *
__restrict
 
__nptr
,

265 char **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

266 
__THROW
 
	`__nonnull
 ((1, 3));

268 extern long double 
	$strtold_l
 (const char *
__restrict
 
__nptr
,

269 char **
__restrict
 
__endptr
,

270 
__locale_t
 
__loc
)

271 
__THROW
 
	`__nonnull
 ((1, 3));

275 #ifdef 
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__extern_inline
 int

278 
	`__NTH
 (
	$atoi
 (const char *
__nptr
))

280 return (int) 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

281 
	}
}

282 
__extern_inline
 long int

283 
__NTH
 (
	$atol
 (const char *
__nptr
))

285 return 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #if 
defined
 
__USE_MISC
 || defined 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__extension__
 
__extern_inline
 long long int

292 
__NTH
 (
	$atoll
 (const char *
__nptr
))

294 return 
	`strtoll
 (
__nptr
, (char **) 
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN_EXTENDED


305 extern char *
	$l64a
 (long int 
__n
) 
__THROW
 
__wur
;

308 extern long int 
	$a64l
 (const char *
__s
)

309 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

313 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_BSD


314 #include 
	~<sys/types.h
>

321 extern long int 
	$random
 (void) 
__THROW
;

324 extern void 
	$srandom
 (unsigned int 
__seed
) 
__THROW
;

330 extern char *
	$initstate
 (unsigned int 
__seed
, char *
__statebuf
,

331 
size_t
 
__statelen
) 
__THROW
 
	`__nonnull
 ((2));

335 extern char *
	$setstate
 (char *
__statebuf
) 
__THROW
 
	`__nonnull
 ((1));

338 #ifdef 
__USE_MISC


343 struct 
	srandom_data


345 
int32_t
 *
fptr
;

346 
int32_t
 *
rptr
;

347 
int32_t
 *
state
;

348 int 
rand_type
;

349 int 
rand_deg
;

350 int 
rand_sep
;

351 
int32_t
 *
end_ptr
;

354 extern int 
	$random_r
 (struct 
random_data
 *
__restrict
 
__buf
,

355 
int32_t
 *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

357 extern int 
	$srandom_r
 (unsigned int 
__seed
, struct 
random_data
 *
__buf
)

358 
__THROW
 
	`__nonnull
 ((2));

360 extern int 
	$initstate_r
 (unsigned int 
__seed
, char *
__restrict
 
__statebuf
,

361 
size_t
 
__statelen
,

362 struct 
random_data
 *
__restrict
 
__buf
)

363 
__THROW
 
	`__nonnull
 ((2, 4));

365 extern int 
	$setstate_r
 (char *
__restrict
 
__statebuf
,

366 struct 
random_data
 *
__restrict
 
__buf
)

367 
__THROW
 
	`__nonnull
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 extern int 
	$rand
 (void) 
__THROW
;

376 extern void 
	$srand
 (unsigned int 
__seed
) 
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifdef 
__USE_POSIX


381 extern int 
	$rand_r
 (unsigned int *
__seed
) 
__THROW
;

385 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


389 extern double 
	$drand48
 (void) 
__THROW
;

390 extern double 
	$erand48
 (unsigned short int 
__xsubi
[3]) 
__THROW
 
	`__nonnull
 ((1));

393 extern long int 
	$lrand48
 (void) 
__THROW
;

394 extern long int 
	$nrand48
 (unsigned short int 
__xsubi
[3])

395 
__THROW
 
	`__nonnull
 ((1));

398 extern long int 
	$mrand48
 (void) 
__THROW
;

399 extern long int 
	$jrand48
 (unsigned short int 
__xsubi
[3])

400 
__THROW
 
	`__nonnull
 ((1));

403 extern void 
	$srand48
 (long int 
__seedval
) 
__THROW
;

404 extern unsigned short int *
	$seed48
 (unsigned short int 
__seed16v
[3])

405 
__THROW
 
	`__nonnull
 ((1));

406 extern void 
	$lcong48
 (unsigned short int 
__param
[7]) 
__THROW
 
	`__nonnull
 ((1));

408 #ifdef 
__USE_MISC


412 struct 
	sdrand48_data


414 unsigned short int 
__x
[3];

415 unsigned short int 
__old_x
[3];

416 unsigned short int 
__c
;

417 unsigned short int 
__init
;

418 unsigned long long int 
__a
;

422 extern int 
	$drand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

423 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

424 extern int 
	$erand48_r
 (unsigned short int 
__xsubi
[3],

425 struct 
drand48_data
 *
__restrict
 
__buffer
,

426 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

429 extern int 
	$lrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

430 long int *
__restrict
 
__result
)

431 
__THROW
 
	`__nonnull
 ((1, 2));

432 extern int 
	$nrand48_r
 (unsigned short int 
__xsubi
[3],

433 struct 
drand48_data
 *
__restrict
 
__buffer
,

434 long int *
__restrict
 
__result
)

435 
__THROW
 
	`__nonnull
 ((1, 2));

438 extern int 
	$mrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

439 long int *
__restrict
 
__result
)

440 
__THROW
 
	`__nonnull
 ((1, 2));

441 extern int 
	$jrand48_r
 (unsigned short int 
__xsubi
[3],

442 struct 
drand48_data
 *
__restrict
 
__buffer
,

443 long int *
__restrict
 
__result
)

444 
__THROW
 
	`__nonnull
 ((1, 2));

447 extern int 
	$srand48_r
 (long int 
__seedval
, struct 
drand48_data
 *
__buffer
)

448 
__THROW
 
	`__nonnull
 ((2));

450 extern int 
	$seed48_r
 (unsigned short int 
__seed16v
[3],

451 struct 
drand48_data
 *
__buffer
) 
__THROW
 
	`__nonnull
 ((1, 2));

453 extern int 
	$lcong48_r
 (unsigned short int 
__param
[7],

454 struct 
drand48_data
 *
__buffer
)

455 
__THROW
 
	`__nonnull
 ((1, 2));

461 #ifndef 
__malloc_and_calloc_defined


462 #define 
	#__malloc_and_calloc_defined


	)

463 
__BEGIN_NAMESPACE_STD


465 extern void *
	$malloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__
 
__wur
;

467 extern void *
	$calloc
 (
size_t
 
__nmemb
, size_t 
__size
)

468 
__THROW
 
__attribute_malloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #ifndef 
__need_malloc_and_calloc


473 
__BEGIN_NAMESPACE_STD


479 extern void *
	$realloc
 (void *
__ptr
, 
size_t
 
__size
)

480 
__THROW
 
__attribute_warn_unused_result__
;

482 extern void 
	$free
 (void *
__ptr
) 
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 extern void 
	$cfree
 (void *
__ptr
) 
__THROW
;

490 #if 
defined
 
__USE_GNU
 || defined 
__USE_BSD
 || defined 
__USE_MISC


491 #include 
	~<alloca.h
>

494 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

495 || 
defined
 
__USE_BSD


497 extern void *
	$valloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__
 
__wur
;

500 #ifdef 
__USE_XOPEN2K


502 extern int 
	$posix_memalign
 (void **
__memptr
, 
size_t
 
__alignment
, size_t 
__size
)

503 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

506 #ifdef 
__USE_ISOC11


508 extern void *
	$aligned_alloc
 (
size_t
 
__alignment
, size_t 
__size
)

509 
__THROW
 
__wur
 
	`__attribute__
 ((
__malloc__
, 
	`__alloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 extern void 
	$abort
 (void) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

518 extern int 
	`atexit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

520 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


522 #ifdef 
__cplusplus


523 extern "C++" int 
	`at_quick_exit
 (void (*
__func
) (void))

524 
__THROW
 
	`__asm
 ("at_quick_exit") 
	`__nonnull
 ((1));

526 extern int 
	`at_quick_exit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 extern int 
	`on_exit
 (void (*
__func
) (int 
__status
, void *
__arg
), void *__arg)

535 
__THROW
 
	`__nonnull
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 extern void 
	$exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

544 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


548 extern void 
	$quick_exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

550 
__END_NAMESPACE_STD


552 #ifdef 
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 extern void 
	$_Exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 extern char *
	$getenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

564 
__END_NAMESPACE_STD


566 #ifdef 
__USE_GNU


569 extern char *
	$secure_getenv
 (const char *
__name
)

570 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

573 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


577 extern int 
	$putenv
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

580 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


583 extern int 
	$setenv
 (const char *
__name
, const char *
__value
, int 
__replace
)

584 
__THROW
 
	`__nonnull
 ((2));

587 extern int 
	$unsetenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

590 #ifdef 
__USE_MISC


594 extern int 
	$clearenv
 (void) 
__THROW
;

598 #if 
defined
 
__USE_MISC
 \

599 || (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
)

605 extern char *
	$mktemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1));

608 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
 \

609 || 
defined
 
__USE_XOPEN2K8


618 #ifndef 
__USE_FILE_OFFSET64


619 extern int 
	$mkstemp
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

621 #ifdef 
__REDIRECT


622 extern int 
	`__REDIRECT
 (
mkstemp
, (char *
__template
), 
mkstemp64
)

623 
	`__nonnull
 ((1)) 
__wur
;

625 #define 
	#mkstemp
 
mkstemp64


	)

628 #ifdef 
__USE_LARGEFILE64


629 extern int 
	$mkstemp64
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

633 #ifdef 
__USE_MISC


640 #ifndef 
__USE_FILE_OFFSET64


641 extern int 
	$mkstemps
 (char *
__template
, int 
__suffixlen
) 
	`__nonnull
 ((1)) 
__wur
;

643 #ifdef 
__REDIRECT


644 extern int 
	`__REDIRECT
 (
mkstemps
, (char *
__template
, int 
__suffixlen
),

645 
mkstemps64
) 
	`__nonnull
 ((1)) 
__wur
;

647 #define 
	#mkstemps
 
mkstemps64


	)

650 #ifdef 
__USE_LARGEFILE64


651 extern int 
	$mkstemps64
 (char *
__template
, int 
__suffixlen
)

652 
	`__nonnull
 ((1)) 
__wur
;

656 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K8


662 extern char *
	$mkdtemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

665 #ifdef 
__USE_GNU


672 #ifndef 
__USE_FILE_OFFSET64


673 extern int 
	$mkostemp
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

675 #ifdef 
__REDIRECT


676 extern int 
	`__REDIRECT
 (
mkostemp
, (char *
__template
, int 
__flags
), 
mkostemp64
)

677 
	`__nonnull
 ((1)) 
__wur
;

679 #define 
	#mkostemp
 
mkostemp64


	)

682 #ifdef 
__USE_LARGEFILE64


683 extern int 
	$mkostemp64
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

692 #ifndef 
__USE_FILE_OFFSET64


693 extern int 
	$mkostemps
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

694 
	`__nonnull
 ((1)) 
__wur
;

696 #ifdef 
__REDIRECT


697 extern int 
	`__REDIRECT
 (
mkostemps
, (char *
__template
, int 
__suffixlen
,

698 int 
__flags
), 
mkostemps64
)

699 
	`__nonnull
 ((1)) 
__wur
;

701 #define 
	#mkostemps
 
mkostemps64


	)

704 #ifdef 
__USE_LARGEFILE64


705 extern int 
	$mkostemps64
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

706 
	`__nonnull
 ((1)) 
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 extern int 
	$system
 (const char *
__command
) 
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 extern char *
	$canonicalize_file_name
 (const char *
__name
)

724 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

727 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


733 extern char *
	$realpath
 (const char *
__restrict
 
__name
,

734 char *
__restrict
 
__resolved
) 
__THROW
 
__wur
;

739 #ifndef 
__COMPAR_FN_T


740 #define 
	#__COMPAR_FN_T


	)

741 typedef int (*
	t__compar_fn_t
) (const void *, const void *);

743 #ifdef 
__USE_GNU


744 typedef 
__compar_fn_t
 
	tcomparison_fn_t
;

747 #ifdef 
__USE_GNU


748 typedef int (*
	t__compar_d_fn_t
) (const void *, const void *, void *);

751 
__BEGIN_NAMESPACE_STD


754 extern void *
	$bsearch
 (const void *
__key
, const void *
__base
,

755 
size_t
 
__nmemb
, size_t 
__size
, 
__compar_fn_t
 
__compar
)

756 
	`__nonnull
 ((1, 2, 5)) 
__wur
;

760 extern void 
	$qsort
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

761 
__compar_fn_t
 
__compar
) 
	`__nonnull
 ((1, 4));

762 #ifdef 
__USE_GNU


763 extern void 
	$qsort_r
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

764 
__compar_d_fn_t
 
__compar
, void *
__arg
)

765 
	`__nonnull
 ((1, 4));

770 extern int 
	$abs
 (int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

771 extern long int 
	$labs
 (long int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

772 
__END_NAMESPACE_STD


774 #ifdef 
__USE_ISOC99


775 
__extension__
 extern long long int 
	$llabs
 (long long int 
__x
)

776 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 extern 
div_t
 
	$div
 (int 
__numer
, int 
__denom
)

785 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

786 extern 
ldiv_t
 
	$ldiv
 (long int 
__numer
, long int 
__denom
)

787 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

788 
__END_NAMESPACE_STD


790 #ifdef 
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__extension__
 extern 
lldiv_t
 
	$lldiv
 (long long int 
__numer
,

793 long long int 
__denom
)

794 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

795 
__END_NAMESPACE_C99


799 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

800 || 
defined
 
__USE_SVID


807 extern char *
	$ecvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

808 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

813 extern char *
	$fcvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

814 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

819 extern char *
	$gcvt
 (double 
__value
, int 
__ndigit
, char *
__buf
)

820 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

823 #ifdef 
__USE_MISC


825 extern char *
	$qecvt
 (long double 
__value
, int 
__ndigit
,

826 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

827 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

828 extern char *
	$qfcvt
 (long double 
__value
, int 
__ndigit
,

829 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

830 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

831 extern char *
	$qgcvt
 (long double 
__value
, int 
__ndigit
, char *
__buf
)

832 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

837 extern int 
	$ecvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

838 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

839 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

840 extern int 
	$fcvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

841 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

842 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

844 extern int 
	$qecvt_r
 (long double 
__value
, int 
__ndigit
,

845 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

846 char *
__restrict
 
__buf
, 
size_t
 
__len
)

847 
__THROW
 
	`__nonnull
 ((3, 4, 5));

848 extern int 
	$qfcvt_r
 (long double 
__value
, int 
__ndigit
,

849 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

850 char *
__restrict
 
__buf
, 
size_t
 
__len
)

851 
__THROW
 
	`__nonnull
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 extern int 
	$mblen
 (const char *
__s
, 
size_t
 
__n
) 
__THROW
 
__wur
;

862 extern int 
	$mbtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

863 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW
 
__wur
;

866 extern int 
	$wctomb
 (char *
__s
, 
wchar_t
 
__wchar
) 
__THROW
 
__wur
;

870 extern 
size_t
 
	$mbstowcs
 (
wchar_t
 *
__restrict
 
__pwcs
,

871 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW
;

873 extern 
size_t
 
	$wcstombs
 (char *
__restrict
 
__s
,

874 const 
wchar_t
 *
__restrict
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifdef 
__USE_SVID


884 extern int 
	$rpmatch
 (const char *
__response
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

888 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


895 extern int 
	$getsubopt
 (char **
__restrict
 
__optionp
,

896 char *const *
__restrict
 
__tokens
,

897 char **
__restrict
 
__valuep
)

898 
__THROW
 
	`__nonnull
 ((1, 2, 3)) 
__wur
;

902 #ifdef 
__USE_XOPEN


904 extern void 
	$setkey
 (const char *
__key
) 
__THROW
 
	`__nonnull
 ((1));

910 #ifdef 
__USE_XOPEN2KXSI


912 extern int 
	$posix_openpt
 (int 
__oflag
) 
__wur
;

915 #ifdef 
__USE_XOPEN


920 extern int 
	$grantpt
 (int 
__fd
) 
__THROW
;

924 extern int 
	$unlockpt
 (int 
__fd
) 
__THROW
;

929 extern char *
	$ptsname
 (int 
__fd
) 
__THROW
 
__wur
;

932 #ifdef 
__USE_GNU


936 extern int 
	$ptsname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

937 
__THROW
 
	`__nonnull
 ((2));

940 extern int 
	`getpt
 (void);

943 #ifdef 
__USE_BSD


947 extern int 
	$getloadavg
 (double 
__loadavg
[], int 
__nelem
)

948 
__THROW
 
	`__nonnull
 ((1));

951 #include 
	~<bits/stdlib-float.h
>

954 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


955 #include 
	~<bits/stdlib.h
>

957 #ifdef 
__LDBL_COMPAT


958 #include 
	~<bits/stdlib-ldbl.h
>

962 #undef 
__need_malloc_and_calloc


964 
__END_DECLS


	@/usr/include/string.h

22 #ifndef 
_STRING_H


23 #define 
	#_STRING_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


30 #define 
	#__need_size_t


	)

31 #define 
	#__need_NULL


	)

32 #include 
	~<stddef.h
>

35 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

36 #define 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 extern void *
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

43 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

46 extern void *
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

47 
__THROW
 
	`__nonnull
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN


54 extern void *
	$memccpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

55 int 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__nonnull
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 extern void *
	$memset
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

65 extern int 
	$memcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

69 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


72 extern void *
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

74 extern const void *
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

77 #ifdef 
__OPTIMIZE__


78 
__extern_always_inline
 void *

79 
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


81 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

84 
__extern_always_inline
 const void *

85 
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


87 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 extern void *
	$memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

95 
__END_NAMESPACE_STD


97 #ifdef 
__USE_GNU


100 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


101 extern "C++" void *
	$rawmemchr
 (void *
__s
, int 
__c
)

102 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

103 extern "C++" const void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

104 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

106 extern void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

107 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

111 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


112 extern "C++" void *
	$memrchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

114 extern "C++" const void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

117 extern void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 extern char *
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

126 
__THROW
 
	`__nonnull
 ((1, 2));

128 extern char *
	$strncpy
 (char *
__restrict
 
__dest
,

129 const char *
__restrict
 
__src
, 
size_t
 
__n
)

130 
__THROW
 
	`__nonnull
 ((1, 2));

133 extern char *
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

134 
__THROW
 
	`__nonnull
 ((1, 2));

136 extern char *
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

137 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

140 extern int 
	$strcmp
 (const char *
__s1
, const char *
__s2
)

141 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

143 extern int 
	$strncmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

147 extern int 
	$strcoll
 (const char *
__s1
, const char *
__s2
)

148 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

150 extern 
size_t
 
	$strxfrm
 (char *
__restrict
 
__dest
,

151 const char *
__restrict
 
__src
, 
size_t
 
__n
)

152 
__THROW
 
	`__nonnull
 ((2));

153 
__END_NAMESPACE_STD


155 #ifdef 
__USE_XOPEN2K8


159 #include 
	~<xlocale.h
>

162 extern int 
	$strcoll_l
 (const char *
__s1
, const char *
__s2
, 
__locale_t
 
__l
)

163 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

165 extern 
size_t
 
	$strxfrm_l
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

166 
__locale_t
 
__l
) 
__THROW
 
	`__nonnull
 ((2, 4));

169 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 \

170 || 
defined
 
__USE_XOPEN2K8


172 extern char *
	$strdup
 (const char *
__s
)

173 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

179 #if 
defined
 
__USE_XOPEN2K8


180 extern char *
	$strndup
 (const char *
__string
, 
size_t
 
__n
)

181 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

184 #if 
defined
 
__USE_GNU
 && defined 
__GNUC__


186 #define 
	#strdupa
(
s
) \

187 (
__extension__
 \

189 const char *
__old
 = (
s
); \

190 
size_t
 
__len
 = 
	`strlen
 (
__old
) + 1; \

191 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
); \

192 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

193 
	}
}))

	)

196 #define 
	#strndupa
(
s
, 
n
) \

197 (
__extension__
 \

199 const char *
__old
 = (
s
); \

200 
size_t
 
__len
 = 
	`strnlen
 (
__old
, (
n
)); \

201 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
 + 1); \

202 
__new
[
__len
] = '\0'; \

203 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


212 extern char *
strchr
 (char *
__s
, int 
__c
)

213 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

214 extern const char *
strchr
 (const char *
__s
, int 
__c
)

215 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

217 #ifdef 
__OPTIMIZE__


218 
__extern_always_inline
 char *

219 
strchr
 (char *
__s
, int 
__c
) 
	g__THROW


221 return 
__builtin_strchr
 (
__s
, 
__c
);

224 
__extern_always_inline
 const char *

225 
strchr
 (const char *
__s
, int 
__c
) 
	g__THROW


227 return 
__builtin_strchr
 (
__s
, 
__c
);

232 extern char *
	$strchr
 (const char *
__s
, int 
__c
)

233 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

236 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


239 extern char *
	`strrchr
 (char *
__s
, int 
__c
)

240 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

241 extern const char *
	`strrchr
 (const char *
__s
, int 
__c
)

242 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

244 #ifdef 
__OPTIMIZE__


245 
__extern_always_inline
 char *

246 
	`strrchr
 (char *
__s
, int 
__c
) 
__THROW


248 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

251 
__extern_always_inline
 const char *

252 
	`strrchr
 (const char *
__s
, int 
__c
) 
__THROW


254 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

257 
	}
}

259 extern char *
	$strrchr
 (const char *
__s
, int 
__c
)

260 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

262 
__END_NAMESPACE_STD


264 #ifdef 
__USE_GNU


267 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


268 extern "C++" char *
	$strchrnul
 (char *
__s
, int 
__c
)

269 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

270 extern "C++" const char *
	$strchrnul
 (const char *
__s
, int 
__c
)

271 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

273 extern char *
	$strchrnul
 (const char *
__s
, int 
__c
)

274 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 extern 
size_t
 
	$strcspn
 (const char *
__s
, const char *
__reject
)

282 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

285 extern 
size_t
 
	$strspn
 (const char *
__s
, const char *
__accept
)

286 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

288 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


291 extern char *
	`strpbrk
 (char *
__s
, const char *
__accept
)

292 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

293 extern const char *
	`strpbrk
 (const char *
__s
, const char *
__accept
)

294 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

296 #ifdef 
__OPTIMIZE__


297 
__extern_always_inline
 char *

298 
	`strpbrk
 (char *
__s
, const char *
__accept
) 
__THROW


300 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

303 
__extern_always_inline
 const char *

304 
	`strpbrk
 (const char *
__s
, const char *
__accept
) 
__THROW


306 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

309 
	}
}

311 extern char *
	$strpbrk
 (const char *
__s
, const char *
__accept
)

312 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

315 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


318 extern char *
	`strstr
 (char *
__haystack
, const char *
__needle
)

319 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

320 extern const char *
	`strstr
 (const char *
__haystack
, const char *
__needle
)

321 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

323 #ifdef 
__OPTIMIZE__


324 
__extern_always_inline
 char *

325 
	`strstr
 (char *
__haystack
, const char *
__needle
) 
__THROW


327 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

330 
__extern_always_inline
 const char *

331 
	`strstr
 (const char *
__haystack
, const char *
__needle
) 
__THROW


333 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

336 
	}
}

338 extern char *
	$strstr
 (const char *
__haystack
, const char *
__needle
)

339 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

344 extern char *
	$strtok
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
)

345 
__THROW
 
	`__nonnull
 ((2));

346 
__END_NAMESPACE_STD


350 extern char *
	$__strtok_r
 (char *
__restrict
 
__s
,

351 const char *
__restrict
 
__delim
,

352 char **
__restrict
 
__save_ptr
)

353 
__THROW
 
	`__nonnull
 ((2, 3));

354 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


355 extern char *
	$strtok_r
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
,

356 char **
__restrict
 
__save_ptr
)

357 
__THROW
 
	`__nonnull
 ((2, 3));

360 #ifdef 
__USE_GNU


362 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


363 extern "C++" char *
	$strcasestr
 (char *
__haystack
, const char *
__needle
)

364 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

365 extern "C++" const char *
	$strcasestr
 (const char *
__haystack
,

366 const char *
__needle
)

367 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

369 extern char *
	$strcasestr
 (const char *
__haystack
, const char *
__needle
)

370 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

374 #ifdef 
__USE_GNU


378 extern void *
	$memmem
 (const void *
__haystack
, 
size_t
 
__haystacklen
,

379 const void *
__needle
, 
size_t
 
__needlelen
)

380 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 3));

384 extern void *
	$__mempcpy
 (void *
__restrict
 
__dest
,

385 const void *
__restrict
 
__src
, 
size_t
 
__n
)

386 
__THROW
 
	`__nonnull
 ((1, 2));

387 extern void *
	$mempcpy
 (void *
__restrict
 
__dest
,

388 const void *
__restrict
 
__src
, 
size_t
 
__n
)

389 
__THROW
 
	`__nonnull
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 extern 
size_t
 
	$strlen
 (const char *
__s
)

396 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 extern 
size_t
 
	$strnlen
 (const char *
__string
, 
size_t
 
__maxlen
)

403 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 extern char *
	$strerror
 (int 
__errnum
) 
__THROW
;

410 
__END_NAMESPACE_STD


411 #if 
defined
 
__USE_XOPEN2K
 || defined 
__USE_MISC


419 #if 
defined
 
__USE_XOPEN2K
 && !defined 
__USE_GNU


422 #ifdef 
__REDIRECT_NTH


423 extern int 
	`__REDIRECT_NTH
 (
strerror_r
,

424 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
),

425 
__xpg_strerror_r
) 
	`__nonnull
 ((2));

427 extern int 
	$__xpg_strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

428 
__THROW
 
	`__nonnull
 ((2));

429 #define 
	#strerror_r
 
__xpg_strerror_r


	)

434 extern char *
	$strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

435 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

439 #ifdef 
__USE_XOPEN2K8


441 extern char *
	$strerror_l
 (int 
__errnum
, 
__locale_t
 
__l
) 
__THROW
;

447 extern void 
	$__bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

449 #ifdef 
__USE_BSD


451 extern void 
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__n
)

452 
__THROW
 
	`__nonnull
 ((1, 2));

455 extern void 
	$bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

458 extern int 
	$bcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

462 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


465 extern char *
	`index
 (char *
__s
, int 
__c
)

466 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

467 extern const char *
	`index
 (const char *
__s
, int 
__c
)

468 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

470 #if 
defined
 
__OPTIMIZE__
 && !defined 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__extern_always_inline
 char *

472 
	`index
 (char *
__s
, int 
__c
) 
__THROW


474 return 
	`__builtin_index
 (
__s
, 
__c
);

477 
__extern_always_inline
 const char *

478 
	`index
 (const char *
__s
, int 
__c
) 
__THROW


480 return 
	`__builtin_index
 (
__s
, 
__c
);

483 
	}
}

485 extern char *
	$index
 (const char *
__s
, int 
__c
)

486 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

490 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


493 extern char *
	`rindex
 (char *
__s
, int 
__c
)

494 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

495 extern const char *
	`rindex
 (const char *
__s
, int 
__c
)

496 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

498 #if 
defined
 
__OPTIMIZE__
 && !defined 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__extern_always_inline
 char *

500 
	`rindex
 (char *
__s
, int 
__c
) 
__THROW


502 return 
	`__builtin_rindex
 (
__s
, 
__c
);

505 
__extern_always_inline
 const char *

506 
	`rindex
 (const char *
__s
, int 
__c
) 
__THROW


508 return 
	`__builtin_rindex
 (
__s
, 
__c
);

511 
	}
}

513 extern char *
	$rindex
 (const char *
__s
, int 
__c
)

514 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

519 extern int 
	$ffs
 (int 
__i
) 
__THROW
 
	`__attribute__
 ((
__const__
));

523 #ifdef 
__USE_GNU


524 extern int 
	$ffsl
 (long int 
__l
) 
__THROW
 
	`__attribute__
 ((
__const__
));

525 #ifdef 
__GNUC__


526 
__extension__
 extern int 
	$ffsll
 (long long int 
__ll
)

527 
__THROW
 
	`__attribute__
 ((
__const__
));

532 extern int 
	$strcasecmp
 (const char *
__s1
, const char *
__s2
)

533 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

536 extern int 
	$strncasecmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

540 #ifdef 
__USE_GNU


543 extern int 
	$strcasecmp_l
 (const char *
__s1
, const char *
__s2
,

544 
__locale_t
 
__loc
)

545 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

547 extern int 
	$strncasecmp_l
 (const char *
__s1
, const char *
__s2
,

548 
size_t
 
__n
, 
__locale_t
 
__loc
)

549 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 extern char *
	$strsep
 (char **
__restrict
 
__stringp
,

556 const char *
__restrict
 
__delim
)

557 
__THROW
 
	`__nonnull
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 extern char *
	$strsignal
 (int 
__sig
) 
__THROW
;

565 extern char *
	$__stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

566 
__THROW
 
	`__nonnull
 ((1, 2));

567 extern char *
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

568 
__THROW
 
	`__nonnull
 ((1, 2));

572 extern char *
	$__stpncpy
 (char *
__restrict
 
__dest
,

573 const char *
__restrict
 
__src
, 
size_t
 
__n
)

574 
__THROW
 
	`__nonnull
 ((1, 2));

575 extern char *
	$stpncpy
 (char *
__restrict
 
__dest
,

576 const char *
__restrict
 
__src
, 
size_t
 
__n
)

577 
__THROW
 
	`__nonnull
 ((1, 2));

580 #ifdef 
__USE_GNU


582 extern int 
	$strverscmp
 (const char *
__s1
, const char *
__s2
)

583 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

586 extern char *
	$strfry
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

589 extern void *
	$memfrob
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

591 #ifndef 
basename


596 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


597 extern "C++" char *
	$basename
 (char *
__filename
)

598 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

599 extern "C++" const char *
	$basename
 (const char *
__filename
)

600 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

602 extern char *
	$basename
 (const char *
__filename
) 
__THROW
 
	`__nonnull
 ((1));

608 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

609 #if 
defined
 
__OPTIMIZE__
 && !defined 
__OPTIMIZE_SIZE__
 \

610 && !
defined
 
__NO_INLINE__
 && !defined 
__cplusplus


630 #include 
	~<bits/string.h
>

633 #include 
	~<bits/string2.h
>

636 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


638 #include 
	~<bits/string3.h
>

642 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #ifndef 
_SYS_IOCTL_H


19 #define 
	#_SYS_IOCTL_H
 1

	)

21 #include 
	~<features.h
>

23 
	g__BEGIN_DECLS


26 #include 
	~<bits/ioctls.h
>

29 #include 
	~<bits/ioctl-types.h
>

36 #include 
	~<sys/ttydefaults.h
>

41 extern int 
	$ioctl
 (int 
__fd
, unsigned long int 
__request
, ...) 
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/stat.h

23 #ifndef 
_SYS_STAT_H


24 #define 
	#_SYS_STAT_H
 1

	)

26 #include 
	~<features.h
>

28 #include 
	~<bits/types.h
>

30 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K
 || defined 
__USE_MISC
 \

31 || 
defined
 
	g__USE_ATFILE


32 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K


33 #define 
	#__need_time_t


	)

35 #if 
defined
 
__USE_MISC
 || defined 
__USE_ATFILE


36 #define 
	#__need_timespec


	)

38 #include 
	~<time.h
>

41 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K


44 #ifndef 
__dev_t_defined


45 typedef 
__dev_t
 
	tdev_t
;

46 #define 
	#__dev_t_defined


	)

49 #ifndef 
__gid_t_defined


50 typedef 
__gid_t
 
	tgid_t
;

51 #define 
	#__gid_t_defined


	)

54 #ifndef 
__ino_t_defined


55 #ifndef 
__USE_FILE_OFFSET64


56 typedef 
__ino_t
 
	tino_t
;

58 typedef 
__ino64_t
 
	tino_t
;

60 #define 
	#__ino_t_defined


	)

63 #ifndef 
__mode_t_defined


64 typedef 
__mode_t
 
	tmode_t
;

65 #define 
	#__mode_t_defined


	)

68 #ifndef 
__nlink_t_defined


69 typedef 
__nlink_t
 
	tnlink_t
;

70 #define 
	#__nlink_t_defined


	)

73 #ifndef 
__off_t_defined


74 #ifndef 
__USE_FILE_OFFSET64


75 typedef 
__off_t
 
	toff_t
;

77 typedef 
__off64_t
 
	toff_t
;

79 #define 
	#__off_t_defined


	)

82 #ifndef 
__uid_t_defined


83 typedef 
__uid_t
 
	tuid_t
;

84 #define 
	#__uid_t_defined


	)

88 #ifdef 
__USE_UNIX98


89 #ifndef 
__blkcnt_t_defined


90 #ifndef 
__USE_FILE_OFFSET64


91 typedef 
__blkcnt_t
 
	tblkcnt_t
;

93 typedef 
__blkcnt64_t
 
	tblkcnt_t
;

95 #define 
	#__blkcnt_t_defined


	)

98 #ifndef 
__blksize_t_defined


99 typedef 
__blksize_t
 
	tblksize_t
;

100 #define 
	#__blksize_t_defined


	)

104 
	g__BEGIN_DECLS


106 #include 
	~<bits/stat.h
>

108 #if 
defined
 
__USE_BSD
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


109 #define 
	#S_IFMT
 
__S_IFMT


	)

110 #define 
	#S_IFDIR
 
__S_IFDIR


	)

111 #define 
	#S_IFCHR
 
__S_IFCHR


	)

112 #define 
	#S_IFBLK
 
__S_IFBLK


	)

113 #define 
	#S_IFREG
 
__S_IFREG


	)

114 #ifdef 
__S_IFIFO


115 #define 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifdef 
__S_IFLNK


118 #define 
	#S_IFLNK
 
__S_IFLNK


	)

120 #if (
defined
 
__USE_BSD
 || defined 
__USE_MISC
 || defined 
__USE_UNIX98
) \

121 && 
defined
 
	g__S_IFSOCK


122 #define 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 #define 
	#__S_ISTYPE
(
mode
, 
mask
) (((mode) & 
__S_IFMT
) == (mask))

	)

130 #define 
	#S_ISDIR
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 #define 
	#S_ISCHR
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 #define 
	#S_ISBLK
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 #define 
	#S_ISREG
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifdef 
__S_IFIFO


135 #define 
	#S_ISFIFO
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifdef 
__S_IFLNK


138 #define 
	#S_ISLNK
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #if 
defined
 
__USE_BSD
 && !defined 
__S_IFLNK


142 #define 
	#S_ISLNK
(
mode
) 0

	)

145 #if (
defined
 
__USE_BSD
 || defined 
__USE_UNIX98
 || defined 
__USE_XOPEN2K
) \

146 && 
defined
 
	g__S_IFSOCK


147 #define 
	#S_ISSOCK
(
mode
) 
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #elif 
defined
 
__USE_XOPEN2K


149 #define 
	#S_ISSOCK
(
mode
) 0

	)

156 #ifdef 
__USE_POSIX199309


157 #define 
	#S_TYPEISMQ
(
buf
) 
	`__S_TYPEISMQ
(buf)

	)

158 #define 
	#S_TYPEISSEM
(
buf
) 
	`__S_TYPEISSEM
(buf)

	)

159 #define 
	#S_TYPEISSHM
(
buf
) 
	`__S_TYPEISSHM
(buf)

	)

165 #define 
	#S_ISUID
 
__S_ISUID


	)

166 #define 
	#S_ISGID
 
__S_ISGID


	)

168 #if 
defined
 
__USE_BSD
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


170 #define 
	#S_ISVTX
 
__S_ISVTX


	)

173 #define 
	#S_IRUSR
 
__S_IREAD


	)

174 #define 
	#S_IWUSR
 
__S_IWRITE


	)

175 #define 
	#S_IXUSR
 
__S_IEXEC


	)

177 #define 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #if 
defined
 
__USE_MISC
 && defined 
__USE_BSD


180 #define 
	#S_IREAD
 
S_IRUSR


	)

181 #define 
	#S_IWRITE
 
S_IWUSR


	)

182 #define 
	#S_IEXEC
 
S_IXUSR


	)

185 #define 
	#S_IRGRP
 (
S_IRUSR
 >> 3)

	)

186 #define 
	#S_IWGRP
 (
S_IWUSR
 >> 3)

	)

187 #define 
	#S_IXGRP
 (
S_IXUSR
 >> 3)

	)

189 #define 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 #define 
	#S_IROTH
 (
S_IRGRP
 >> 3)

	)

192 #define 
	#S_IWOTH
 (
S_IWGRP
 >> 3)

	)

193 #define 
	#S_IXOTH
 (
S_IXGRP
 >> 3)

	)

195 #define 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 #define 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 #define 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 #define 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 #define 
	#S_BLKSIZE
 512

	)

208 #ifndef 
__USE_FILE_OFFSET64


210 extern int 
	$stat
 (const char *
__restrict
 
__file
,

211 struct 
stat
 *
__restrict
 
__buf
) 
__THROW
 
	`__nonnull
 ((1, 2));

215 extern int 
	$fstat
 (int 
__fd
, struct 
stat
 *
__buf
) 
__THROW
 
	`__nonnull
 ((2));

217 #ifdef 
__REDIRECT_NTH


218 extern int 
	`__REDIRECT_NTH
 (
stat
, (const char *
__restrict
 
__file
,

219 struct 
stat
 *
__restrict
 
__buf
), 
stat64
)

220 
	`__nonnull
 ((1, 2));

221 extern int 
	`__REDIRECT_NTH
 (
fstat
, (int 
__fd
, struct 
stat
 *
__buf
), 
fstat64
)

222 
	`__nonnull
 ((2));

224 #define 
	#stat
 
stat64


	)

225 #define 
	#fstat
 
fstat64


	)

228 #ifdef 
__USE_LARGEFILE64


229 extern int 
	$stat64
 (const char *
__restrict
 
__file
,

230 struct 
stat64
 *
__restrict
 
__buf
) 
__THROW
 
	`__nonnull
 ((1, 2));

231 extern int 
	$fstat64
 (int 
__fd
, struct 
stat64
 *
__buf
) 
__THROW
 
	`__nonnull
 ((2));

234 #ifdef 
__USE_ATFILE


238 #ifndef 
__USE_FILE_OFFSET64


239 extern int 
	$fstatat
 (int 
__fd
, const char *
__restrict
 
__file
,

240 struct 
stat
 *
__restrict
 
__buf
, int 
__flag
)

241 
__THROW
 
	`__nonnull
 ((2, 3));

243 #ifdef 
__REDIRECT_NTH


244 extern int 
	`__REDIRECT_NTH
 (
fstatat
, (int 
__fd
, const char *
__restrict
 
__file
,

245 struct 
stat
 *
__restrict
 
__buf
,

246 int 
__flag
),

247 
fstatat64
) 
	`__nonnull
 ((2, 3));

249 #define 
	#fstatat
 
fstatat64


	)

253 #ifdef 
__USE_LARGEFILE64


254 extern int 
	$fstatat64
 (int 
__fd
, const char *
__restrict
 
__file
,

255 struct 
stat64
 *
__restrict
 
__buf
, int 
__flag
)

256 
__THROW
 
	`__nonnull
 ((2, 3));

260 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


261 #ifndef 
__USE_FILE_OFFSET64


264 extern int 
	$lstat
 (const char *
__restrict
 
__file
,

265 struct 
stat
 *
__restrict
 
__buf
) 
__THROW
 
	`__nonnull
 ((1, 2));

267 #ifdef 
__REDIRECT_NTH


268 extern int 
	`__REDIRECT_NTH
 (
lstat
,

269 (const char *
__restrict
 
__file
,

270 struct 
stat
 *
__restrict
 
__buf
), 
lstat64
)

271 
	`__nonnull
 ((1, 2));

273 #define 
	#lstat
 
lstat64


	)

276 #ifdef 
__USE_LARGEFILE64


277 extern int 
	$lstat64
 (const char *
__restrict
 
__file
,

278 struct 
stat64
 *
__restrict
 
__buf
)

279 
__THROW
 
	`__nonnull
 ((1, 2));

285 extern int 
	$chmod
 (const char *
__file
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__nonnull
 ((1));

288 #ifdef 
__USE_BSD


292 extern int 
	$lchmod
 (const char *
__file
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__nonnull
 ((1));

297 #if 
defined
 
__USE_BSD
 || defined 
__USE_POSIX


298 extern int 
	$fchmod
 (int 
__fd
, 
__mode_t
 
__mode
) 
__THROW
;

301 #ifdef 
__USE_ATFILE


304 extern int 
	$fchmodat
 (int 
__fd
, const char *
__file
, 
__mode_t
 
__mode
,

305 int 
__flag
)

306 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

313 extern 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
) 
__THROW
;

315 #ifdef 
__USE_GNU


318 extern 
__mode_t
 
	$getumask
 (void) 
__THROW
;

322 extern int 
	$mkdir
 (const char *
__path
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__nonnull
 ((1));

325 #ifdef 
__USE_ATFILE


329 extern int 
	$mkdirat
 (int 
__fd
, const char *
__path
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__nonnull
 ((2));

336 #if 
defined
 
__USE_MISC
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


337 extern int 
	$mknod
 (const char *
__path
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__nonnull
 ((1));

340 #ifdef 
__USE_ATFILE


344 extern int 
	$mknodat
 (int 
__fd
, const char *
__path
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
) 
__THROW
 
	`__nonnull
 ((2));

351 extern int 
	$mkfifo
 (const char *
__path
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__nonnull
 ((1));

354 #ifdef 
__USE_ATFILE


358 extern int 
	$mkfifoat
 (int 
__fd
, const char *
__path
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__nonnull
 ((2));

362 #ifdef 
__USE_ATFILE


365 extern int 
	$utimensat
 (int 
__fd
, const char *
__path
,

366 const struct 
timespec
 
__times
[2],

367 int 
__flags
)

368 
__THROW
 
	`__nonnull
 ((2));

371 #ifdef 
__USE_XOPEN2K8


373 extern int 
	$futimens
 (int 
__fd
, const struct 
timespec
 
__times
[2]) 
__THROW
;

391 #ifndef 
_STAT_VER


392 #define 
	#_STAT_VER
 0

	)

394 #ifndef 
_MKNOD_VER


395 #define 
	#_MKNOD_VER
 0

	)

399 #ifndef 
__USE_FILE_OFFSET64


400 extern int 
	$__fxstat
 (int 
__ver
, int 
__fildes
, struct 
stat
 *
__stat_buf
)

401 
__THROW
 
	`__nonnull
 ((3));

402 extern int 
	$__xstat
 (int 
__ver
, const char *
__filename
,

403 struct 
stat
 *
__stat_buf
) 
__THROW
 
	`__nonnull
 ((2, 3));

404 extern int 
	$__lxstat
 (int 
__ver
, const char *
__filename
,

405 struct 
stat
 *
__stat_buf
) 
__THROW
 
	`__nonnull
 ((2, 3));

406 extern int 
	$__fxstatat
 (int 
__ver
, int 
__fildes
, const char *
__filename
,

407 struct 
stat
 *
__stat_buf
, int 
__flag
)

408 
__THROW
 
	`__nonnull
 ((3, 4));

410 #ifdef 
__REDIRECT_NTH


411 extern int 
	`__REDIRECT_NTH
 (
__fxstat
, (int 
__ver
, int 
__fildes
,

412 struct 
stat
 *
__stat_buf
), 
__fxstat64
)

413 
	`__nonnull
 ((3));

414 extern int 
	`__REDIRECT_NTH
 (
__xstat
, (int 
__ver
, const char *
__filename
,

415 struct 
stat
 *
__stat_buf
), 
__xstat64
)

416 
	`__nonnull
 ((2, 3));

417 extern int 
	`__REDIRECT_NTH
 (
__lxstat
, (int 
__ver
, const char *
__filename
,

418 struct 
stat
 *
__stat_buf
), 
__lxstat64
)

419 
	`__nonnull
 ((2, 3));

420 extern int 
	`__REDIRECT_NTH
 (
__fxstatat
, (int 
__ver
, int 
__fildes
,

421 const char *
__filename
,

422 struct 
stat
 *
__stat_buf
, int 
__flag
),

423 
__fxstatat64
) 
	`__nonnull
 ((3, 4));

426 #define 
	#__fxstat
 
__fxstat64


	)

427 #define 
	#__xstat
 
__xstat64


	)

428 #define 
	#__lxstat
 
__lxstat64


	)

432 #ifdef 
__USE_LARGEFILE64


433 extern int 
	$__fxstat64
 (int 
__ver
, int 
__fildes
, struct 
stat64
 *
__stat_buf
)

434 
__THROW
 
	`__nonnull
 ((3));

435 extern int 
	$__xstat64
 (int 
__ver
, const char *
__filename
,

436 struct 
stat64
 *
__stat_buf
) 
__THROW
 
	`__nonnull
 ((2, 3));

437 extern int 
	$__lxstat64
 (int 
__ver
, const char *
__filename
,

438 struct 
stat64
 *
__stat_buf
) 
__THROW
 
	`__nonnull
 ((2, 3));

439 extern int 
	$__fxstatat64
 (int 
__ver
, int 
__fildes
, const char *
__filename
,

440 struct 
stat64
 *
__stat_buf
, int 
__flag
)

441 
__THROW
 
	`__nonnull
 ((3, 4));

443 extern int 
	$__xmknod
 (int 
__ver
, const char *
__path
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
) 
__THROW
 
	`__nonnull
 ((2, 4));

446 extern int 
	$__xmknodat
 (int 
__ver
, int 
__fd
, const char *
__path
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__nonnull
 ((3, 5));

450 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2 && defined 
__USE_EXTERN_INLINES


453 
__extern_inline
 int

454 
	`__NTH
 (
	$stat
 (const char *
__path
, struct 
stat
 *
__statbuf
))

456 return 
	`__xstat
 (
_STAT_VER
, 
__path
, 
__statbuf
);

457 
	}
}

459 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


460 
__extern_inline
 int

461 
__NTH
 (
	$lstat
 (const char *
__path
, struct 
stat
 *
__statbuf
))

463 return 
	`__lxstat
 (
_STAT_VER
, 
__path
, 
__statbuf
);

464 
	}
}

467 
__extern_inline
 int

468 
__NTH
 (
	$fstat
 (int 
__fd
, struct 
stat
 *
__statbuf
))

470 return 
	`__fxstat
 (
_STAT_VER
, 
__fd
, 
__statbuf
);

471 
	}
}

473 #ifdef 
__USE_ATFILE


474 
__extern_inline
 int

475 
__NTH
 (
	$fstatat
 (int 
__fd
, const char *
__filename
, struct 
stat
 *
__statbuf
,

476 int 
__flag
))

478 return 
	`__fxstatat
 (
_STAT_VER
, 
__fd
, 
__filename
, 
__statbuf
, 
__flag
);

479 
	}
}

482 #if 
defined
 
__USE_MISC
 || defined 
__USE_BSD


483 
__extern_inline
 int

484 
__NTH
 (
	$mknod
 (const char *
__path
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486 return 
	`__xmknod
 (
_MKNOD_VER
, 
__path
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifdef 
__USE_ATFILE


491 
__extern_inline
 int

492 
__NTH
 (
	$mknodat
 (int 
__fd
, const char *
__path
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495 return 
	`__xmknodat
 (
_MKNOD_VER
, 
__fd
, 
__path
, 
__mode
, &
__dev
);

496 
	}
}

499 #if 
defined
 
__USE_LARGEFILE64
 \

500 && (! 
defined
 
	g__USE_FILE_OFFSET64
 \

501 || (
defined
 
	g__REDIRECT_NTH
 && defined 
	g__OPTIMIZE__
))

502 
__extern_inline
 int

503 
__NTH
 (
	$stat64
 (const char *
__path
, struct 
stat64
 *
__statbuf
))

505 return 
	`__xstat64
 (
_STAT_VER
, 
__path
, 
__statbuf
);

506 
	}
}

508 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


509 
__extern_inline
 int

510 
__NTH
 (
	$lstat64
 (const char *
__path
, struct 
stat64
 *
__statbuf
))

512 return 
	`__lxstat64
 (
_STAT_VER
, 
__path
, 
__statbuf
);

513 
	}
}

516 
__extern_inline
 int

517 
__NTH
 (
	$fstat64
 (int 
__fd
, struct 
stat64
 *
__statbuf
))

519 return 
	`__fxstat64
 (
_STAT_VER
, 
__fd
, 
__statbuf
);

520 
	}
}

522 #ifdef 
__USE_ATFILE


523 
__extern_inline
 int

524 
__NTH
 (
	$fstatat64
 (int 
__fd
, const char *
__filename
, struct 
stat64
 *
__statbuf
,

525 int 
__flag
))

527 return 
	`__fxstatat64
 (
_STAT_VER
, 
__fd
, 
__filename
, 
__statbuf
, 
__flag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #ifndef 
_SYS_TYPES_H


23 #define 
	#_SYS_TYPES_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


29 #include 
	~<bits/types.h
>

31 #ifdef 
__USE_BSD


32 #ifndef 
__u_char_defined


33 typedef 
__u_char
 
	tu_char
;

34 typedef 
__u_short
 
	tu_short
;

35 typedef 
__u_int
 
	tu_int
;

36 typedef 
__u_long
 
	tu_long
;

37 typedef 
__quad_t
 
	tquad_t
;

38 typedef 
__u_quad_t
 
	tu_quad_t
;

39 typedef 
__fsid_t
 
	tfsid_t
;

40 #define 
	#__u_char_defined


	)

44 typedef 
__loff_t
 
	tloff_t
;

46 #ifndef 
__ino_t_defined


47 #ifndef 
__USE_FILE_OFFSET64


48 typedef 
__ino_t
 
	tino_t
;

50 typedef 
__ino64_t
 
	tino_t
;

52 #define 
	#__ino_t_defined


	)

54 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__ino64_t_defined


55 typedef 
__ino64_t
 
	tino64_t
;

56 #define 
	#__ino64_t_defined


	)

59 #ifndef 
__dev_t_defined


60 typedef 
__dev_t
 
	tdev_t
;

61 #define 
	#__dev_t_defined


	)

64 #ifndef 
__gid_t_defined


65 typedef 
__gid_t
 
	tgid_t
;

66 #define 
	#__gid_t_defined


	)

69 #ifndef 
__mode_t_defined


70 typedef 
__mode_t
 
	tmode_t
;

71 #define 
	#__mode_t_defined


	)

74 #ifndef 
__nlink_t_defined


75 typedef 
__nlink_t
 
	tnlink_t
;

76 #define 
	#__nlink_t_defined


	)

79 #ifndef 
__uid_t_defined


80 typedef 
__uid_t
 
	tuid_t
;

81 #define 
	#__uid_t_defined


	)

84 #ifndef 
__off_t_defined


85 #ifndef 
__USE_FILE_OFFSET64


86 typedef 
__off_t
 
	toff_t
;

88 typedef 
__off64_t
 
	toff_t
;

90 #define 
	#__off_t_defined


	)

92 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


93 typedef 
__off64_t
 
	toff64_t
;

94 #define 
	#__off64_t_defined


	)

97 #ifndef 
__pid_t_defined


98 typedef 
__pid_t
 
	tpid_t
;

99 #define 
	#__pid_t_defined


	)

102 #if (
defined
 
__USE_SVID
 || defined 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) \

103 && !
defined
 
__id_t_defined


104 typedef 
__id_t
 
	tid_t
;

105 #define 
	#__id_t_defined


	)

108 #ifndef 
__ssize_t_defined


109 typedef 
__ssize_t
 
	tssize_t
;

110 #define 
	#__ssize_t_defined


	)

113 #ifdef 
__USE_BSD


114 #ifndef 
__daddr_t_defined


115 typedef 
__daddr_t
 
	tdaddr_t
;

116 typedef 
__caddr_t
 
	tcaddr_t
;

117 #define 
	#__daddr_t_defined


	)

121 #if (
defined
 
__USE_SVID
 || defined 
__USE_XOPEN
) && !defined 
__key_t_defined


122 typedef 
__key_t
 
	tkey_t
;

123 #define 
	#__key_t_defined


	)

126 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


127 #define 
	#__need_clock_t


	)

129 #define 
	#__need_time_t


	)

130 #define 
	#__need_timer_t


	)

131 #define 
	#__need_clockid_t


	)

132 #include 
	~<time.h
>

134 #ifdef 
__USE_XOPEN


135 #ifndef 
__useconds_t_defined


136 typedef 
__useconds_t
 
	tuseconds_t
;

137 #define 
	#__useconds_t_defined


	)

139 #ifndef 
__suseconds_t_defined


140 typedef 
__suseconds_t
 
	tsuseconds_t
;

141 #define 
	#__suseconds_t_defined


	)

145 #define 
	#__need_size_t


	)

146 #include 
	~<stddef.h
>

148 #ifdef 
__USE_MISC


150 typedef unsigned long int 
	tulong
;

151 typedef unsigned short int 
	tushort
;

152 typedef unsigned int 
	tuint
;

157 #if !
__GNUC_PREREQ
 (2, 7)

160 #ifndef 
__int8_t_defined


161 #define 
	#__int8_t_defined


	)

162 typedef char 
	tint8_t
;

163 typedef short int 
	tint16_t
;

164 typedef int 
	tint32_t
;

165 #if 
__WORDSIZE
 == 64

166 typedef long int 
	tint64_t
;

167 #elif 
__GLIBC_HAVE_LONG_LONG


168 
__extension__
 typedef long long int 
	tint64_t
;

173 typedef unsigned char 
	tu_int8_t
;

174 typedef unsigned short int 
	tu_int16_t
;

175 typedef unsigned int 
	tu_int32_t
;

176 #if 
__WORDSIZE
 == 64

177 typedef unsigned long int 
	tu_int64_t
;

178 #elif 
__GLIBC_HAVE_LONG_LONG


179 
__extension__
 typedef unsigned long long int 
	tu_int64_t
;

182 typedef int 
	tregister_t
;

187 #define 
	#__intN_t
(
N
, 
MODE
) \

188 typedef int int##
	tN
##
	t_t
 
	t__attribute__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #define 
	t__u_intN_t
(
	tN
, 
	tMODE
) \

190 typedef unsigned int 
	tu_int
##
	tN
##
	t_t
 
	t__attribute__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #ifndef 
	t__int8_t_defined


193 #define 
	t__int8_t_defined


	)

194 
	t__intN_t
 (8, 
	t__QI__
);

195 
__intN_t
 (16, 
__HI__
);

196 
__intN_t
 (32, 
__SI__
);

197 
__intN_t
 (64, 
__DI__
);

200 
__u_intN_t
 (8, 
__QI__
);

201 
__u_intN_t
 (16, 
__HI__
);

202 
__u_intN_t
 (32, 
__SI__
);

203 
__u_intN_t
 (64, 
__DI__
);

205 typedef int 
	tregister_t
 
	t__attribute__
 ((
	t__mode__
 (
	t__word__
)));

211 #define 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 #include 
	~<endian.h
>

219 #include 
	~<sys/select.h
>

222 #include 
	~<sys/sysmacros.h
>

226 #if (
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8
) \

227 && !
defined
 
__blksize_t_defined


228 typedef 
__blksize_t
 
	tblksize_t
;

229 #define 
	#__blksize_t_defined


	)

233 #ifndef 
__USE_FILE_OFFSET64


234 #ifndef 
__blkcnt_t_defined


235 typedef 
__blkcnt_t
 
	tblkcnt_t
;

236 #define 
	#__blkcnt_t_defined


	)

238 #ifndef 
__fsblkcnt_t_defined


239 typedef 
__fsblkcnt_t
 
	tfsblkcnt_t
;

240 #define 
	#__fsblkcnt_t_defined


	)

242 #ifndef 
__fsfilcnt_t_defined


243 typedef 
__fsfilcnt_t
 
	tfsfilcnt_t
;

244 #define 
	#__fsfilcnt_t_defined


	)

247 #ifndef 
__blkcnt_t_defined


248 typedef 
__blkcnt64_t
 
	tblkcnt_t
;

249 #define 
	#__blkcnt_t_defined


	)

251 #ifndef 
__fsblkcnt_t_defined


252 typedef 
__fsblkcnt64_t
 
	tfsblkcnt_t
;

253 #define 
	#__fsblkcnt_t_defined


	)

255 #ifndef 
__fsfilcnt_t_defined


256 typedef 
__fsfilcnt64_t
 
	tfsfilcnt_t
;

257 #define 
	#__fsfilcnt_t_defined


	)

261 #ifdef 
__USE_LARGEFILE64


262 typedef 
__blkcnt64_t
 
	tblkcnt64_t
;

263 typedef 
__fsblkcnt64_t
 
	tfsblkcnt64_t
;

264 typedef 
__fsfilcnt64_t
 
	tfsfilcnt64_t
;

269 #if 
defined
 
__USE_POSIX199506
 || defined 
__USE_UNIX98


270 #include 
	~<bits/pthreadtypes.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

23 #ifndef 
_TERMIOS_H


24 #define 
	#_TERMIOS_H
 1

	)

26 #include 
	~<features.h
>

27 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


29 #include 
	~<bits/types.h
>

30 #ifndef 
__pid_t_defined


31 typedef 
__pid_t
 
	tpid_t
;

32 #define 
	#__pid_t_defined


	)

36 
	g__BEGIN_DECLS


40 #include 
	~<bits/termios.h
>

42 #ifdef 
__USE_BSD


45 #define 
	#CCEQ
(
val
, 
c
) ((c) == (val) && (val) != 
_POSIX_VDISABLE
)

	)

49 extern 
speed_t
 
	$cfgetospeed
 (const struct 
termios
 *
__termios_p
) 
__THROW
;

52 extern 
speed_t
 
	$cfgetispeed
 (const struct 
termios
 *
__termios_p
) 
__THROW
;

55 extern int 
	$cfsetospeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

58 extern int 
	$cfsetispeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

60 #ifdef 
__USE_BSD


62 extern int 
	$cfsetspeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

67 extern int 
	$tcgetattr
 (int 
__fd
, struct 
termios
 *
__termios_p
) 
__THROW
;

71 extern int 
	$tcsetattr
 (int 
__fd
, int 
__optional_actions
,

72 const struct 
termios
 *
__termios_p
) 
__THROW
;

75 #ifdef 
__USE_BSD


77 extern void 
	$cfmakeraw
 (struct 
termios
 *
__termios_p
) 
__THROW
;

81 extern int 
	$tcsendbreak
 (int 
__fd
, int 
__duration
) 
__THROW
;

87 extern int 
	`tcdrain
 (int 
__fd
);

91 extern int 
	$tcflush
 (int 
__fd
, int 
__queue_selector
) 
__THROW
;

95 extern int 
	$tcflow
 (int 
__fd
, int 
__action
) 
__THROW
;

98 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


100 extern 
__pid_t
 
	$tcgetsid
 (int 
__fd
) 
__THROW
;

104 #ifdef 
__USE_BSD


105 #include 
	~<sys/ttydefaults.h
>

108 
__END_DECLS


	@/usr/include/unistd.h

22 #ifndef 
_UNISTD_H


23 #define 
	#_UNISTD_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


32 #ifdef 
__USE_XOPEN2K8


34 #define 
	#_POSIX_VERSION
 200809L

	)

35 #elif 
defined
 
__USE_XOPEN2K


37 #define 
	#_POSIX_VERSION
 200112L

	)

38 #elif 
defined
 
__USE_POSIX199506


40 #define 
	#_POSIX_VERSION
 199506L

	)

41 #elif 
defined
 
__USE_POSIX199309


43 #define 
	#_POSIX_VERSION
 199309L

	)

46 #define 
	#_POSIX_VERSION
 199009L

	)

52 #ifdef 
__USE_XOPEN2K8


53 #define 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #elif 
defined
 
__USE_XOPEN2K


57 #define 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #elif 
defined
 
__USE_POSIX199506


60 #define 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 #define 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 #define 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 #define 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 #define 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 #define 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 #define 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifdef 
__USE_XOPEN2K8


87 #define 
	#_XOPEN_VERSION
 700

	)

88 #elif 
defined
 
__USE_XOPEN2K


89 #define 
	#_XOPEN_VERSION
 600

	)

90 #elif 
defined
 
__USE_UNIX98


91 #define 
	#_XOPEN_VERSION
 500

	)

93 #define 
	#_XOPEN_VERSION
 4

	)

97 #define 
	#_XOPEN_XCU_VERSION
 4

	)

100 #define 
	#_XOPEN_XPG2
 1

	)

101 #define 
	#_XOPEN_XPG3
 1

	)

102 #define 
	#_XOPEN_XPG4
 1

	)

105 #define 
	#_XOPEN_UNIX
 1

	)

108 #define 
	#_XOPEN_CRYPT
 1

	)

112 #define 
	#_XOPEN_ENH_I18N
 1

	)

115 #define 
	#_XOPEN_LEGACY
 1

	)

202 #include 
	~<bits/posix_opt.h
>

205 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


206 #include 
	~<bits/environments.h
>

210 #define 
	#STDIN_FILENO
 0

	)

211 #define 
	#STDOUT_FILENO
 1

	)

212 #define 
	#STDERR_FILENO
 2

	)

217 #include 
	~<bits/types.h
>

219 #ifndef 
__ssize_t_defined


220 typedef 
__ssize_t
 
	tssize_t
;

221 #define 
	#__ssize_t_defined


	)

224 #define 
	#__need_size_t


	)

225 #define 
	#__need_NULL


	)

226 #include 
	~<stddef.h
>

228 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K


231 #ifndef 
__gid_t_defined


232 typedef 
__gid_t
 
	tgid_t
;

233 #define 
	#__gid_t_defined


	)

236 #ifndef 
__uid_t_defined


237 typedef 
__uid_t
 
	tuid_t
;

238 #define 
	#__uid_t_defined


	)

241 #ifndef 
__off_t_defined


242 #ifndef 
__USE_FILE_OFFSET64


243 typedef 
__off_t
 
	toff_t
;

245 typedef 
__off64_t
 
	toff_t
;

247 #define 
	#__off_t_defined


	)

249 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


250 typedef 
__off64_t
 
	toff64_t
;

251 #define 
	#__off64_t_defined


	)

254 #ifndef 
__useconds_t_defined


255 typedef 
__useconds_t
 
	tuseconds_t
;

256 #define 
	#__useconds_t_defined


	)

259 #ifndef 
__pid_t_defined


260 typedef 
__pid_t
 
	tpid_t
;

261 #define 
	#__pid_t_defined


	)

265 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


266 #ifndef 
__intptr_t_defined


267 typedef 
__intptr_t
 
	tintptr_t
;

268 #define 
	#__intptr_t_defined


	)

272 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN


273 #ifndef 
__socklen_t_defined


274 typedef 
__socklen_t
 
	tsocklen_t
;

275 #define 
	#__socklen_t_defined


	)

281 #define 
	#R_OK
 4

	)

282 #define 
	#W_OK
 2

	)

283 #define 
	#X_OK
 1

	)

284 #define 
	#F_OK
 0

	)

287 extern int 
	$access
 (const char *
__name
, int 
__type
) 
__THROW
 
	`__nonnull
 ((1));

289 #ifdef 
__USE_GNU


292 extern int 
	$euidaccess
 (const char *
__name
, int 
__type
)

293 
__THROW
 
	`__nonnull
 ((1));

296 extern int 
	$eaccess
 (const char *
__name
, int 
__type
)

297 
__THROW
 
	`__nonnull
 ((1));

300 #ifdef 
__USE_ATFILE


304 extern int 
	$faccessat
 (int 
__fd
, const char *
__file
, int 
__type
, int 
__flag
)

305 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

310 #ifndef 
_STDIO_H


311 #define 
	#SEEK_SET
 0

	)

312 #define 
	#SEEK_CUR
 1

	)

313 #define 
	#SEEK_END
 2

	)

314 #ifdef 
__USE_GNU


315 #define 
	#SEEK_DATA
 3

	)

316 #define 
	#SEEK_HOLE
 4

	)

320 #if 
defined
 
__USE_BSD
 && !defined 
L_SET


322 #define 
	#L_SET
 
SEEK_SET


	)

323 #define 
	#L_INCR
 
SEEK_CUR


	)

324 #define 
	#L_XTND
 
SEEK_END


	)

333 #ifndef 
__USE_FILE_OFFSET64


334 extern 
__off_t
 
	$lseek
 (int 
__fd
, 
__off_t
 
__offset
, int 
__whence
) 
__THROW
;

336 #ifdef 
__REDIRECT_NTH


337 extern 
__off64_t
 
	`__REDIRECT_NTH
 (
lseek
,

338 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
),

339 
lseek64
);

341 #define 
	#lseek
 
lseek64


	)

344 #ifdef 
__USE_LARGEFILE64


345 extern 
__off64_t
 
	$lseek64
 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
)

346 
__THROW
;

353 extern int 
	`close
 (int 
__fd
);

360 extern 
ssize_t
 
	$read
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
) 
__wur
;

366 extern 
ssize_t
 
	$write
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
) 
__wur
;

368 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


369 #ifndef 
__USE_FILE_OFFSET64


376 extern 
ssize_t
 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

377 
__off_t
 
__offset
) 
__wur
;

384 extern 
ssize_t
 
	$pwrite
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__offset
) 
__wur
;

387 #ifdef 
__REDIRECT


388 extern 
ssize_t
 
	`__REDIRECT
 (
pread
, (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

389 
__off64_t
 
__offset
),

390 
pread64
) 
__wur
;

391 extern 
ssize_t
 
	`__REDIRECT
 (
pwrite
, (int 
__fd
, const void *
__buf
,

392 
size_t
 
__nbytes
, 
__off64_t
 
__offset
),

393 
pwrite64
) 
__wur
;

395 #define 
	#pread
 
pread64


	)

396 #define 
	#pwrite
 
pwrite64


	)

400 #ifdef 
__USE_LARGEFILE64


404 extern 
ssize_t
 
	$pread64
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

405 
__off64_t
 
__offset
) 
__wur
;

408 extern 
ssize_t
 
	$pwrite64
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__offset
) 
__wur
;

417 extern int 
	$pipe
 (int 
__pipedes
[2]) 
__THROW
 
__wur
;

419 #ifdef 
__USE_GNU


422 extern int 
	$pipe2
 (int 
__pipedes
[2], int 
__flags
) 
__THROW
 
__wur
;

432 extern unsigned int 
	$alarm
 (unsigned int 
__seconds
) 
__THROW
;

444 extern unsigned int 
	`sleep
 (unsigned int 
__seconds
);

446 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

447 || 
defined
 
__USE_BSD


452 extern 
__useconds_t
 
	$ualarm
 (
__useconds_t
 
__value
, __useconds_t 
__interval
)

453 
__THROW
;

460 extern int 
	`usleep
 (
__useconds_t
 
__useconds
);

469 extern int 
	`pause
 (void);

473 extern int 
	$chown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

476 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


478 extern int 
	$fchown
 (int 
__fd
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
) 
__THROW
 
__wur
;

483 extern int 
	$lchown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

488 #ifdef 
__USE_ATFILE


491 extern int 
	$fchownat
 (int 
__fd
, const char *
__file
, 
__uid_t
 
__owner
,

492 
__gid_t
 
__group
, int 
__flag
)

493 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

497 extern int 
	$chdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

499 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


501 extern int 
	$fchdir
 (int 
__fd
) 
__THROW
 
__wur
;

511 extern char *
	$getcwd
 (char *
__buf
, 
size_t
 
__size
) 
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 extern char *
	$get_current_dir_name
 (void) 
__THROW
;

520 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

521 || 
defined
 
__USE_BSD


525 extern char *
	$getwd
 (char *
__buf
)

526 
__THROW
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
 
__wur
;

531 extern int 
	$dup
 (int 
__fd
) 
__THROW
 
__wur
;

534 extern int 
	$dup2
 (int 
__fd
, int 
__fd2
) 
__THROW
;

536 #ifdef 
__USE_GNU


539 extern int 
	$dup3
 (int 
__fd
, int 
__fd2
, int 
__flags
) 
__THROW
;

543 extern char **
__environ
;

544 #ifdef 
__USE_GNU


545 extern char **
environ
;

551 extern int 
	$execve
 (const char *
__path
, char *const 
__argv
[],

552 char *const 
__envp
[]) 
__THROW
 
	`__nonnull
 ((1, 2));

554 #ifdef 
__USE_XOPEN2K8


557 extern int 
	$fexecve
 (int 
__fd
, char *const 
__argv
[], char *const 
__envp
[])

558 
__THROW
 
	`__nonnull
 ((2));

563 extern int 
	$execv
 (const char *
__path
, char *const 
__argv
[])

564 
__THROW
 
	`__nonnull
 ((1, 2));

568 extern int 
	$execle
 (const char *
__path
, const char *
__arg
, ...)

569 
__THROW
 
	`__nonnull
 ((1, 2));

573 extern int 
	$execl
 (const char *
__path
, const char *
__arg
, ...)

574 
__THROW
 
	`__nonnull
 ((1, 2));

578 extern int 
	$execvp
 (const char *
__file
, char *const 
__argv
[])

579 
__THROW
 
	`__nonnull
 ((1, 2));

584 extern int 
	$execlp
 (const char *
__file
, const char *
__arg
, ...)

585 
__THROW
 
	`__nonnull
 ((1, 2));

587 #ifdef 
__USE_GNU


590 extern int 
	$execvpe
 (const char *
__file
, char *const 
__argv
[],

591 char *const 
__envp
[])

592 
__THROW
 
	`__nonnull
 ((1, 2));

596 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


598 extern int 
	$nice
 (int 
__inc
) 
__THROW
 
__wur
;

603 extern void 
	$_exit
 (int 
__status
) 
	`__attribute__
 ((
__noreturn__
));

609 #include 
	~<bits/confname.h
>

612 extern long int 
	$pathconf
 (const char *
__path
, int 
__name
)

613 
__THROW
 
	`__nonnull
 ((1));

616 extern long int 
	$fpathconf
 (int 
__fd
, int 
__name
) 
__THROW
;

619 extern long int 
	$sysconf
 (int 
__name
) 
__THROW
;

621 #ifdef 
__USE_POSIX2


623 extern 
size_t
 
	$confstr
 (int 
__name
, char *
__buf
, 
size_t
 
__len
) 
__THROW
;

628 extern 
__pid_t
 
	$getpid
 (void) 
__THROW
;

631 extern 
__pid_t
 
	$getppid
 (void) 
__THROW
;

635 #ifndef 
__FAVOR_BSD


636 extern 
__pid_t
 
	$getpgrp
 (void) 
__THROW
;

638 #ifdef 
__REDIRECT_NTH


639 extern 
__pid_t
 
	`__REDIRECT_NTH
 (
getpgrp
, (__pid_t 
__pid
), 
__getpgid
);

641 #define 
	#getpgrp
 
__getpgid


	)

646 extern 
__pid_t
 
	$__getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

647 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


648 extern 
__pid_t
 
	$getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

655 extern int 
	$setpgid
 (
__pid_t
 
__pid
, __pid_t 
__pgid
) 
__THROW
;

657 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


668 #ifndef 
__FAVOR_BSD


672 extern int 
	$setpgrp
 (void) 
__THROW
;

677 #ifdef 
__REDIRECT_NTH


678 extern int 
	`__REDIRECT_NTH
 (
setpgrp
, (
__pid_t
 
__pid
, __pid_t 
__pgrp
), 
setpgid
);

680 #define 
	#setpgrp
 
setpgid


	)

689 extern 
__pid_t
 
	$setsid
 (void) 
__THROW
;

691 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


693 extern 
__pid_t
 
	$getsid
 (
__pid_t
 
__pid
) 
__THROW
;

697 extern 
__uid_t
 
	$getuid
 (void) 
__THROW
;

700 extern 
__uid_t
 
	$geteuid
 (void) 
__THROW
;

703 extern 
__gid_t
 
	$getgid
 (void) 
__THROW
;

706 extern 
__gid_t
 
	$getegid
 (void) 
__THROW
;

711 extern int 
	$getgroups
 (int 
__size
, 
__gid_t
 
__list
[]) 
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 extern int 
	$group_member
 (
__gid_t
 
__gid
) 
__THROW
;

722 extern int 
	$setuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

724 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


727 extern int 
	$setreuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
) 
__THROW
 
__wur
;

730 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


732 extern int 
	$seteuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

739 extern int 
	$setgid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

741 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


744 extern int 
	$setregid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
) 
__THROW
 
__wur
;

747 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


749 extern int 
	$setegid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

752 #ifdef 
__USE_GNU


755 extern int 
	$getresuid
 (
__uid_t
 *
__ruid
, __uid_t *
__euid
, __uid_t *
__suid
)

756 
__THROW
;

760 extern int 
	$getresgid
 (
__gid_t
 *
__rgid
, __gid_t *
__egid
, __gid_t *
__sgid
)

761 
__THROW
;

765 extern int 
	$setresuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
, __uid_t 
__suid
)

766 
__THROW
 
__wur
;

770 extern int 
	$setresgid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
, __gid_t 
__sgid
)

771 
__THROW
 
__wur
;

778 extern 
__pid_t
 
	$fork
 (void) 
__THROWNL
;

780 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

781 || 
defined
 
__USE_BSD


786 extern 
__pid_t
 
	$vfork
 (void) 
__THROW
;

792 extern char *
	$ttyname
 (int 
__fd
) 
__THROW
;

796 extern int 
	$ttyname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

797 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

801 extern int 
	$isatty
 (int 
__fd
) 
__THROW
;

803 #if 
defined
 
__USE_BSD
 \

804 || (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_UNIX98
)

807 extern int 
	$ttyslot
 (void) 
__THROW
;

812 extern int 
	$link
 (const char *
__from
, const char *
__to
)

813 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

815 #ifdef 
__USE_ATFILE


818 extern int 
	$linkat
 (int 
__fromfd
, const char *
__from
, int 
__tofd
,

819 const char *
__to
, int 
__flags
)

820 
__THROW
 
	`__nonnull
 ((2, 4)) 
__wur
;

823 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


825 extern int 
	$symlink
 (const char *
__from
, const char *
__to
)

826 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

831 extern 
ssize_t
 
	$readlink
 (const char *
__restrict
 
__path
,

832 char *
__restrict
 
__buf
, 
size_t
 
__len
)

833 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

836 #ifdef 
__USE_ATFILE


838 extern int 
	$symlinkat
 (const char *
__from
, int 
__tofd
,

839 const char *
__to
) 
__THROW
 
	`__nonnull
 ((1, 3)) 
__wur
;

842 extern 
ssize_t
 
	$readlinkat
 (int 
__fd
, const char *
__restrict
 
__path
,

843 char *
__restrict
 
__buf
, 
size_t
 
__len
)

844 
__THROW
 
	`__nonnull
 ((2, 3)) 
__wur
;

848 extern int 
	$unlink
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

850 #ifdef 
__USE_ATFILE


852 extern int 
	$unlinkat
 (int 
__fd
, const char *
__name
, int 
__flag
)

853 
__THROW
 
	`__nonnull
 ((2));

857 extern int 
	$rmdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1));

861 extern 
__pid_t
 
	$tcgetpgrp
 (int 
__fd
) 
__THROW
;

864 extern int 
	$tcsetpgrp
 (int 
__fd
, 
__pid_t
 
__pgrp_id
) 
__THROW
;

871 extern char *
	`getlogin
 (void);

872 #if 
defined
 
__USE_REENTRANT
 || defined 
__USE_POSIX199506


879 extern int 
	$getlogin_r
 (char *
__name
, 
size_t
 
__name_len
) 
	`__nonnull
 ((1));

882 #ifdef 
__USE_BSD


884 extern int 
	$setlogin
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

888 #ifdef 
__USE_POSIX2


892 #define 
	#__need_getopt


	)

893 #include 
	~<getopt.h
>

897 #if 
defined
 
__USE_BSD
 || defined 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


901 extern int 
	$gethostname
 (char *
__name
, 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((1));

905 #if 
defined
 
__USE_BSD
 || (defined 
__USE_XOPEN
 && !defined 
__USE_UNIX98
)

908 extern int 
	$sethostname
 (const char *
__name
, 
size_t
 
__len
)

909 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

913 extern int 
	$sethostid
 (long int 
__id
) 
__THROW
 
__wur
;

919 extern int 
	$getdomainname
 (char *
__name
, 
size_t
 
__len
)

920 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

921 extern int 
	$setdomainname
 (const char *
__name
, 
size_t
 
__len
)

922 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

928 extern int 
	$vhangup
 (void) 
__THROW
;

931 extern int 
	$revoke
 (const char *
__file
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

939 extern int 
	$profil
 (unsigned short int *
__sample_buffer
, 
size_t
 
__size
,

940 
size_t
 
__offset
, unsigned int 
__scale
)

941 
__THROW
 
	`__nonnull
 ((1));

947 extern int 
	$acct
 (const char *
__name
) 
__THROW
;

951 extern char *
	$getusershell
 (void) 
__THROW
;

952 extern void 
	$endusershell
 (void) 
__THROW
;

953 extern void 
	$setusershell
 (void) 
__THROW
;

959 extern int 
	$daemon
 (int 
__nochdir
, int 
__noclose
) 
__THROW
 
__wur
;

963 #if 
defined
 
__USE_BSD
 || (defined 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

966 extern int 
	$chroot
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

970 extern char *
	$getpass
 (const char *
__prompt
) 
	`__nonnull
 ((1));

978 extern int 
	`fsync
 (int 
__fd
);

981 #ifdef 
__USE_GNU


984 extern int 
	$syncfs
 (int 
__fd
) 
__THROW
;

988 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


991 extern long int 
	`gethostid
 (void);

994 extern void 
	$sync
 (void) 
__THROW
;

997 #if 
defined
 
__USE_BSD
 || !defined 
__USE_XOPEN2K


1000 extern int 
	$getpagesize
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

1005 extern int 
	$getdtablesize
 (void) 
__THROW
;

1011 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


1014 #ifndef 
__USE_FILE_OFFSET64


1015 extern int 
	$truncate
 (const char *
__file
, 
__off_t
 
__length
)

1016 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

1018 #ifdef 
__REDIRECT_NTH


1019 extern int 
	`__REDIRECT_NTH
 (
truncate
,

1020 (const char *
__file
, 
__off64_t
 
__length
),

1021 
truncate64
) 
	`__nonnull
 ((1)) 
__wur
;

1023 #define 
	#truncate
 
truncate64


	)

1026 #ifdef 
__USE_LARGEFILE64


1027 extern int 
	$truncate64
 (const char *
__file
, 
__off64_t
 
__length
)

1028 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

1033 #if 
defined
 
__USE_BSD
 || defined 
__USE_POSIX199309
 \

1034 || 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


1037 #ifndef 
__USE_FILE_OFFSET64


1038 extern int 
	$ftruncate
 (int 
__fd
, 
__off_t
 
__length
) 
__THROW
 
__wur
;

1040 #ifdef 
__REDIRECT_NTH


1041 extern int 
	`__REDIRECT_NTH
 (
ftruncate
, (int 
__fd
, 
__off64_t
 
__length
),

1042 
ftruncate64
) 
__wur
;

1044 #define 
	#ftruncate
 
ftruncate64


	)

1047 #ifdef 
__USE_LARGEFILE64


1048 extern int 
	$ftruncate64
 (int 
__fd
, 
__off64_t
 
__length
) 
__THROW
 
__wur
;

1054 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

1055 || 
defined
 
__USE_MISC


1059 extern int 
	$brk
 (void *
__addr
) 
__THROW
 
__wur
;

1065 extern void *
	$sbrk
 (
intptr_t
 
__delta
) 
__THROW
;

1069 #ifdef 
__USE_MISC


1080 extern long int 
	$syscall
 (long int 
__sysno
, ...) 
__THROW
;

1085 #if (
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
) && !defined 
F_LOCK


1097 #define 
	#F_ULOCK
 0

	)

1098 #define 
	#F_LOCK
 1

	)

1099 #define 
	#F_TLOCK
 2

	)

1100 #define 
	#F_TEST
 3

	)

1102 #ifndef 
__USE_FILE_OFFSET64


1103 extern int 
	$lockf
 (int 
__fd
, int 
__cmd
, 
__off_t
 
__len
) 
__wur
;

1105 #ifdef 
__REDIRECT


1106 extern int 
	`__REDIRECT
 (
lockf
, (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
),

1107 
lockf64
) 
__wur
;

1109 #define 
	#lockf
 
lockf64


	)

1112 #ifdef 
__USE_LARGEFILE64


1113 extern int 
	$lockf64
 (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
) 
__wur
;

1118 #ifdef 
__USE_GNU


1123 #define 
	#TEMP_FAILURE_RETRY
(
expression
) \

1124 (
__extension__
 \

1125 ({ long int 
__result
; \

1126 do 
__result
 = (long int) (
expression
); \

1127 while (
__result
 == -1L && 
errno
 == 
EINTR
); \

1128 
__result
; 
	}
}))

	)

1131 #if 
defined
 
__USE_POSIX199309
 || defined 
__USE_UNIX98


1134 extern int 
fdatasync
 (int 
__fildes
);

1140 #ifdef 
__USE_XOPEN


1142 extern char *
	$crypt
 (const char *
__key
, const char *
__salt
)

1143 
__THROW
 
	`__nonnull
 ((1, 2));

1147 extern void 
	$encrypt
 (char *
__block
, int 
__edflag
) 
__THROW
 
	`__nonnull
 ((1));

1154 extern void 
	$swab
 (const void *
__restrict
 
__from
, void *__restrict 
__to
,

1155 
ssize_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

1161 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K


1163 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

1168 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


1169 #include 
	~<bits/unistd.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #ifndef 
_ALLOCA_H


19 #define 
	#_ALLOCA_H
 1

	)

21 #include 
	~<features.h
>

23 #define 
	#__need_size_t


	)

24 #include 
	~<stddef.h
>

26 
	g__BEGIN_DECLS


29 #undef 
alloca


32 extern void *
	$alloca
 (
size_t
 
__size
) 
__THROW
;

34 #ifdef 
__GNUC__


35 #define 
	#alloca
(
size
) 
	`__builtin_alloca
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

20 #ifndef 
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 #define 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 #define 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 #define 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 #define 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 #define 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 #define 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 #define 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 #define 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 #define 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 #define 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 #define 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 #define 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 #define 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 #define 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 #define 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 #define 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 #define 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 #define 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 #define 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 #define 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 #define 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 #define 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 #define 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 #define 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 #define 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 #define 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 #define 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 #define 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 #define 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 #define 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 #define 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 #define 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 #define 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 #define 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 #define 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 #define 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 #define 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 #define 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 #define 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 #define 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 #define 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 #define 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 #define 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 #define 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 #define 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 #define 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 #define 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 #define 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 #define 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 #define 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 #define 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 #define 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 #define 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 #define 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 #define 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 #define 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 #define 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 #define 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 #define 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 #define 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 #define 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 #define 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 #define 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 #define 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 #define 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 #define 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 #define 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 #define 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 #define 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 #define 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 #define 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 #define 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 #define 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 #define 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 #define 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 #define 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 #define 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 #define 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 #define 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 #define 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 #define 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 #define 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 #define 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 #define 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 #define 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 #define 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 #define 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 #define 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 #define 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 #define 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 #define 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 #define 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 #define 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 #define 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 #define 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 #define 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 #define 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 #define 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 #define 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 #define 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 #define 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 #define 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 #define 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 #define 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 #define 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 #define 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 #define 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 #define 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 #define 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 #define 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 #define 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 #define 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 #define 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 #define 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 #define 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 #define 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 #define 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 #define 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 #define 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 #define 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 #define 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 #define 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 #define 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 #define 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 #define 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 #define 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 #define 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 #define 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 #define 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 #define 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 #define 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 #define 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 #define 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 #define 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 #define 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 #define 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 #define 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 #define 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 #define 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 #define 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 #define 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 #define 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 #define 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 #define 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 #define 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 #define 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 #define 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 #define 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 #define 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 #define 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 #define 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 #define 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 #define 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 #define 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 #define 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 #define 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 #define 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 #define 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 #define 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 #define 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 #define 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 #define 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 #define 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 #define 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 #define 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 #define 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 #define 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 #define 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 #define 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 #define 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 #define 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 #define 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 #define 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 #define 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 #define 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 #define 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 #define 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 #define 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 #define 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 #define 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 #define 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 #define 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 #define 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 #define 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 #define 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 #define 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 #define 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 #define 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 #define 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 #define 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 #define 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 #define 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 #define 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 #define 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 #define 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 #define 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 #define 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 #define 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 #define 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 #define 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 #define 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 #define 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 #define 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 #define 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 #define 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 #define 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 #define 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 #define 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 #define 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 #define 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 #define 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 #define 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 #define 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 #define 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 #define 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 #define 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 #define 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 #define 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 #define 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 #define 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 #define 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 #define 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 #define 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 #define 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 #define 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 #define 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 #define 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 #define 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 #define 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 #define 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 #define 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 #define 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 #define 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 #define 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 #define 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 #define 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 #define 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 #define 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 #define 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 #define 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 #define 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 #define 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 #define 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 #define 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 #define 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 #define 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 #define 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 #define 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 #define 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 #define 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 #define 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 #define 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 #define 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 #define 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 #define 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 #define 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 #define 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 #define 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 #define 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 #define 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 #define 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 #define 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 #define 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 #define 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 #define 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 #define 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 #define 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 #define 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 #define 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 #define 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 #define 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 #define 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 #define 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 #define 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 #define 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 #define 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 #define 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 #define 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 #define 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #ifndef 
_UNISTD_H


22 #include 
	~<bits/wordsize.h
>

42 #if 
__WORDSIZE
 == 64

56 #define 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 #define 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 #define 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 #define 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 #define 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 #define 
	#_XBS5_LP64_OFF64
 1

	)

69 #define 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 #define 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 #define 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 #define 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 #define 
	#_XBS5_ILP32_OFF32
 1

	)

74 #define 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 #define 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 #define 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 #define 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 #define 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 #define 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 #define 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifdef 
_ERRNO_H


21 #undef 
EDOM


22 #undef 
EILSEQ


23 #undef 
ERANGE


24 #include 
	~<linux/errno.h
>

27 #define 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #ifndef 
ECANCELED


31 #define 
	#ECANCELED
 125

	)

35 #ifndef 
EOWNERDEAD


36 #define 
	#EOWNERDEAD
 130

	)

37 #define 
	#ENOTRECOVERABLE
 131

	)

40 #ifndef 
ERFKILL


41 #define 
	#ERFKILL
 132

	)

44 #ifndef 
EHWPOISON


45 #define 
	#EHWPOISON
 133

	)

48 #ifndef 
__ASSEMBLER__


50 extern int *
	$__errno_location
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

52 #if !
defined
 
_LIBC
 || defined 
_LIBC_REENTRANT


54 #define 
	#errno
 (*
	`__errno_location
 ())

	)

59 #if !
defined
 
_ERRNO_H
 && defined 
__need_Emath


63 #define 
	#EDOM
 33

	)

64 #define 
	#EILSEQ
 84

	)

65 #define 
	#ERANGE
 34

	)

	@/usr/include/bits/ioctl-types.h

19 #ifndef 
_SYS_IOCTL_H


24 #include 
	~<asm/ioctls.h
>

27 struct 
	swinsize


29 unsigned short int 
	mws_row
;

30 unsigned short int 
	mws_col
;

31 unsigned short int 
	mws_xpixel
;

32 unsigned short int 
	mws_ypixel
;

35 #define 
	#NCC
 8

	)

36 struct 
	stermio


38 unsigned short int 
	mc_iflag
;

39 unsigned short int 
	mc_oflag
;

40 unsigned short int 
	mc_cflag
;

41 unsigned short int 
	mc_lflag
;

42 unsigned char 
	mc_line
;

43 unsigned char 
	mc_cc
[
NCC
];

47 #define 
	#TIOCM_LE
 0x001

	)

48 #define 
	#TIOCM_DTR
 0x002

	)

49 #define 
	#TIOCM_RTS
 0x004

	)

50 #define 
	#TIOCM_ST
 0x008

	)

51 #define 
	#TIOCM_SR
 0x010

	)

52 #define 
	#TIOCM_CTS
 0x020

	)

53 #define 
	#TIOCM_CAR
 0x040

	)

54 #define 
	#TIOCM_RNG
 0x080

	)

55 #define 
	#TIOCM_DSR
 0x100

	)

56 #define 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 #define 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 #define 
	#N_TTY
 0

	)

63 #define 
	#N_SLIP
 1

	)

64 #define 
	#N_MOUSE
 2

	)

65 #define 
	#N_PPP
 3

	)

66 #define 
	#N_STRIP
 4

	)

67 #define 
	#N_AX25
 5

	)

68 #define 
	#N_X25
 6

	)

69 #define 
	#N_6PACK
 7

	)

70 #define 
	#N_MASC
 8

	)

71 #define 
	#N_R3964
 9

	)

72 #define 
	#N_PROFIBUS_FDL
 10

	)

73 #define 
	#N_IRDA
 11

	)

74 #define 
	#N_SMSBLOCK
 12

	)

75 #define 
	#N_HDLC
 13

	)

76 #define 
	#N_SYNC_PPP
 14

	)

77 #define 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #ifndef 
_SYS_IOCTL_H


23 #include 
	~<asm/ioctls.h
>

26 #define 
	#SIOCADDRT
 0x890B

	)

27 #define 
	#SIOCDELRT
 0x890C

	)

28 #define 
	#SIOCRTMSG
 0x890D

	)

31 #define 
	#SIOCGIFNAME
 0x8910

	)

32 #define 
	#SIOCSIFLINK
 0x8911

	)

33 #define 
	#SIOCGIFCONF
 0x8912

	)

34 #define 
	#SIOCGIFFLAGS
 0x8913

	)

35 #define 
	#SIOCSIFFLAGS
 0x8914

	)

36 #define 
	#SIOCGIFADDR
 0x8915

	)

37 #define 
	#SIOCSIFADDR
 0x8916

	)

38 #define 
	#SIOCGIFDSTADDR
 0x8917

	)

39 #define 
	#SIOCSIFDSTADDR
 0x8918

	)

40 #define 
	#SIOCGIFBRDADDR
 0x8919

	)

41 #define 
	#SIOCSIFBRDADDR
 0x891a

	)

42 #define 
	#SIOCGIFNETMASK
 0x891b

	)

43 #define 
	#SIOCSIFNETMASK
 0x891c

	)

44 #define 
	#SIOCGIFMETRIC
 0x891d

	)

45 #define 
	#SIOCSIFMETRIC
 0x891e

	)

46 #define 
	#SIOCGIFMEM
 0x891f

	)

47 #define 
	#SIOCSIFMEM
 0x8920

	)

48 #define 
	#SIOCGIFMTU
 0x8921

	)

49 #define 
	#SIOCSIFMTU
 0x8922

	)

50 #define 
	#SIOCSIFNAME
 0x8923

	)

51 #define 
	#SIOCSIFHWADDR
 0x8924

	)

52 #define 
	#SIOCGIFENCAP
 0x8925

	)

53 #define 
	#SIOCSIFENCAP
 0x8926

	)

54 #define 
	#SIOCGIFHWADDR
 0x8927

	)

55 #define 
	#SIOCGIFSLAVE
 0x8929

	)

56 #define 
	#SIOCSIFSLAVE
 0x8930

	)

57 #define 
	#SIOCADDMULTI
 0x8931

	)

58 #define 
	#SIOCDELMULTI
 0x8932

	)

59 #define 
	#SIOCGIFINDEX
 0x8933

	)

60 #define 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 #define 
	#SIOCSIFPFLAGS
 0x8934

	)

62 #define 
	#SIOCGIFPFLAGS
 0x8935

	)

63 #define 
	#SIOCDIFADDR
 0x8936

	)

64 #define 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 #define 
	#SIOCGIFCOUNT
 0x8938

	)

67 #define 
	#SIOCGIFBR
 0x8940

	)

68 #define 
	#SIOCSIFBR
 0x8941

	)

70 #define 
	#SIOCGIFTXQLEN
 0x8942

	)

71 #define 
	#SIOCSIFTXQLEN
 0x8943

	)

76 #define 
	#SIOCDARP
 0x8953

	)

77 #define 
	#SIOCGARP
 0x8954

	)

78 #define 
	#SIOCSARP
 0x8955

	)

81 #define 
	#SIOCDRARP
 0x8960

	)

82 #define 
	#SIOCGRARP
 0x8961

	)

83 #define 
	#SIOCSRARP
 0x8962

	)

87 #define 
	#SIOCGIFMAP
 0x8970

	)

88 #define 
	#SIOCSIFMAP
 0x8971

	)

92 #define 
	#SIOCADDDLCI
 0x8980

	)

93 #define 
	#SIOCDELDLCI
 0x8981

	)

102 #define 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 #define 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/posix_opt.h

19 #ifndef 
_BITS_POSIX_OPT_H


20 #define 
	#_BITS_POSIX_OPT_H
 1

	)

23 #define 
	#_POSIX_JOB_CONTROL
 1

	)

26 #define 
	#_POSIX_SAVED_IDS
 1

	)

29 #define 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 #define 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 #define 
	#_POSIX_FSYNC
 200809L

	)

38 #define 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 #define 
	#_POSIX_MEMLOCK
 200809L

	)

44 #define 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 #define 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 #define 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 #define 
	#_POSIX_VDISABLE
 '\0'

	)

57 #define 
	#_POSIX_NO_TRUNC
 1

	)

60 #define 
	#_XOPEN_REALTIME
 1

	)

63 #define 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 #define 
	#_XOPEN_SHM
 1

	)

69 #define 
	#_POSIX_THREADS
 200809L

	)

72 #define 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 #define 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 #define 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 #define 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 #define 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 #define 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 #define 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifdef 
__USE_XOPEN2K8


93 #define 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 #define 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 #define 
	#_POSIX_SEMAPHORES
 200809L

	)

103 #define 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 #define 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 #define 
	#_POSIX_ASYNC_IO
 1

	)

109 #define 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 #define 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 #define 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 #define 
	#_LFS_LARGEFILE
 1

	)

118 #define 
	#_LFS64_LARGEFILE
 1

	)

119 #define 
	#_LFS64_STDIO
 1

	)

122 #define 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 #define 
	#_POSIX_CPUTIME
 0

	)

128 #define 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 #define 
	#_POSIX_REGEXP
 1

	)

134 #define 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 #define 
	#_POSIX_SHELL
 1

	)

140 #define 
	#_POSIX_TIMEOUTS
 200809L

	)

143 #define 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 #define 
	#_POSIX_SPAWN
 200809L

	)

149 #define 
	#_POSIX_TIMERS
 200809L

	)

152 #define 
	#_POSIX_BARRIERS
 200809L

	)

155 #define 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 #define 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 #define 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 #define 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 #define 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 #define 
	#_POSIX_IPV6
 200809L

	)

173 #define 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 #define 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 #define 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 #define 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 #define 
	#_POSIX_TRACE
 -1

	)

184 #define 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 #define 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 #define 
	#_POSIX_TRACE_LOG
 -1

	)

189 #define 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 #define 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #ifndef 
_BITS_PTHREADTYPES_H


19 #define 
	#_BITS_PTHREADTYPES_H
 1

	)

21 #include 
	~<bits/wordsize.h
>

23 #ifdef 
__x86_64__


24 #if 
__WORDSIZE
 == 64

25 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 typedef unsigned long int 
	tpthread_t
;

63 union 
	upthread_attr_t


65 char 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 long int 
	m__align
;

68 #ifndef 
__have_pthread_attr_t


69 typedef union 
pthread_attr_t
 
	tpthread_attr_t
;

70 #define 
	#__have_pthread_attr_t
 1

	)

74 #ifdef 
__x86_64__


75 typedef struct 
	s__pthread_internal_list


77 struct 
__pthread_internal_list
 *
	m__prev
;

78 struct 
__pthread_internal_list
 *
	m__next
;

79 } 
	t__pthread_list_t
;

81 typedef struct 
	s__pthread_internal_slist


83 struct 
__pthread_internal_slist
 *
	m__next
;

84 } 
	t__pthread_slist_t
;

92 struct 
	s__pthread_mutex_s


94 int 
	m__lock
;

95 unsigned int 
	m__count
;

96 int 
	m__owner
;

97 #ifdef 
__x86_64__


98 unsigned int 
	m__nusers
;

102 int 
	m__kind
;

103 #ifdef 
__x86_64__


104 short 
	m__spins
;

105 short 
	m__elision
;

106 
__pthread_list_t
 
	m__list
;

107 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 #define 
	#__PTHREAD_SPINS
 0, 0

	)

111 unsigned int 
	m__nusers
;

112 
__extension__
 union

116 short 
	m__espins
;

117 short 
	m__elision
;

118 #define 
	#__spins
 
__elision_data
.
__espins


	)

119 #define 
	#__elision
 
__elision_data
.
__elision


	)

120 #define 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__elision_data
;

122 
__pthread_slist_t
 
	m__list
;

125 } 
	m__data
;

126 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 long int 
	m__align
;

128 } 
	tpthread_mutex_t
;

132 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 int 
	m__align
;

134 } 
	tpthread_mutexattr_t
;

143 int 
	m__lock
;

144 unsigned int 
	m__futex
;

145 
__extension__
 unsigned long long int 
	m__total_seq
;

146 
__extension__
 unsigned long long int 
	m__wakeup_seq
;

147 
__extension__
 unsigned long long int 
	m__woken_seq
;

148 void *
	m__mutex
;

149 unsigned int 
	m__nwaiters
;

150 unsigned int 
	m__broadcast_seq
;

151 } 
	m__data
;

152 char 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__extension__
 long long int 
	m__align
;

154 } 
	tpthread_cond_t
;

158 char 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 int 
	m__align
;

160 } 
	tpthread_condattr_t
;

164 typedef unsigned int 
	tpthread_key_t
;

168 typedef int 
	tpthread_once_t
;

171 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


176 #ifdef 
__x86_64__


179 int 
	m__lock
;

180 unsigned int 
	m__nr_readers
;

181 unsigned int 
	m__readers_wakeup
;

182 unsigned int 
	m__writer_wakeup
;

183 unsigned int 
	m__nr_readers_queued
;

184 unsigned int 
	m__nr_writers_queued
;

185 int 
	m__writer
;

186 int 
	m__shared
;

187 unsigned long int 
	m__pad1
;

188 unsigned long int 
	m__pad2
;

191 unsigned int 
	m__flags
;

192 #define 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

193 } 
	m__data
;

197 int 
	m__lock
;

198 unsigned int 
	m__nr_readers
;

199 unsigned int 
	m__readers_wakeup
;

200 unsigned int 
	m__writer_wakeup
;

201 unsigned int 
	m__nr_readers_queued
;

202 unsigned int 
	m__nr_writers_queued
;

205 unsigned char 
	m__flags
;

206 unsigned char 
	m__shared
;

207 unsigned char 
	m__pad1
;

208 unsigned char 
	m__pad2
;

209 int 
	m__writer
;

210 } 
	m__data
;

212 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

213 long int 
	m__align
;

214 } 
	tpthread_rwlock_t
;

218 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

219 long int 
	m__align
;

220 } 
	tpthread_rwlockattr_t
;

224 #ifdef 
__USE_XOPEN2K


226 typedef volatile int 
	tpthread_spinlock_t
;

233 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

234 long int 
	m__align
;

235 } 
	tpthread_barrier_t
;

239 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

240 int 
	m__align
;

241 } 
	tpthread_barrierattr_t
;

245 #ifndef 
__x86_64__


247 #define 
	#__cleanup_fct_attribute
 
	`__attribute__
 ((
	`__regparm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #if !
defined
 
_SYS_STAT_H
 && !defined 
_FCNTL_H


22 #ifndef 
_BITS_STAT_H


23 #define 
	#_BITS_STAT_H
 1

	)

26 #ifndef 
__x86_64__


27 #define 
	#_STAT_VER_LINUX_OLD
 1

	)

28 #define 
	#_STAT_VER_KERNEL
 1

	)

29 #define 
	#_STAT_VER_SVR4
 2

	)

30 #define 
	#_STAT_VER_LINUX
 3

	)

33 #define 
	#_MKNOD_VER_LINUX
 1

	)

34 #define 
	#_MKNOD_VER_SVR4
 2

	)

35 #define 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 #define 
	#_STAT_VER_KERNEL
 0

	)

38 #define 
	#_STAT_VER_LINUX
 1

	)

41 #define 
	#_MKNOD_VER_LINUX
 0

	)

44 #define 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 struct 
	sstat


48 
__dev_t
 
	mst_dev
;

49 #ifndef 
__x86_64__


50 unsigned short int 
	m__pad1
;

52 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


53 
__ino_t
 
	mst_ino
;

55 
__ino_t
 
	m__st_ino
;

57 #ifndef 
__x86_64__


58 
__mode_t
 
	mst_mode
;

59 
__nlink_t
 
	mst_nlink
;

61 
__nlink_t
 
	mst_nlink
;

62 
__mode_t
 
	mst_mode
;

64 
__uid_t
 
	mst_uid
;

65 
__gid_t
 
	mst_gid
;

66 #ifdef 
__x86_64__


67 int 
	m__pad0
;

69 
__dev_t
 
	mst_rdev
;

70 #ifndef 
__x86_64__


71 unsigned short int 
	m__pad2
;

73 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


74 
__off_t
 
	mst_size
;

76 
__off64_t
 
	mst_size
;

78 
__blksize_t
 
	mst_blksize
;

79 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


80 
__blkcnt_t
 
	mst_blocks
;

82 
__blkcnt64_t
 
	mst_blocks
;

84 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN2K8


91 struct 
timespec
 
	mst_atim
;

92 struct 
timespec
 
	mst_mtim
;

93 struct 
timespec
 
	mst_ctim
;

94 #define 
	#st_atime
 
st_atim
.
tv_sec


	)

95 #define 
	#st_mtime
 
st_mtim
.
tv_sec


	)

96 #define 
	#st_ctime
 
st_ctim
.
tv_sec


	)

98 
__time_t
 
	mst_atime
;

99 
__syscall_ulong_t
 
	mst_atimensec
;

100 
__time_t
 
	mst_mtime
;

101 
__syscall_ulong_t
 
	mst_mtimensec
;

102 
__time_t
 
	mst_ctime
;

103 
__syscall_ulong_t
 
	mst_ctimensec
;

105 #ifdef 
__x86_64__


106 
__syscall_slong_t
 
	m__unused
[3];

108 #ifndef 
__USE_FILE_OFFSET64


109 unsigned long int 
	m__unused4
;

110 unsigned long int 
	m__unused5
;

112 
__ino64_t
 
	mst_ino
;

117 #ifdef 
__USE_LARGEFILE64


119 struct 
	sstat64


121 
__dev_t
 
	mst_dev
;

122 #ifdef 
__x86_64__


123 
__ino64_t
 
	mst_ino
;

124 
__nlink_t
 
	mst_nlink
;

125 
__mode_t
 
	mst_mode
;

127 unsigned int 
	m__pad1
;

128 
__ino_t
 
	m__st_ino
;

129 
__mode_t
 
	mst_mode
;

130 
__nlink_t
 
	mst_nlink
;

132 
__uid_t
 
	mst_uid
;

133 
__gid_t
 
	mst_gid
;

134 #ifdef 
__x86_64__


135 int 
	m__pad0
;

136 
__dev_t
 
	mst_rdev
;

137 
__off_t
 
	mst_size
;

139 
__dev_t
 
	mst_rdev
;

140 unsigned int 
	m__pad2
;

141 
__off64_t
 
	mst_size
;

143 
__blksize_t
 
	mst_blksize
;

144 
__blkcnt64_t
 
	mst_blocks
;

145 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN2K8


152 struct 
timespec
 
	mst_atim
;

153 struct 
timespec
 
	mst_mtim
;

154 struct 
timespec
 
	mst_ctim
;

156 
__time_t
 
	mst_atime
;

157 
__syscall_ulong_t
 
	mst_atimensec
;

158 
__time_t
 
	mst_mtime
;

159 
__syscall_ulong_t
 
	mst_mtimensec
;

160 
__time_t
 
	mst_ctime
;

161 
__syscall_ulong_t
 
	mst_ctimensec
;

163 #ifdef 
__x86_64__


164 
__syscall_slong_t
 
	m__unused
[3];

166 
__ino64_t
 
	mst_ino
;

172 #define 
	#_STATBUF_ST_BLKSIZE


	)

173 #define 
	#_STATBUF_ST_RDEV


	)

175 #define 
	#_STATBUF_ST_NSEC


	)

179 #define 
	#__S_IFMT
 0170000

	)

182 #define 
	#__S_IFDIR
 0040000

	)

183 #define 
	#__S_IFCHR
 0020000

	)

184 #define 
	#__S_IFBLK
 0060000

	)

185 #define 
	#__S_IFREG
 0100000

	)

186 #define 
	#__S_IFIFO
 0010000

	)

187 #define 
	#__S_IFLNK
 0120000

	)

188 #define 
	#__S_IFSOCK
 0140000

	)

192 #define 
	#__S_TYPEISMQ
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

193 #define 
	#__S_TYPEISSEM
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

194 #define 
	#__S_TYPEISSHM
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

198 #define 
	#__S_ISUID
 04000

	)

199 #define 
	#__S_ISGID
 02000

	)

200 #define 
	#__S_ISVTX
 01000

	)

201 #define 
	#__S_IREAD
 0400

	)

202 #define 
	#__S_IWRITE
 0200

	)

203 #define 
	#__S_IEXEC
 0100

	)

205 #ifdef 
__USE_ATFILE


206 #define 
	#UTIME_NOW
 ((1l << 30) - 1l)

	)

207 #define 
	#UTIME_OMIT
 ((1l << 30) - 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #ifndef 
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
fprintf
)

25 
	$__LDBL_REDIR_DECL
 (
printf
)

26 
	$__LDBL_REDIR_DECL
 (
sprintf
)

27 
	$__LDBL_REDIR_DECL
 (
vfprintf
)

28 
	$__LDBL_REDIR_DECL
 (
vprintf
)

29 
	$__LDBL_REDIR_DECL
 (
vsprintf
)

30 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

31 && !
defined
 
__REDIRECT
 \

32 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fscanf
, 
__nldbl___isoc99_fscanf
)

34 
	$__LDBL_REDIR1_DECL
 (
scanf
, 
__nldbl___isoc99_scanf
)

35 
	$__LDBL_REDIR1_DECL
 (
sscanf
, 
__nldbl___isoc99_sscanf
)

37 
	$__LDBL_REDIR_DECL
 (
fscanf
)

38 
	$__LDBL_REDIR_DECL
 (
scanf
)

39 
	$__LDBL_REDIR_DECL
 (
sscanf
)

41 
__END_NAMESPACE_STD


43 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
snprintf
)

46 
	$__LDBL_REDIR_DECL
 (
vsnprintf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #if !
defined
 
__USE_GNU
 && !defined 
__REDIRECT
 \

53 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfscanf
, 
__nldbl___isoc99_vfscanf
)

55 
	$__LDBL_REDIR1_DECL
 (
vscanf
, 
__nldbl___isoc99_vscanf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsscanf
, 
__nldbl___isoc99_vsscanf
)

58 
	$__LDBL_REDIR_DECL
 (
vfscanf
)

59 
	$__LDBL_REDIR_DECL
 (
vsscanf
)

60 
	$__LDBL_REDIR_DECL
 (
vscanf
)

62 
__END_NAMESPACE_C99


65 #ifdef 
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vdprintf
)

67 
	$__LDBL_REDIR_DECL
 (
dprintf
)

70 #ifdef 
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
vasprintf
)

72 
	$__LDBL_REDIR_DECL
 (
__asprintf
)

73 
	$__LDBL_REDIR_DECL
 (
asprintf
)

74 
	$__LDBL_REDIR_DECL
 (
obstack_printf
)

75 
	$__LDBL_REDIR_DECL
 (
obstack_vprintf
)

78 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


79 
	$__LDBL_REDIR_DECL
 (
__sprintf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__vsprintf_chk
)

81 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__snprintf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__vsnprintf_chk
)

85 #if 
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__fprintf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__printf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vfprintf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__vprintf_chk
)

90 #ifdef 
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__dprintf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vdprintf_chk
)

94 #ifdef 
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__asprintf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__vasprintf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__obstack_printf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__obstack_vprintf_chk
)

	@/usr/include/bits/stdio.h

19 #ifndef 
_STDIO_H


23 #ifndef 
__extern_inline


24 #define 
	#__STDIO_INLINE
 
inline


	)

26 #define 
	#__STDIO_INLINE
 
__extern_inline


	)

30 #ifdef 
__USE_EXTERN_INLINES


33 #if !(
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function
)

35 
__STDIO_INLINE
 int

36 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

38 return 
	`vfprintf
 (
stdout
, 
__fmt
, 
__arg
);

39 
	}
}

43 
__STDIO_INLINE
 int

44 
	$getchar
 (void)

46 return 
	`_IO_getc
 (
stdin
);

47 
	}
}

50 #ifdef 
__USE_MISC


52 
__STDIO_INLINE
 int

53 
	$fgetc_unlocked
 (
FILE
 *
__fp
)

55 return 
	`_IO_getc_unlocked
 (
__fp
);

56 
	}
}

60 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


62 
__STDIO_INLINE
 int

63 
	$getc_unlocked
 (
FILE
 *
__fp
)

65 return 
	`_IO_getc_unlocked
 (
__fp
);

66 
	}
}

69 
__STDIO_INLINE
 int

70 
	$getchar_unlocked
 (void)

72 return 
	`_IO_getc_unlocked
 (
stdin
);

73 
	}
}

78 
__STDIO_INLINE
 int

79 
	$putchar
 (int 
__c
)

81 return 
	`_IO_putc
 (
__c
, 
stdout
);

82 
	}
}

85 #ifdef 
__USE_MISC


87 
__STDIO_INLINE
 int

88 
	$fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

90 return 
	`_IO_putc_unlocked
 (
__c
, 
__stream
);

91 
	}
}

95 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


97 
__STDIO_INLINE
 int

98 
	$putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

100 return 
	`_IO_putc_unlocked
 (
__c
, 
__stream
);

101 
	}
}

104 
__STDIO_INLINE
 int

105 
	$putchar_unlocked
 (int 
__c
)

107 return 
	`_IO_putc_unlocked
 (
__c
, 
stdout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$getline
 (char **
__lineptr
, 
size_t
 *
__n
, 
FILE
 *
__stream
)

117 return 
	`__getdelim
 (
__lineptr
, 
__n
, '\n', 
__stream
);

118 
	}
}

122 #ifdef 
__USE_MISC


124 
__STDIO_INLINE
 int

125 
__NTH
 (
	$feof_unlocked
 (
FILE
 *
__stream
))

127 return 
	`_IO_feof_unlocked
 (
__stream
);

128 
	}
}

131 
__STDIO_INLINE
 int

132 
__NTH
 (
	$ferror_unlocked
 (
FILE
 *
__stream
))

134 return 
	`_IO_ferror_unlocked
 (
__stream
);

135 
	}
}

141 #if 
defined
 
__USE_MISC
 && defined 
__GNUC__
 && defined 
__OPTIMIZE__
 \

142 && !
defined
 
	g__cplusplus


144 #define 
	#fread_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

145 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

146 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

147 && (
size_t
) (
size
) != 0) \

148 ? ({ char *
__ptr
 = (char *) (
ptr
); \

149 
FILE
 *
__stream
 = (
stream
); \

150 
size_t
 
__cnt
; \

151 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

152 
__cnt
 > 0; --__cnt) \

154 int 
__c
 = 
	`_IO_getc_unlocked
 (
__stream
); \

155 if (
__c
 == 
EOF
) \

157 *
__ptr
++ = 
__c
; \

159 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

160 / (
size_t
) (
size
); }) \

161 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

162 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

164 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

165 (void) (
n
), (
size_t
) 0) \

166 : 
	`fread_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

168 #define 
	#fwrite_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

169 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

170 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

171 && (
size_t
) (
size
) != 0) \

172 ? ({ const char *
__ptr
 = (const char *) (
ptr
); \

173 
FILE
 *
__stream
 = (
stream
); \

174 
size_t
 
__cnt
; \

175 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

176 
__cnt
 > 0; --__cnt) \

177 if (
	`_IO_putc_unlocked
 (*
__ptr
++, 
__stream
) == 
EOF
) \

179 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

180 / (
size_t
) (
size
); }) \

181 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

182 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

184 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

185 (void) (
n
), (
size_t
) 0) \

186 : 
	`fwrite_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

190 #undef 
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #ifndef 
_STDIO_H


23 extern int 
	$__sprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

24 const char *
__restrict
 
__format
, ...) 
__THROW
;

25 extern int 
	$__vsprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

26 const char *
__restrict
 
__format
,

27 
_G_va_list
 
__ap
) 
__THROW
;

29 #ifdef 
__va_arg_pack


30 
__fortify_function
 int

31 
	`__NTH
 (
	$sprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
, ...))

33 return 
	`__builtin___sprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

35 
	}
}

36 #elif !
defined
 
__cplusplus


37 #define 
	#sprintf
(
str
, ...) \

38 
	`__builtin___sprintf_chk
 (
str
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__fortify_function
 int

43 
__NTH
 (
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
,

44 
_G_va_list
 
__ap
))

46 return 
	`__builtin___vsprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

48 
	}
}

50 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


52 extern int 
	$__snprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

53 
size_t
 
__slen
, const char *
__restrict
 
__format
,

54 ...) 
__THROW
;

55 extern int 
	$__vsnprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

56 
size_t
 
__slen
, const char *
__restrict
 
__format
,

57 
_G_va_list
 
__ap
) 
__THROW
;

59 #ifdef 
__va_arg_pack


60 
__fortify_function
 int

61 
	`__NTH
 (
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

62 const char *
__restrict
 
__fmt
, ...))

64 return 
	`__builtin___snprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

66 
	}
}

67 #elif !
defined
 
__cplusplus


68 #define 
	#snprintf
(
str
, 
len
, ...) \

69 
	`__builtin___snprintf_chk
 (
str
, 
len
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__fortify_function
 int

74 
__NTH
 (
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

75 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
))

77 return 
	`__builtin___vsnprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

79 
	}
}

83 #if 
__USE_FORTIFY_LEVEL
 > 1

85 extern int 
__fprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

86 const char *
__restrict
 
__format
, ...);

87 extern int 
__printf_chk
 (int 
__flag
, const char *
__restrict
 
__format
, ...);

88 extern int 
__vfprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

89 const char *
__restrict
 
__format
, 
_G_va_list
 
__ap
);

90 extern int 
__vprintf_chk
 (int 
__flag
, const char *
__restrict
 
__format
,

91 
_G_va_list
 
__ap
);

93 #ifdef 
__va_arg_pack


94 
__fortify_function
 int

95 
	$fprintf
 (
FILE
 *
__restrict
 
__stream
, const char *__restrict 
__fmt
, ...)

97 return 
	`__fprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_arg_pack
 ());

99 
	}
}

101 
__fortify_function
 int

102 
	$printf
 (const char *
__restrict
 
__fmt
, ...)

104 return 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

105 
	}
}

106 #elif !
defined
 
__cplusplus


107 #define 
	#printf
(...) \

108 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 #define 
	#fprintf
(
stream
, ...) \

110 
	`__fprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__fortify_function
 int

114 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

116 #ifdef 
__USE_EXTERN_INLINES


117 return 
	`__vfprintf_chk
 (
stdout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

119 return 
	`__vprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

121 
	}
}

123 
__fortify_function
 int

124 
	$vfprintf
 (
FILE
 *
__restrict
 
__stream
,

125 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

127 return 
	`__vfprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

128 
	}
}

130 #ifdef 
__USE_XOPEN2K8


131 extern int 
	$__dprintf_chk
 (int 
__fd
, int 
__flag
, const char *
__restrict
 
__fmt
,

132 ...) 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

133 extern int 
	$__vdprintf_chk
 (int 
__fd
, int 
__flag
,

134 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

135 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

137 #ifdef 
__va_arg_pack


138 
__fortify_function
 int

139 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

141 return 
	`__dprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_arg_pack
 ());

143 
	}
}

144 #elif !
defined
 
__cplusplus


145 #define 
	#dprintf
(
fd
, ...) \

146 
	`__dprintf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__fortify_function
 int

150 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

152 return 
	`__vdprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

153 
	}
}

156 #ifdef 
__USE_GNU


158 extern int 
	$__asprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

159 const char *
__restrict
 
__fmt
, ...)

160 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 4))) 
__wur
;

161 extern int 
	$__vasprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

162 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

163 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 0))) 
__wur
;

164 extern int 
	$__obstack_printf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

165 int 
__flag
, const char *
__restrict
 
__format
,

167 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

168 extern int 
	$__obstack_vprintf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

169 int 
__flag
,

170 const char *
__restrict
 
__format
,

171 
_G_va_list
 
__args
)

172 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

174 #ifdef 
__va_arg_pack


175 
__fortify_function
 int

176 
	`__NTH
 (
	$asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
, ...))

178 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_arg_pack
 ());

180 
	}
}

182 
__fortify_function
 int

183 
__NTH
 (
	$__asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

186 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_arg_pack
 ());

188 
	}
}

190 
__fortify_function
 int

191 
__NTH
 (
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

192 const char *
__restrict
 
__fmt
, ...))

194 return 
	`__obstack_printf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_arg_pack
 ());

196 
	}
}

197 #elif !
defined
 
__cplusplus


198 #define 
	#asprintf
(
ptr
, ...) \

199 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 #define 
	#__asprintf
(
ptr
, ...) \

201 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 #define 
	#obstack_printf
(
obstack
, ...) \

203 
	`__obstack_printf_chk
 (
obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__fortify_function
 int

207 
__NTH
 (
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

208 
_G_va_list
 
__ap
))

210 return 
	`__vasprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

211 
	}
}

213 
__fortify_function
 int

214 
__NTH
 (
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

215 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
))

217 return 
	`__obstack_vprintf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__ap
);

219 
	}
}

225 #if !
defined
 
__USE_ISOC11
 \

226 || (
defined
 
	g__cplusplus
 && __cplusplus <= 201103L && !defined 
__USE_GNU
)

227 extern char *
	$__gets_chk
 (char *
__str
, 
size_t
) 
__wur
;

228 extern char *
	`__REDIRECT
 (
__gets_warn
, (char *
__str
), 
gets
)

229 
__wur
 
	`__warnattr
 ("please use fgets or getline instead, gets can't "

232 
__fortify_function
 
__wur
 char *

233 
	$gets
 (char *
__str
)

235 if (
	`__bos
 (
__str
) != (
size_t
) -1)

236 return 
	`__gets_chk
 (
__str
, 
	`__bos
 (__str));

237 return 
	`__gets_warn
 (
__str
);

238 
	}
}

241 extern char *
	$__fgets_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

242 
FILE
 *
__restrict
 
__stream
) 
__wur
;

243 extern char *
	`__REDIRECT
 (
__fgets_alias
,

244 (char *
__restrict
 
__s
, int 
__n
,

245 
FILE
 *
__restrict
 
__stream
), 
fgets
) 
__wur
;

246 extern char *
	`__REDIRECT
 (
__fgets_chk_warn
,

247 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

248 
FILE
 *
__restrict
 
__stream
), 
__fgets_chk
)

249 
__wur
 
	`__warnattr
 ("fgets called with bigger size than length "

252 
__fortify_function
 
__wur
 char *

253 
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

255 if (
	`__bos
 (
__s
) != (
size_t
) -1)

257 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

258 return 
	`__fgets_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

260 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

261 return 
	`__fgets_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

263 return 
	`__fgets_alias
 (
__s
, 
__n
, 
__stream
);

264 
	}
}

266 extern 
size_t
 
	$__fread_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

267 
size_t
 
__size
, size_t 
__n
,

268 
FILE
 *
__restrict
 
__stream
) 
__wur
;

269 extern 
size_t
 
	`__REDIRECT
 (
__fread_alias
,

270 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

272 
fread
) 
__wur
;

273 extern 
size_t
 
	`__REDIRECT
 (
__fread_chk_warn
,

274 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

275 
size_t
 
__size
, size_t 
__n
,

276 
FILE
 *
__restrict
 
__stream
),

277 
__fread_chk
)

278 
__wur
 
	`__warnattr
 ("fread called with bigger size * nmemb than length "

281 
__fortify_function
 
__wur
 
size_t


282 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

283 
FILE
 *
__restrict
 
__stream
)

285 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

287 if (!
	`__builtin_constant_p
 (
__size
)

288 || !
	`__builtin_constant_p
 (
__n
)

289 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

290 return 
	`__fread_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

292 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

293 return 
	`__fread_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

295 return 
	`__fread_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

296 
	}
}

298 #ifdef 
__USE_GNU


299 extern char *
	$__fgets_unlocked_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
,

300 int 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

301 extern char *
	`__REDIRECT
 (
__fgets_unlocked_alias
,

302 (char *
__restrict
 
__s
, int 
__n
,

303 
FILE
 *
__restrict
 
__stream
), 
fgets_unlocked
) 
__wur
;

304 extern char *
	`__REDIRECT
 (
__fgets_unlocked_chk_warn
,

305 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

306 
FILE
 *
__restrict
 
__stream
), 
__fgets_unlocked_chk
)

307 
__wur
 
	`__warnattr
 ("fgets_unlocked called with bigger size than length "

310 
__fortify_function
 
__wur
 char *

311 
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

313 if (
	`__bos
 (
__s
) != (
size_t
) -1)

315 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

316 return 
	`__fgets_unlocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

318 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

319 return 
	`__fgets_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

321 return 
	`__fgets_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

322 
	}
}

325 #ifdef 
__USE_MISC


326 #undef 
fread_unlocked


327 extern 
size_t
 
	$__fread_unlocked_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

328 
size_t
 
__size
, size_t 
__n
,

329 
FILE
 *
__restrict
 
__stream
) 
__wur
;

330 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_alias
,

331 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

333 
fread_unlocked
) 
__wur
;

334 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_chk_warn
,

335 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

336 
size_t
 
__size
, size_t 
__n
,

337 
FILE
 *
__restrict
 
__stream
),

338 
__fread_unlocked_chk
)

339 
__wur
 
	`__warnattr
 ("fread_unlocked called with bigger size * nmemb than "

342 
__fortify_function
 
__wur
 
size_t


343 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

344 
FILE
 *
__restrict
 
__stream
)

346 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

348 if (!
	`__builtin_constant_p
 (
__size
)

349 || !
	`__builtin_constant_p
 (
__n
)

350 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

351 return 
	`__fread_unlocked_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

352 
__stream
);

354 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

355 return 
	`__fread_unlocked_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

356 
__stream
);

359 #ifdef 
__USE_EXTERN_INLINES


360 if (
	`__builtin_constant_p
 (
__size
)

361 && 
	`__builtin_constant_p
 (
__n
)

362 && (
__size
 | 
__n
) < (((
size_t
) 1) << (8 * sizeof (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__cnt
 = 
__size
 * 
__n
;

366 char *
__cptr
 = (char *) 
__ptr
;

367 if (
__cnt
 == 0)

370 for (; 
__cnt
 > 0; --__cnt)

372 int 
__c
 = 
	`_IO_getc_unlocked
 (
__stream
);

373 if (
__c
 == 
EOF
)

375 *
__cptr
++ = 
__c
;

377 return (
__cptr
 - (char *) 
__ptr
) / 
__size
;

380 return 
	`__fread_unlocked_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #if !
defined
 
_STDIO_H
 && !defined 
__need_FOPEN_MAX
 && !defined 
__need_IOV_MAX


22 #ifdef 
_STDIO_H


23 #define 
	#L_tmpnam
 20

	)

24 #define 
	#TMP_MAX
 238328

	)

25 #define 
	#FILENAME_MAX
 4096

	)

27 #ifdef 
__USE_POSIX


28 #define 
	#L_ctermid
 9

	)

29 #if !
defined
 
__USE_XOPEN2K
 || defined 
__USE_GNU


30 #define 
	#L_cuserid
 9

	)

35 #if 
defined
 
__need_FOPEN_MAX
 || defined 
_STDIO_H


36 #undef 
FOPEN_MAX


37 #define 
	#FOPEN_MAX
 16

	)

40 #if 
defined
 
__need_IOV_MAX
 && !defined 
IOV_MAX


41 #define 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #ifndef 
_STDLIB_H


23 #ifdef 
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__extern_inline
 double

26 
__NTH
 (
	$atof
 (const char *
__nptr
))

28 return 
	`strtod
 (
__nptr
, (char **) 
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #ifndef 
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
strtold
, 
strtod
)

26 
__END_NAMESPACE_C99


29 #ifdef 
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
strtold_l
, 
strtod_l
)

33 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN_EXTENDED


34 #ifdef 
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #ifndef 
_STDLIB_H


23 extern char *
	$__realpath_chk
 (const char *
__restrict
 
__name
,

24 char *
__restrict
 
__resolved
,

25 
size_t
 
__resolvedlen
) 
__THROW
 
__wur
;

26 extern char *
	`__REDIRECT_NTH
 (
__realpath_alias
,

27 (const char *
__restrict
 
__name
,

28 char *
__restrict
 
__resolved
), 
realpath
) 
__wur
;

29 extern char *
	`__REDIRECT_NTH
 (
__realpath_chk_warn
,

30 (const char *
__restrict
 
__name
,

31 char *
__restrict
 
__resolved
,

32 
size_t
 
__resolvedlen
), 
__realpath_chk
) 
__wur


33 
	`__warnattr
 ("second argument of realpath must be either NULL or at "

36 
__fortify_function
 
__wur
 char *

37 
	`__NTH
 (
	$realpath
 (const char *
__restrict
 
__name
, char *__restrict 
__resolved
))

39 if (
	`__bos
 (
__resolved
) != (
size_t
) -1)

41 #if 
defined
 
_LIBC_LIMITS_H_
 && defined 
PATH_MAX


42 if (
	`__bos
 (
__resolved
) < 
PATH_MAX
)

43 return 
	`__realpath_chk_warn
 (
__name
, 
__resolved
, 
	`__bos
 (__resolved));

45 return 
	`__realpath_chk
 (
__name
, 
__resolved
, 
	`__bos
 (__resolved));

48 return 
	`__realpath_alias
 (
__name
, 
__resolved
);

49 
	}
}

52 extern int 
	$__ptsname_r_chk
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

53 
size_t
 
__nreal
) 
__THROW
 
	`__nonnull
 ((2));

54 extern int 
	`__REDIRECT_NTH
 (
__ptsname_r_alias
, (int 
__fd
, char *
__buf
,

55 
size_t
 
__buflen
), 
ptsname_r
)

56 
	`__nonnull
 ((2));

57 extern int 
	`__REDIRECT_NTH
 (
__ptsname_r_chk_warn
,

58 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

59 
size_t
 
__nreal
), 
__ptsname_r_chk
)

60 
	`__nonnull
 ((2)) 
	`__warnattr
 ("ptsname_r called with buflen bigger than "

63 
__fortify_function
 int

64 
	`__NTH
 (
	$ptsname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
))

66 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

68 if (!
	`__builtin_constant_p
 (
__buflen
))

69 return 
	`__ptsname_r_chk
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

70 if (
__buflen
 > 
	`__bos
 (
__buf
))

71 return 
	`__ptsname_r_chk_warn
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

73 return 
	`__ptsname_r_alias
 (
__fd
, 
__buf
, 
__buflen
);

74 
	}
}

77 extern int 
	$__wctomb_chk
 (char *
__s
, 
wchar_t
 
__wchar
, 
size_t
 
__buflen
)

78 
__THROW
 
__wur
;

79 extern int 
	`__REDIRECT_NTH
 (
__wctomb_alias
, (char *
__s
, 
wchar_t
 
__wchar
),

80 
wctomb
) 
__wur
;

82 
__fortify_function
 
__wur
 int

83 
	`__NTH
 (
	$wctomb
 (char *
__s
, 
wchar_t
 
__wchar
))

88 #define 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #if 
defined
 
MB_LEN_MAX
 && MB_LEN_MAX != 
__STDLIB_MB_LEN_MAX


92 if (
	`__bos
 (
__s
) != (
size_t
) -1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93 return 
	`__wctomb_chk
 (
__s
, 
__wchar
, 
	`__bos
 (__s));

94 return 
	`__wctomb_alias
 (
__s
, 
__wchar
);

95 
	}
}

98 extern 
size_t
 
	$__mbstowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

99 const char *
__restrict
 
__src
,

100 
size_t
 
__len
, size_t 
__dstlen
) 
__THROW
;

101 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbstowcs_alias
,

102 (
wchar_t
 *
__restrict
 
__dst
,

103 const char *
__restrict
 
__src
,

104 
size_t
 
__len
), 
mbstowcs
);

105 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbstowcs_chk_warn
,

106 (
wchar_t
 *
__restrict
 
__dst
,

107 const char *
__restrict
 
__src
,

108 
size_t
 
__len
, size_t 
__dstlen
), 
__mbstowcs_chk
)

109 
	`__warnattr
 ("mbstowcs called with dst buffer smaller than len "

112 
__fortify_function
 
size_t


113 
	`__NTH
 (
	$mbstowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char *__restrict 
__src
,

114 
size_t
 
__len
))

116 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

118 if (!
	`__builtin_constant_p
 (
__len
))

119 return 
	`__mbstowcs_chk
 (
__dst
, 
__src
, 
__len
,

120 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

122 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

123 return 
	`__mbstowcs_chk_warn
 (
__dst
, 
__src
, 
__len
,

124 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

126 return 
	`__mbstowcs_alias
 (
__dst
, 
__src
, 
__len
);

127 
	}
}

130 extern 
size_t
 
	$__wcstombs_chk
 (char *
__restrict
 
__dst
,

131 const 
wchar_t
 *
__restrict
 
__src
,

132 
size_t
 
__len
, size_t 
__dstlen
) 
__THROW
;

133 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcstombs_alias
,

134 (char *
__restrict
 
__dst
,

135 const 
wchar_t
 *
__restrict
 
__src
,

136 
size_t
 
__len
), 
wcstombs
);

137 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcstombs_chk_warn
,

138 (char *
__restrict
 
__dst
,

139 const 
wchar_t
 *
__restrict
 
__src
,

140 
size_t
 
__len
, size_t 
__dstlen
), 
__wcstombs_chk
)

141 
	`__warnattr
 ("wcstombs called with dst buffer smaller than len");

143 
__fortify_function
 
size_t


144 
	`__NTH
 (
	$wcstombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 *__restrict 
__src
,

145 
size_t
 
__len
))

147 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

149 if (!
	`__builtin_constant_p
 (
__len
))

150 return 
	`__wcstombs_chk
 (
__dst
, 
__src
, 
__len
, 
	`__bos
 (__dst));

151 if (
__len
 > 
	`__bos
 (
__dst
))

152 return 
	`__wcstombs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
	`__bos
 (__dst));

154 return 
	`__wcstombs_alias
 (
__dst
, 
__src
, 
__len
);

155 
	}
}

	@/usr/include/bits/string.h

19 #ifndef 
_STRING_H


24 #define 
	#_STRING_ARCH_unaligned
 1

	)

28 #if !
defined
 
__x86_64__
 && (defined 
__i486__
 || defined 
__pentium__
 \

29 || 
defined
 
	g__pentiumpro__
 || defined 
	g__pentium4__
 \

30 || 
defined
 
	g__nocona__
 || defined 
	g__atom__
 \

31 || 
defined
 
	g__core2__
 || defined 
	g__corei7__
 \

32 || 
defined
 
	g__k6__
 || defined 
	g__geode__
 \

33 || 
defined
 
	g__k8__
 || defined 
	g__athlon__
 \

34 || 
defined
 
	g__amdfam10__
)

38 #if !
defined
 
__NO_STRING_INLINES
 && defined 
__USE_STRING_INLINES
 \

39 && 
defined
 
	g__GNUC__
 && __GNUC__ >= 2

41 #ifndef 
__STRING_INLINE


42 #ifndef 
__extern_inline


43 #define 
	#__STRING_INLINE
 
inline


	)

45 #define 
	#__STRING_INLINE
 
__extern_inline


	)

50 #define 
	#__STRING_SMALL_GET16
(
src
, 
idx
) \

51 ((((const unsigned char *) (
src
))[
idx
 + 1] << 8) \

52 | ((const unsigned char *) (
src
))[
idx
])

	)

53 #define 
	#__STRING_SMALL_GET32
(
src
, 
idx
) \

54 (((((const unsigned char *) (
src
))[
idx
 + 3] << 8 \

55 | ((const unsigned char *) (
src
))[
idx
 + 2]) << 8 \

56 | ((const unsigned char *) (
src
))[
idx
 + 1]) << 8 \

57 | ((const unsigned char *) (
src
))[
idx
])

	)

61 #define 
	#_HAVE_STRING_ARCH_memcpy
 1

	)

62 #define 
	#memcpy
(
dest
, 
src
, 
n
) \

63 (
	`__extension__
 (
	`__builtin_constant_p
 (
n
) \

64 ? 
	`__memcpy_c
 ((
dest
), (
src
), (
n
)) \

65 : 
	`__memcpy_g
 ((
dest
), (
src
), (
n
))))

	)

66 #define 
	#__memcpy_c
(
dest
, 
src
, 
n
) \

67 ((
n
) == 0 \

68 ? (
dest
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__memcpy_by4
 (
dest
, 
src
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__memcpy_by2
 (
dest
, 
src
, 
n
) \

73 : 
	`__memcpy_g
 (
dest
, 
src
, 
n
))))

	)

75 
__STRING_INLINE
 void *
__memcpy_by4
 (void *
__dest
, const void *
__src
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 void *

79 
	$__memcpy_by4
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

81 register unsigned long int 
__d0
, 
__d1
;

82 register void *
__tmp
 = 
__dest
;

83 
__asm__
 
__volatile__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__src
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__src
), "3" (
__n
 / 4)

94 return 
__dest
;

95 
	}
}

97 
__STRING_INLINE
 void *
__memcpy_by2
 (void *
__dest
, const void *
__src
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 void *

101 
	$__memcpy_by2
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

103 register unsigned long int 
__d0
, 
__d1
;

104 register void *
__tmp
 = 
__dest
;

105 
__asm__
 
__volatile__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__src
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__src
), "3" (
__n
 / 2)

121 return 
__dest
;

122 
	}
}

124 
__STRING_INLINE
 void *
__memcpy_g
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
);

126 
__STRING_INLINE
 void *

127 
	$__memcpy_g
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

129 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

130 register void *
__tmp
 = 
__dest
;

131 
__asm__
 
__volatile__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__dest
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__src
),

145 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__src
)

147 return 
__dest
;

148 
	}
}

150 #define 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #ifndef 
_FORCE_INLINES


154 #define 
	#memmove
(
dest
, 
src
, 
n
) 
	`__memmove_g
 (dest, src, n)

	)

156 
__STRING_INLINE
 void *
	$__memmove_g
 (void *, const void *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 void *

160 
	$__memmove_g
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

162 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

163 register void *
__tmp
 = 
__dest
;

164 if (
__dest
 < 
__src
)

165 
__asm__
 
__volatile__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__dest
)

170 : "0" (
__n
), "1" (
__src
), "2" (
__tmp
),

171 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__src
));

173 
__asm__
 
__volatile__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__dest
)

179 : "0" (
__n
), "1" (__n - 1 + (const char *) 
__src
),

180 "2" (
__n
 - 1 + (char *) 
__tmp
),

181 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__src
));

182 return 
__dest
;

183 
	}
}

187 #define 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #ifndef 
_FORCE_INLINES


189 #ifndef 
__PIC__


191 
__STRING_INLINE
 int

192 
	$memcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

194 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

195 register int 
__res
;

196 
__asm__
 
__volatile__


204 : "=&a" (
__res
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s2
)

209 return 
__res
;

210 
	}
}

215 #define 
	#_HAVE_STRING_ARCH_memset
 1

	)

216 #define 
	#_USE_STRING_ARCH_memset
 1

	)

217 #define 
	#memset
(
s
, 
c
, 
n
) \

218 (
	`__extension__
 (
	`__builtin_constant_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__memset_c1
 ((
s
), (
c
)) \

221 : 
	`__memset_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__builtin_constant_p
 (
c
) \

223 ? (
	`__builtin_constant_p
 (
n
) \

224 ? 
	`__memset_ccn
 ((
s
), (
c
), (
n
)) \

225 : 
	`memset
 ((
s
), (
c
), (
n
))) \

226 : (
	`__builtin_constant_p
 (
n
) \

227 ? 
	`__memset_gcn
 ((
s
), (
c
), (
n
)) \

228 : 
	`memset
 ((
s
), (
c
), (
n
))))))

	)

230 #define 
	#__memset_c1
(
s
, 
c
) ({ void *
__s
 = (s); \

231 *((unsigned char *) 
__s
) = (unsigned char) (
c
); \

232 
__s
; })

	)

234 #define 
	#__memset_gc
(
s
, 
c
, 
n
) \

235 ({ void *
__s
 = (
s
); \

237 unsigned int 
__ui
; \

238 unsigned short int 
__usi
; \

239 unsigned char 
__uc
; \

240 } *
__u
 = 
__s
; \

241 unsigned int 
__c
 = ((unsigned int) ((unsigned char) (
c
))) * 0x01010101; \

247 if ((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__volatile__
 ("" : "=r" (
__c
) : "0" (__c)); \

251 switch (
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

263 
__u
->
__usi
 = (unsigned short int) 
__c
; \

264 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

265 
__u
->
__uc
 = (unsigned char) 
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

278 
__u
->
__usi
 = (unsigned short int) 
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

291 
__u
->
__uc
 = (unsigned char) 
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 #define 
	#__memset_ccn
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__memset_ccn_by4
 (
s
, ((unsigned int) ((unsigned char) (
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__memset_ccn_by2
 (
s
, \

317 ((unsigned int) ((unsigned char) (
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`memset
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 void *
__memset_ccn_by4
 (void *
__s
, unsigned int 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 void *

325 
	$__memset_ccn_by4
 (void *
__s
, unsigned int 
__c
, 
size_t
 
__n
)

327 register void *
__tmp
 = 
__s
;

328 register unsigned long int 
__d0
;

329 #ifdef 
__i686__


330 
__asm__
 
__volatile__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

335 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__volatile__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

346 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349 return 
__s
;

350 
	}
}

352 
__STRING_INLINE
 void *
__memset_ccn_by2
 (void *
__s
, unsigned int 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 void *

356 
	$__memset_ccn_by2
 (void *
__s
, unsigned int 
__c
, 
size_t
 
__n
)

358 register unsigned long int 
__d0
, 
__d1
;

359 register void *
__tmp
 = 
__s
;

360 #ifdef 
__i686__


361 
__asm__
 
__volatile__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

367 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__volatile__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

378 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381 return 
__s
;

382 
	}
}

384 #define 
	#__memset_gcn
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__memset_gcn_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__memset_gcn_by2
 (
s
, 
c
, 
n
) \

389 : 
	`memset
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 void *
__memset_gcn_by4
 (void *
__s
, int 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 void *

394 
	$__memset_gcn_by4
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

396 register void *
__tmp
 = 
__s
;

397 register unsigned long int 
__d0
;

398 
__asm__
 
__volatile__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

410 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412 return 
__s
;

413 
	}
}

415 
__STRING_INLINE
 void *
__memset_gcn_by2
 (void *
__s
, int 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 void *

418 
	$__memset_gcn_by2
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

420 register unsigned long int 
__d0
, 
__d1
;

421 register void *
__tmp
 = 
__s
;

422 
__asm__
 
__volatile__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

435 : "0" ((unsigned int) 
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437 return 
__s
;

438 
	}
}

442 #define 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #ifndef 
_FORCE_INLINES


444 
__STRING_INLINE
 void *

445 
	$memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

447 register unsigned long int 
__d0
;

448 #ifdef 
__i686__


449 register unsigned long int 
__d1
;

451 register unsigned char *
__res
;

452 if (
__n
 == 0)

453 return 
NULL
;

454 #ifdef 
__i686__


455 
__asm__
 
__volatile__


459 : "=D" (
__res
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__volatile__


470 : "=D" (
__res
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

475 return 
__res
 - 1;

476 
	}
}

479 #define 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #ifndef 
_FORCE_INLINES


481 
__STRING_INLINE
 void *
__memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 void *

484 
	$__memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

486 register unsigned long int 
__d0
;

487 #ifdef 
__i686__


488 register unsigned long int 
__d1
;

490 register void *
__res
;

491 if (
__n
 == 0)

492 return 
NULL
;

493 #ifdef 
__i686__


494 
__asm__
 
__volatile__


500 : "=D" (
__res
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__volatile__


512 : "=D" (
__res
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s
)

517 return 
__res
;

518 
	}
}

519 #ifdef 
__USE_GNU


520 #define 
	#memrchr
(
s
, 
c
, 
n
) 
	`__memrchr
 ((s), (c), (n))

	)

525 #define 
	#_HAVE_STRING_ARCH_rawmemchr
 1

	)

526 
__STRING_INLINE
 void *
__rawmemchr
 (const void *
__s
, int 
__c
);

528 #ifndef 
_FORCE_INLINES


529 
__STRING_INLINE
 void *

530 
	$__rawmemchr
 (const void *
__s
, int 
__c
)

532 register unsigned long int 
__d0
;

533 register unsigned char *
__res
;

534 
__asm__
 
__volatile__


537 : "=D" (
__res
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

541 return 
__res
 - 1;

542 
	}
}

543 #ifdef 
__USE_GNU


544 
__STRING_INLINE
 void *

545 
	$rawmemchr
 (const void *
__s
, int 
__c
)

547 return 
	`__rawmemchr
 (
__s
, 
__c
);

548 
	}
}

554 #define 
	#_HAVE_STRING_ARCH_strlen
 1

	)

555 #define 
	#strlen
(
str
) \

556 (
	`__extension__
 (
	`__builtin_constant_p
 (
str
) \

557 ? 
	`__builtin_strlen
 (
str
) \

558 : 
	`__strlen_g
 (
str
)))

	)

559 
__STRING_INLINE
 
size_t
 
__strlen_g
 (const char *
__str
);

561 
__STRING_INLINE
 
size_t


562 
	$__strlen_g
 (const char *
__str
)

564 register char 
__dummy
;

565 register const char *
__tmp
 = 
__str
;

566 
__asm__
 
__volatile__


572 : "=r" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__str
),

574 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__str
)

576 return 
__tmp
 - 
__str
 - 1;

577 
	}
}

581 #define 
	#_HAVE_STRING_ARCH_strcpy
 1

	)

582 #define 
	#strcpy
(
dest
, 
src
) \

583 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

584 ? (sizeof ((
src
)[0]) == 1 && 
	`strlen
 (src) + 1 <= 8 \

585 ? 
	`__strcpy_a_small
 ((
dest
), (
src
), 
	`strlen
 (src) + 1) \

586 : (char *) 
	`memcpy
 ((char *) (
dest
), \

587 (const char *) (
src
), \

588 
	`strlen
 (
src
) + 1)) \

589 : 
	`__strcpy_g
 ((
dest
), (
src
))))

	)

591 #define 
	#__strcpy_a_small
(
dest
, 
src
, 
srclen
) \

592 (
	`__extension__
 ({ char *
__dest
 = (
dest
); \

594 unsigned int 
__ui
; \

595 unsigned short int 
__usi
; \

596 unsigned char 
__uc
; \

597 char 
__c
; \

598 } *
__u
 = (void *) 
__dest
; \

599 switch (
srclen
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 0); \

609 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

617 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

622 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

627 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 4); \

629 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

634 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 4); \

638 (char *) 
__dest
; }))

	)

640 
__STRING_INLINE
 char *
__strcpy_g
 (char *
__dest
, const char *
__src
);

642 
__STRING_INLINE
 char *

643 
	$__strcpy_g
 (char *
__dest
, const char *
__src
)

645 register char *
__tmp
 = 
__dest
;

646 register char 
__dummy
;

647 
__asm__
 
__volatile__


656 : "=&r" (
__src
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(struct { char 
__x
[0xfffffff]; } *)
__dest
)

658 : "0" (
__src
), "1" (
__tmp
),

659 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__src
)

661 return 
__dest
;

662 
	}
}

665 #ifdef 
__USE_GNU


666 #define 
	#_HAVE_STRING_ARCH_stpcpy
 1

	)

668 #define 
	#__stpcpy
(
dest
, 
src
) \

669 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

670 ? (
	`strlen
 (
src
) + 1 <= 8 \

671 ? 
	`__stpcpy_a_small
 ((
dest
), (
src
), 
	`strlen
 (src) + 1) \

672 : 
	`__stpcpy_c
 ((
dest
), (
src
), 
	`strlen
 (src) + 1)) \

673 : 
	`__stpcpy_g
 ((
dest
), (
src
))))

	)

674 #define 
	#__stpcpy_c
(
dest
, 
src
, 
srclen
) \

675 ((
srclen
) % 4 == 0 \

676 ? 
	`__mempcpy_by4
 (
dest
, 
src
, 
srclen
) - 1 \

677 : ((
srclen
) % 2 == 0 \

678 ? 
	`__mempcpy_by2
 (
dest
, 
src
, 
srclen
) - 1 \

679 : 
	`__mempcpy_byn
 (
dest
, 
src
, 
srclen
) - 1))

	)

682 #define 
	#stpcpy
(
dest
, 
src
) 
	`__stpcpy
 ((dest), (src))

	)

684 #define 
	#__stpcpy_a_small
(
dest
, 
src
, 
srclen
) \

685 (
	`__extension__
 ({ union { \

686 unsigned int 
__ui
; \

687 unsigned short int 
__usi
; \

688 unsigned char 
__uc
; \

689 char 
__c
; \

690 } *
__u
 = (void *) (
dest
); \

691 switch (
srclen
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 0); \

698 
__u
 = 
	`__extension__
 ((void *) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 0); \

702 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

707 
__u
 = 
	`__extension__
 ((void *) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

711 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

716 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 4); \

718 
__u
 = 
	`__extension__
 ((void *) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

722 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
src
, 4); \

724 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 0); \

729 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
src
, 4); \

731 
__u
 = 
	`__extension__
 ((void *) __u + 3); \

734 (char *) 
__u
; }))

	)

736 
__STRING_INLINE
 char *
__mempcpy_by4
 (char *
__dest
, const char *
__src
,

737 
size_t
 
__srclen
);

739 
__STRING_INLINE
 char *

740 
	$__mempcpy_by4
 (char *
__dest
, const char *
__src
, 
size_t
 
__srclen
)

742 register char *
__tmp
 = 
__dest
;

743 register unsigned long int 
__d0
, 
__d1
;

744 
__asm__
 
__volatile__


752 : "=&r" (
__d0
), "=r" (
__tmp
), "=&r" (
__src
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__src
), "3" (
__srclen
 / 4)

755 return 
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 char *
__mempcpy_by2
 (char *
__dest
, const char *
__src
,

759 
size_t
 
__srclen
);

761 
__STRING_INLINE
 char *

762 
	$__mempcpy_by2
 (char *
__dest
, const char *
__src
, 
size_t
 
__srclen
)

764 register char *
__tmp
 = 
__dest
;

765 register unsigned long int 
__d0
, 
__d1
;

766 
__asm__
 
__volatile__


779 : "=&q" (
__d0
), "=r" (
__tmp
), "=&r" (
__src
), "=&r" (
__d1
),

780 "=m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__dest
)

781 : "1" (
__tmp
), "2" (
__src
), "3" (
__srclen
 / 2),

782 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

784 return 
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 char *
__mempcpy_byn
 (char *
__dest
, const char *
__src
,

788 
size_t
 
__srclen
);

790 
__STRING_INLINE
 char *

791 
	$__mempcpy_byn
 (char *
__dest
, const char *
__src
, 
size_t
 
__srclen
)

793 register unsigned long 
__d0
, 
__d1
;

794 register char *
__tmp
 = 
__dest
;

795 
__asm__
 
__volatile__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__dest
)

808 : "0" (
__tmp
), "1" (
__srclen
), "2" (
__src
),

809 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

811 return 
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 char *
__stpcpy_g
 (char *
__dest
, const char *
__src
);

816 
__STRING_INLINE
 char *

817 
	$__stpcpy_g
 (char *
__dest
, const char *
__src
)

819 register char *
__tmp
 = 
__dest
;

820 register char 
__dummy
;

821 
__asm__
 
__volatile__


830 : "=&r" (
__src
), "=r" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(struct { char 
__x
[0xfffffff]; } *)
__dest
)

832 : "0" (
__src
), "1" (
__tmp
),

833 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__src
)

835 return 
__tmp
 - 1;

836 
	}
}

841 #define 
	#_HAVE_STRING_ARCH_strncpy
 1

	)

842 #define 
	#strncpy
(
dest
, 
src
, 
n
) \

843 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

844 ? ((
	`strlen
 (
src
) + 1 >= ((
size_t
) (
n
)) \

845 ? (char *) 
	`memcpy
 ((char *) (
dest
), \

846 (const char *) (
src
), 
n
) \

847 : 
	`__strncpy_cg
 ((
dest
), (
src
), 
	`strlen
 (src) + 1, 
n
))) \

848 : 
	`__strncpy_gg
 ((
dest
), (
src
), 
n
)))

	)

849 #define 
	#__strncpy_cg
(
dest
, 
src
, 
srclen
, 
n
) \

850 (((
srclen
) % 4 == 0) \

851 ? 
	`__strncpy_by4
 (
dest
, 
src
, 
srclen
, 
n
) \

852 : (((
srclen
) % 2 == 0) \

853 ? 
	`__strncpy_by2
 (
dest
, 
src
, 
srclen
, 
n
) \

854 : 
	`__strncpy_byn
 (
dest
, 
src
, 
srclen
, 
n
)))

	)

856 
__STRING_INLINE
 char *
__strncpy_by4
 (char *
__dest
, const char 
__src
[],

857 
size_t
 
__srclen
, size_t 
__n
);

859 
__STRING_INLINE
 char *

860 
	$__strncpy_by4
 (char *
__dest
, const char 
__src
[], 
size_t
 
__srclen
, size_t 
__n
)

862 register char *
__tmp
 = 
__dest
;

863 register int 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__volatile__


872 : "=&r" (
__dummy1
), "=r" (
__tmp
), "=&r" (
__src
), "=&r" (
__dummy2
),

873 "=m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__dest
)

874 : "1" (
__tmp
), "2" (
__src
), "3" (
__srclen
 / 4),

875 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

877 (void) 
	`memset
 (
__tmp
, '\0', 
__n
 - 
__srclen
);

878 return 
__dest
;

879 
	}
}

881 
__STRING_INLINE
 char *
__strncpy_by2
 (char *
__dest
, const char 
__src
[],

882 
size_t
 
__srclen
, size_t 
__n
);

884 
__STRING_INLINE
 char *

885 
	$__strncpy_by2
 (char *
__dest
, const char 
__src
[], 
size_t
 
__srclen
, size_t 
__n
)

887 register char *
__tmp
 = 
__dest
;

888 register int 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__volatile__


902 : "=&q" (
__dummy1
), "=r" (
__tmp
), "=&r" (
__src
), "=&r" (
__dummy2
),

903 "=m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__dest
)

904 : "1" (
__tmp
), "2" (
__src
), "3" (
__srclen
 / 2),

905 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

907 (void) 
	`memset
 (
__tmp
 + 2, '\0', 
__n
 - 
__srclen
);

908 return 
__dest
;

909 
	}
}

911 
__STRING_INLINE
 char *
__strncpy_byn
 (char *
__dest
, const char 
__src
[],

912 
size_t
 
__srclen
, size_t 
__n
);

914 
__STRING_INLINE
 char *

915 
	$__strncpy_byn
 (char *
__dest
, const char 
__src
[], 
size_t
 
__srclen
, size_t 
__n
)

917 register unsigned long int 
__d0
, 
__d1
;

918 register char *
__tmp
 = 
__dest
;

919 
__asm__
 
__volatile__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__dest
)

932 : "1" (
__srclen
), "0" (
__tmp
),"2" (
__src
),

933 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

935 (void) 
	`memset
 (
__tmp
, '\0', 
__n
 - 
__srclen
);

936 return 
__dest
;

937 
	}
}

939 
__STRING_INLINE
 char *
__strncpy_gg
 (char *
__dest
, const char *
__src
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 char *

943 
	$__strncpy_gg
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
)

945 register char *
__tmp
 = 
__dest
;

946 register char 
__dummy
;

947 if (
__n
 > 0)

948 
__asm__
 
__volatile__


964 : "=&r" (
__src
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__src
), "1" (
__tmp
), "3" (
__n
)

968 return 
__dest
;

969 
	}
}

973 #define 
	#_HAVE_STRING_ARCH_strcat
 1

	)

974 #define 
	#strcat
(
dest
, 
src
) \

975 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

976 ? 
	`__strcat_c
 ((
dest
), (
src
), 
	`strlen
 (src) + 1) \

977 : 
	`__strcat_g
 ((
dest
), (
src
))))

	)

979 
__STRING_INLINE
 char *
__strcat_c
 (char *
__dest
, const char 
__src
[],

980 
size_t
 
__srclen
);

982 
__STRING_INLINE
 char *

983 
	$__strcat_c
 (char *
__dest
, const char 
__src
[], 
size_t
 
__srclen
)

985 #ifdef 
__i686__


986 register unsigned long int 
__d0
;

987 register char *
__tmp
;

988 
__asm__
 
__volatile__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(struct { char 
__x
[0xfffffff]; } *)
__dest
)

992 : "0" (
__dest
), "1" (0xffffffff), "a" (0),

993 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

995 --
__tmp
;

997 register char *
__tmp
 = 
__dest
 - 1;

998 
__asm__
 
__volatile__


1003 : "=r" (
__tmp
),

1004 "=m" ( *(struct { char 
__x
[0xfffffff]; } *)
__dest
)

1005 : "0" (
__tmp
),

1006 "m" ( *(struct { 
__extension__
 char 
__x
[
__srclen
]; } *)
__src
)

1009 (void) 
	`memcpy
 (
__tmp
, 
__src
, 
__srclen
);

1010 return 
__dest
;

1011 
	}
}

1013 
__STRING_INLINE
 char *
__strcat_g
 (char *
__dest
, const char *
__src
);

1015 
__STRING_INLINE
 char *

1016 
	$__strcat_g
 (char *
__dest
, const char *
__src
)

1018 register char *
__tmp
 = 
__dest
 - 1;

1019 register char 
__dummy
;

1020 
__asm__
 
__volatile__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__src
),

1033 "=m" ( *(struct { char 
__x
[0xfffffff]; } *)
__dest
)

1034 : "1" (
__tmp
), "2" (
__src
),

1035 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__src
)

1037 return 
__dest
;

1038 
	}
}

1042 #define 
	#_HAVE_STRING_ARCH_strncat
 1

	)

1043 #define 
	#strncat
(
dest
, 
src
, 
n
) \

1044 (
	`__extension__
 ({ char *
__dest
 = (
dest
); \

1045 
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

1046 ? (
	`strlen
 (
src
) < ((
size_t
) (
n
)) \

1047 ? 
	`strcat
 (
__dest
, (
src
)) \

1048 : (*(char *)
	`__mempcpy
 (
	`strchr
 (
__dest
, '\0'), \

1049 (const char *) (
src
), \

1050 (
n
)) = 0, 
__dest
)) \

1051 : 
	`__strncat_g
 (
__dest
, (
src
), (
n
)); }))

	)

1053 
__STRING_INLINE
 char *
__strncat_g
 (char *
__dest
, const char 
__src
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 char *

1057 
	$__strncat_g
 (char *
__dest
, const char 
__src
[], 
size_t
 
__n
)

1059 register char *
__tmp
 = 
__dest
;

1060 register char 
__dummy
;

1061 #ifdef 
__i686__


1062 
__asm__
 
__volatile__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__src
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__src
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__volatile__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__src
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__src
), "3" (
__n
)

1102 return 
__dest
;

1103 
	}
}

1107 #define 
	#_HAVE_STRING_ARCH_strcmp
 1

	)

1108 #define 
	#strcmp
(
s1
, 
s2
) \

1109 (
	`__extension__
 (
	`__builtin_constant_p
 (
s1
) && __builtin_constant_p (
s2
) \

1110 && (sizeof ((
s1
)[0]) != 1 || 
	`strlen
 (s1) >= 4) \

1111 && (sizeof ((
s2
)[0]) != 1 || 
	`strlen
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((const char *) (
s1
), (const char *) (
s2
), \

1113 (
	`strlen
 (
s1
) < strlen (
s2
) \

1114 ? 
	`strlen
 (
s1
) : strlen (
s2
)) + 1) \

1115 : (
	`__builtin_constant_p
 (
s1
) && sizeof ((s1)[0]) == 1 \

1116 && sizeof ((
s2
)[0]) == 1 && 
	`strlen
 (
s1
) < 4 \

1117 ? (
	`__builtin_constant_p
 (
s2
) && sizeof ((s2)[0]) == 1 \

1118 ? 
	`__strcmp_cc
 ((const unsigned char *) (
s1
), \

1119 (const unsigned char *) (
s2
), \

1120 
	`strlen
 (
s1
)) \

1121 : 
	`__strcmp_cg
 ((const unsigned char *) (
s1
), \

1122 (const unsigned char *) (
s2
), \

1123 
	`strlen
 (
s1
))) \

1124 : (
	`__builtin_constant_p
 (
s2
) && sizeof ((
s1
)[0]) == 1 \

1125 && sizeof ((
s2
)[0]) == 1 && 
	`strlen
 (s2) < 4 \

1126 ? (
	`__builtin_constant_p
 (
s1
) \

1127 ? 
	`__strcmp_cc
 ((const unsigned char *) (
s1
), \

1128 (const unsigned char *) (
s2
), \

1129 
	`strlen
 (
s2
)) \

1130 : 
	`__strcmp_gc
 ((const unsigned char *) (
s1
), \

1131 (const unsigned char *) (
s2
), \

1132 
	`strlen
 (
s2
))) \

1133 : 
	`__strcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 #define 
	#__strcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__extension__
 ({ register int 
__result
 = (
s1
)[0] - (
s2
)[0]; \

1137 if (
l
 > 0 && 
__result
 == 0) \

1139 
__result
 = (
s1
)[1] - (
s2
)[1]; \

1140 if (
l
 > 1 && 
__result
 == 0) \

1142 
__result
 = (
s1
)[2] - (
s2
)[2]; \

1143 if (
l
 > 2 && 
__result
 == 0) \

1144 
__result
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__result
; }))

	)

1149 #define 
	#__strcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__extension__
 ({ const unsigned char *
__s2
 = (
s2
); \

1151 register int 
__result
 = (
s1
)[0] - 
__s2
[0]; \

1152 if (
l1
 > 0 && 
__result
 == 0) \

1154 
__result
 = (
s1
)[1] - 
__s2
[1]; \

1155 if (
l1
 > 1 && 
__result
 == 0) \

1157 
__result
 = (
s1
)[2] - 
__s2
[2]; \

1158 if (
l1
 > 2 && 
__result
 == 0) \

1159 
__result
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__result
; }))

	)

1164 #define 
	#__strcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__extension__
 ({ const unsigned char *
__s1
 = (
s1
); \

1166 register int 
__result
 = 
__s1
[0] - (
s2
)[0]; \

1167 if (
l2
 > 0 && 
__result
 == 0) \

1169 
__result
 = 
__s1
[1] - (
s2
)[1]; \

1170 if (
l2
 > 1 && 
__result
 == 0) \

1172 
__result
 = 
__s1
[2] - (
s2
)[2]; \

1173 if (
l2
 > 2 && 
__result
 == 0) \

1174 
__result
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__result
; }))

	)

1179 
__STRING_INLINE
 int 
__strcmp_gg
 (const char *
__s1
, const char *
__s2
);

1181 
__STRING_INLINE
 int

1182 
	$__strcmp_gg
 (const char *
__s1
, const char *
__s2
)

1184 register int 
__res
;

1185 
__asm__
 
__volatile__


1201 : "=q" (
__res
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s2
)

1206 return 
__res
;

1207 
	}
}

1211 #define 
	#_HAVE_STRING_ARCH_strncmp
 1

	)

1212 #define 
	#strncmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__extension__
 (
	`__builtin_constant_p
 (
s1
) && 
	`strlen
 (s1) < ((
size_t
) (
n
)) \

1214 ? 
	`strcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__builtin_constant_p
 (
s2
) && 
	`strlen
 (s2) < ((
size_t
) (
n
))\

1216 ? 
	`strcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__strncmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 int 
__strncmp_g
 (const char *
__s1
, const char *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 int

1223 
	$__strncmp_g
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

1225 register int 
__res
;

1226 
__asm__
 
__volatile__


1245 : "=q" (
__res
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(struct { 
__extension__
 char 
__x
[
__n
]; } *)
__s2
)

1250 return 
__res
;

1251 
	}
}

1255 #define 
	#_HAVE_STRING_ARCH_strchr
 1

	)

1256 #define 
	#_USE_STRING_ARCH_strchr
 1

	)

1257 #define 
	#strchr
(
s
, 
c
) \

1258 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (char *) 
	`__rawmemchr
 ((
s
), (
c
)) \

1261 : 
	`__strchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__strchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 char *
__strchr_c
 (const char *
__s
, int 
__c
);

1266 
__STRING_INLINE
 char *

1267 
	$__strchr_c
 (const char *
__s
, int 
__c
)

1269 register unsigned long int 
__d0
;

1270 register char *
__res
;

1271 
__asm__
 
__volatile__


1281 : "=r" (
__res
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1285 return 
__res
;

1286 
	}
}

1288 
__STRING_INLINE
 char *
__strchr_g
 (const char *
__s
, int 
__c
);

1290 
__STRING_INLINE
 char *

1291 
	$__strchr_g
 (const char *
__s
, int 
__c
)

1293 register unsigned long int 
__d0
;

1294 register char *
__res
;

1295 
__asm__
 
__volatile__


1306 : "=r" (
__res
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1310 return 
__res
;

1311 
	}
}

1315 #define 
	#_HAVE_STRING_ARCH_strchrnul
 1

	)

1316 #define 
	#__strchrnul
(
s
, 
c
) \

1317 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (char *) 
	`__rawmemchr
 ((
s
), 
c
) \

1320 : 
	`__strchrnul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__strchrnul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 char *
__strchrnul_c
 (const char *
__s
, int 
__c
);

1325 
__STRING_INLINE
 char *

1326 
	$__strchrnul_c
 (const char *
__s
, int 
__c
)

1328 register unsigned long int 
__d0
;

1329 register char *
__res
;

1330 
__asm__
 
__volatile__


1340 : "=r" (
__res
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1344 return 
__res
;

1345 
	}
}

1347 
__STRING_INLINE
 char *
__strchrnul_g
 (const char *
__s
, int 
__c
);

1349 
__STRING_INLINE
 char *

1350 
	$__strchrnul_g
 (const char *
__s
, int 
__c
)

1352 register unsigned long int 
__d0
;

1353 register char *
__res
;

1354 
__asm__
 
__volatile__


1365 : "=r" (
__res
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1369 return 
__res
;

1370 
	}
}

1371 #ifdef 
__USE_GNU


1372 #define 
	#strchrnul
(
s
, 
c
) 
	`__strchrnul
 ((s), (c))

	)

1376 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


1378 #define 
	#_HAVE_STRING_ARCH_index
 1

	)

1379 #define 
	#index
(
s
, 
c
) \

1380 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) \

1381 ? 
	`__strchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__strchr_g
 ((
s
), (
c
))))

	)

1387 #define 
	#_HAVE_STRING_ARCH_strrchr
 1

	)

1388 #define 
	#strrchr
(
s
, 
c
) \

1389 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) \

1390 ? 
	`__strrchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__strrchr_g
 ((
s
), (
c
))))

	)

1393 #ifdef 
__i686__


1394 
__STRING_INLINE
 char *
__strrchr_c
 (const char *
__s
, int 
__c
);

1396 
__STRING_INLINE
 char *

1397 
	$__strrchr_c
 (const char *
__s
, int 
__c
)

1399 register unsigned long int 
__d0
, 
__d1
;

1400 register char *
__res
;

1401 
__asm__
 
__volatile__


1409 : "=d" (
__res
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1413 return 
__res
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 char *
__strrchr_g
 (const char *
__s
, int 
__c
);

1418 
__STRING_INLINE
 char *

1419 
	$__strrchr_g
 (const char *
__s
, int 
__c
)

1421 register unsigned long int 
__d0
, 
__d1
;

1422 register char *
__res
;

1423 
__asm__
 
__volatile__


1432 : "=d" (
__res
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1436 return 
__res
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 char *
__strrchr_c
 (const char *
__s
, int 
__c
);

1441 
__STRING_INLINE
 char *

1442 
	$__strrchr_c
 (const char *
__s
, int 
__c
)

1444 register unsigned long int 
__d0
, 
__d1
;

1445 register char *
__res
;

1446 
__asm__
 
__volatile__


1456 : "=d" (
__res
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1460 return 
__res
;

1461 
	}
}

1463 
__STRING_INLINE
 char *
__strrchr_g
 (const char *
__s
, int 
__c
);

1465 
__STRING_INLINE
 char *

1466 
	$__strrchr_g
 (const char *
__s
, int 
__c
)

1468 register unsigned long int 
__d0
, 
__d1
;

1469 register char *
__res
;

1470 
__asm__
 
__volatile__


1481 : "=r" (
__res
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1485 return 
__res
;

1486 
	}
}

1490 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


1492 #define 
	#_HAVE_STRING_ARCH_rindex
 1

	)

1493 #define 
	#rindex
(
s
, 
c
) \

1494 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) \

1495 ? 
	`__strrchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__strrchr_g
 ((
s
), (
c
))))

	)

1502 #define 
	#_HAVE_STRING_ARCH_strcspn
 1

	)

1503 #define 
	#strcspn
(
s
, 
reject
) \

1504 (
	`__extension__
 (
	`__builtin_constant_p
 (
reject
) && sizeof ((reject)[0]) == 1 \

1505 ? ((
reject
)[0] == '\0' \

1506 ? 
	`strlen
 (
s
) \

1507 : ((
reject
)[1] == '\0' \

1508 ? 
	`__strcspn_c1
 ((
s
), (((
reject
)[0] << 8) & 0xff00)) \

1509 : 
	`__strcspn_cg
 ((
s
), (
reject
), 
	`strlen
 (reject)))) \

1510 : 
	`__strcspn_g
 ((
s
), (
reject
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__strcspn_c1
 (const char *
__s
, int 
__reject
);

1514 #ifndef 
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__strcspn_c1
 (const char *
__s
, int 
__reject
)

1518 register unsigned long int 
__d0
;

1519 register char *
__res
;

1520 
__asm__
 
__volatile__


1529 : "=r" (
__res
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__reject
),

1531 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1533 return (
__res
 - 1) - 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__strcspn_cg
 (const char *
__s
, const char 
__reject
[],

1538 
size_t
 
__reject_len
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__strcspn_cg
 (const char *
__s
, const char 
__reject
[], 
size_t
 
__reject_len
)

1543 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1544 register const char *
__res
;

1545 
__asm__
 
__volatile__


1556 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__reject
), "g" (
__reject_len
)

1559 return (
__res
 - 1) - 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__strcspn_g
 (const char *
__s
, const char *
__reject
);

1563 #ifdef 
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__strcspn_g
 (const char *
__s
, const char *
__reject
)

1568 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1569 register const char *
__res
;

1570 
__asm__
 
__volatile__


1587 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__reject
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590 return (
__res
 - 1) - 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__strcspn_g
 (const char *
__s
, const char *
__reject
)

1596 register unsigned long int 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 register const char *
__res
;

1598 
__asm__
 
__volatile__


1612 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__reject
), "b" (__reject)

1616 return (
__res
 - 1) - 
__s
;

1617 
	}
}

1623 #define 
	#_HAVE_STRING_ARCH_strspn
 1

	)

1624 #define 
	#strspn
(
s
, 
accept
) \

1625 (
	`__extension__
 (
	`__builtin_constant_p
 (
accept
) && sizeof ((accept)[0]) == 1 \

1626 ? ((
accept
)[0] == '\0' \

1627 ? ((void) (
s
), 0) \

1628 : ((
accept
)[1] == '\0' \

1629 ? 
	`__strspn_c1
 ((
s
), (((
accept
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__strspn_cg
 ((
s
), (
accept
), 
	`strlen
 (accept)))) \

1631 : 
	`__strspn_g
 ((
s
), (
accept
))))

	)

1633 #ifndef 
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__strspn_c1
 (const char *
__s
, int 
__accept
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__strspn_c1
 (const char *
__s
, int 
__accept
)

1639 register unsigned long int 
__d0
;

1640 register char *
__res
;

1642 
__asm__
 
__volatile__


1648 : "=r" (
__res
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__accept
),

1650 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
)

1652 return (
__res
 - 1) - 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__strspn_cg
 (const char *
__s
, const char 
__accept
[],

1657 
size_t
 
__accept_len
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__strspn_cg
 (const char *
__s
, const char 
__accept
[], 
size_t
 
__accept_len
)

1662 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1663 register const char *
__res
;

1664 
__asm__
 
__volatile__


1675 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__accept
), "g" (
__accept_len
),

1679 "m" ( *(struct { char 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(struct { 
__extension__
 char 
__x
[
__accept_len
]; } *)
__accept
)

1682 return (
__res
 - 1) - 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__strspn_g
 (const char *
__s
, const char *
__accept
);

1686 #ifdef 
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__strspn_g
 (const char *
__s
, const char *
__accept
)

1691 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1692 register const char *
__res
;

1693 
__asm__
 
__volatile__


1709 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__accept
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712 return (
__res
 - 1) - 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__strspn_g
 (const char *
__s
, const char *
__accept
)

1718 register unsigned long int 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 register const char *
__res
;

1720 
__asm__
 
__volatile__


1734 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__accept
), "b" (__accept)

1737 return (
__res
 - 1) - 
__s
;

1738 
	}
}

1743 #define 
	#_HAVE_STRING_ARCH_strpbrk
 1

	)

1744 #define 
	#strpbrk
(
s
, 
accept
) \

1745 (
	`__extension__
 (
	`__builtin_constant_p
 (
accept
) && sizeof ((accept)[0]) == 1 \

1746 ? ((
accept
)[0] == '\0' \

1747 ? ((void) (
s
), (char *) 0) \

1748 : ((
accept
)[1] == '\0' \

1749 ? 
	`strchr
 ((
s
), (
accept
)[0]) \

1750 : 
	`__strpbrk_cg
 ((
s
), (
accept
), 
	`strlen
 (accept)))) \

1751 : 
	`__strpbrk_g
 ((
s
), (
accept
))))

	)

1753 
__STRING_INLINE
 char *
__strpbrk_cg
 (const char *
__s
, const char 
__accept
[],

1754 
size_t
 
__accept_len
);

1756 
__STRING_INLINE
 char *

1757 
	$__strpbrk_cg
 (const char *
__s
, const char 
__accept
[], 
size_t
 
__accept_len
)

1759 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1760 register char *
__res
;

1761 
__asm__
 
__volatile__


1776 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__accept
), "g" (
__accept_len
)

1779 return 
__res
;

1780 
	}
}

1782 
__STRING_INLINE
 char *
__strpbrk_g
 (const char *
__s
, const char *
__accept
);

1783 #ifdef 
__PIC__


1785 
__STRING_INLINE
 char *

1786 
	$__strpbrk_g
 (const char *
__s
, const char *
__accept
)

1788 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1789 register char *
__res
;

1790 
__asm__
 
__volatile__


1811 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__accept
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814 return 
__res
;

1815 
	}
}

1817 
__STRING_INLINE
 char *

1818 
	$__strpbrk_g
 (const char *
__s
, const char *
__accept
)

1820 register unsigned long int 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 register char *
__res
;

1822 
__asm__
 
__volatile__


1841 : "=S" (
__res
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__accept
)

1844 return 
__res
;

1845 
	}
}

1850 #define 
	#_HAVE_STRING_ARCH_strstr
 1

	)

1851 #define 
	#strstr
(
haystack
, 
needle
) \

1852 (
	`__extension__
 (
	`__builtin_constant_p
 (
needle
) && sizeof ((needle)[0]) == 1 \

1853 ? ((
needle
)[0] == '\0' \

1854 ? (
haystack
) \

1855 : ((
needle
)[1] == '\0' \

1856 ? 
	`strchr
 ((
haystack
), (
needle
)[0]) \

1857 : 
	`__strstr_cg
 ((
haystack
), (
needle
), \

1858 
	`strlen
 (
needle
)))) \

1859 : 
	`__strstr_g
 ((
haystack
), (
needle
))))

	)

1863 
__STRING_INLINE
 char *
__strstr_cg
 (const char *
__haystack
,

1864 const char 
__needle
[],

1865 
size_t
 
__needle_len
);

1867 
__STRING_INLINE
 char *

1868 
	$__strstr_cg
 (const char *
__haystack
, const char 
__needle
[],

1869 
size_t
 
__needle_len
)

1871 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1872 register char *
__res
;

1873 
__asm__
 
__volatile__


1886 : "=&a" (
__res
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__needle_len
), "1" (
__haystack
), "d" (
__needle
)

1889 return 
__res
;

1890 
	}
}

1892 
__STRING_INLINE
 char *
__strstr_g
 (const char *
__haystack
,

1893 const char *
__needle
);

1894 #ifdef 
__PIC__


1896 
__STRING_INLINE
 char *

1897 
	$__strstr_g
 (const char *
__haystack
, const char *
__needle
)

1899 register unsigned long int 
__d0
, 
__d1
, 
__d2
;

1900 register char *
__res
;

1901 
__asm__
 
__volatile__


1920 : "=&a" (
__res
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__haystack
), "3" (
__needle
),

1922 "d" (
__needle
)

1924 return 
__res
;

1925 
	}
}

1927 
__STRING_INLINE
 char *

1928 
	$__strstr_g
 (const char *
__haystack
, const char *
__needle
)

1930 register unsigned long int 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 register char *
__res
;

1932 
__asm__
 
__volatile__


1949 : "=&a" (
__res
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__haystack
), "3" (
__needle
),

1951 "b" (
__needle
)

1953 return 
__res
;

1954 
	}
}

1960 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


1961 #ifdef 
__i686__


1962 #define 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 #define 
	#ffs
(
word
) (
	`__builtin_constant_p
 (word) \

1964 ? 
	`__builtin_ffs
 (
word
) \

1965 : ({ int 
__cnt
, 
__tmp
; \

1966 
__asm__
 
__volatile__
 \

1969 : "=&r" (
__cnt
), "=r" (
__tmp
) \

1970 : "rm" (
word
), "1" (-1)); \

1971 
__cnt
 + 1; }))

	)

1973 #ifndef 
ffsl


1974 #define 
	#ffsl
(
word
) 
	`ffs
(word)

	)

1979 #ifndef 
_FORCE_INLINES


1980 #undef 
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #ifndef 
_STRING_H


24 #ifndef 
__NO_STRING_INLINES


41 #ifndef 
__STRING_INLINE


42 #ifdef 
__cplusplus


43 #define 
	#__STRING_INLINE
 
inline


	)

45 #define 
	#__STRING_INLINE
 
__extern_inline


	)

49 #if 
_STRING_ARCH_unaligned


51 #include 
	~<endian.h
>

52 #include 
	~<bits/types.h
>

54 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


55 #define 
	#__STRING2_SMALL_GET16
(
src
, 
idx
) \

56 (((const unsigned char *) (const char *) (
src
))[
idx
 + 1] << 8 \

57 | ((const unsigned char *) (const char *) (
src
))[
idx
])

	)

58 #define 
	#__STRING2_SMALL_GET32
(
src
, 
idx
) \

59 (((((const unsigned char *) (const char *) (
src
))[
idx
 + 3] << 8 \

60 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 2]) << 8 \

61 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 1]) << 8 \

62 | ((const unsigned char *) (const char *) (
src
))[
idx
])

	)

64 #define 
	#__STRING2_SMALL_GET16
(
src
, 
idx
) \

65 (((const unsigned char *) (const char *) (
src
))[
idx
] << 8 \

66 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 1])

	)

67 #define 
	#__STRING2_SMALL_GET32
(
src
, 
idx
) \

68 (((((const unsigned char *) (const char *) (
src
))[
idx
] << 8 \

69 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 1]) << 8 \

70 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 2]) << 8 \

71 | ((const unsigned char *) (const char *) (
src
))[
idx
 + 3])

	)

76 #define 
	#__STRING2_COPY_TYPE
(
N
) \

77 typedef struct { unsigned char 
__arr
[
N
]; } \

78 
	t__attribute__
 ((
	t__packed__
)) 
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #undef 
__STRING2_COPY_TYPE


92 #define 
	#__string2_1bptr_p
(
__x
) \

93 ((
size_t
)(const void *)((
__x
) + 1) - (size_t)(const void *)(__x) == 1)

	)

96 #if !
defined
 
_HAVE_STRING_ARCH_memset


97 #if !
__GNUC_PREREQ
 (3, 0)

98 #if 
_STRING_ARCH_unaligned


99 #define 
	#memset
(
s
, 
c
, 
n
) \

100 (
	`__extension__
 (
	`__builtin_constant_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__memset_1
 (
s
, 
c
) \

103 : 
	`__memset_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__builtin_constant_p
 (
c
) && (c) == '\0' \

105 ? ({ void *
__s
 = (
s
); 
	`__bzero
 (__s, 
n
); __s; }) \

106 : 
	`memset
 (
s
, 
c
, 
n
))))

	)

108 #define 
	#__memset_1
(
s
, 
c
) ({ void *
__s
 = (s); \

109 *((
__uint8_t
 *) 
__s
) = (__uint8_t) 
c
; __s; })

	)

111 #define 
	#__memset_gc
(
s
, 
c
, 
n
) \

112 ({ void *
__s
 = (
s
); \

114 unsigned int 
__ui
; \

115 unsigned short int 
__usi
; \

116 unsigned char 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uint8_t
 
__c
 = (__uint8_t) (
c
); \

121 switch ((unsigned int) (
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

133 
__u
->
__usi
 = (unsigned short int) 
__c
 * 0x0101; \

134 
__u
 = 
	`__extension__
 ((void *) __u + 2); \

135 
__u
->
__uc
 = (unsigned char) 
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

148 
__u
->
__usi
 = (unsigned short int) 
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

161 
__u
->
__uc
 = (unsigned char) 
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__extension__
 ((void *) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 #define 
	#memset
(
s
, 
c
, 
n
) \

182 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) && (c) == '\0' \

183 ? ({ void *
__s
 = (
s
); 
	`__bzero
 (__s, 
n
); __s; }) \

184 : 
	`memset
 (
s
, 
c
, 
n
)))

	)

193 #if 
__GNUC_PREREQ
 (2, 91)

194 #define 
	#__bzero
(
s
, 
n
) 
	`__builtin_memset
 (s, '\0', n)

	)

202 #ifdef 
__USE_GNU


203 #if !
defined
 
_HAVE_STRING_ARCH_mempcpy
 || defined 
_FORCE_INLINES


204 #ifndef 
_HAVE_STRING_ARCH_mempcpy


205 #if 
__GNUC_PREREQ
 (3, 4)

206 #define 
	#__mempcpy
(
dest
, 
src
, 
n
) 
	`__builtin_mempcpy
 (dest, src, n)

	)

207 #elif 
__GNUC_PREREQ
 (3, 0)

208 #define 
	#__mempcpy
(
dest
, 
src
, 
n
) \

209 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

210 && 
	`__string2_1bptr_p
 (
src
) && 
n
 <= 8 \

211 ? 
	`__builtin_memcpy
 (
dest
, 
src
, 
n
) + (n) \

212 : 
	`__mempcpy
 (
dest
, 
src
, 
n
)))

	)

214 #define 
	#__mempcpy
(
dest
, 
src
, 
n
) \

215 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

216 && 
	`__string2_1bptr_p
 (
src
) && 
n
 <= 8 \

217 ? 
	`__mempcpy_small
 (
dest
, 
	`__mempcpy_args
 (
src
), 
n
) \

218 : 
	`__mempcpy
 (
dest
, 
src
, 
n
)))

	)

222 #define 
	#mempcpy
(
dest
, 
src
, 
n
) 
	`__mempcpy
 (dest, src, n)

	)

225 #if !
__GNUC_PREREQ
 (3, 0) || 
defined
 
_FORCE_INLINES


226 #if 
_STRING_ARCH_unaligned


227 #ifndef 
_FORCE_INLINES


228 #define 
	#__mempcpy_args
(
src
) \

229 ((const char *) (
src
))[0], ((const char *) (src))[2], \

230 ((const char *) (
src
))[4], ((const char *) (src))[6], \

231 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 0), \

232 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 4), \

233 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 0), \

234 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 4)

	)

236 
__STRING_INLINE
 void *
__mempcpy_small
 (void *, char, char, char, char,

237 
__uint16_t
, __uint16_t, 
__uint32_t
,

238 
__uint32_t
, 
size_t
);

239 
__STRING_INLINE
 void *

240 
	$__mempcpy_small
 (void *
__dest1
,

241 char 
__src0_1
, char 
__src2_1
, char 
__src4_1
, char 
__src6_1
,

242 
__uint16_t
 
__src0_2
, __uint16_t 
__src4_2
,

243 
__uint32_t
 
__src0_4
, __uint32_t 
__src4_4
,

244 
size_t
 
__srclen
)

247 
__uint32_t
 
__ui
;

248 
__uint16_t
 
__usi
;

249 unsigned char 
__uc
;

250 unsigned char 
__c
;

251 } *
__u
 = 
__dest1
;

252 switch ((unsigned int) 
__srclen
)

255 
__u
->
__c
 = 
__src0_1
;

256 
__u
 = 
	`__extension__
 ((void *) __u + 1);

259 
__u
->
__usi
 = 
__src0_2
;

260 
__u
 = 
	`__extension__
 ((void *) __u + 2);

263 
__u
->
__usi
 = 
__src0_2
;

264 
__u
 = 
	`__extension__
 ((void *) __u + 2);

265 
__u
->
__c
 = 
__src2_1
;

266 
__u
 = 
	`__extension__
 ((void *) __u + 1);

269 
__u
->
__ui
 = 
__src0_4
;

270 
__u
 = 
	`__extension__
 ((void *) __u + 4);

273 
__u
->
__ui
 = 
__src0_4
;

274 
__u
 = 
	`__extension__
 ((void *) __u + 4);

275 
__u
->
__c
 = 
__src4_1
;

276 
__u
 = 
	`__extension__
 ((void *) __u + 1);

279 
__u
->
__ui
 = 
__src0_4
;

280 
__u
 = 
	`__extension__
 ((void *) __u + 4);

281 
__u
->
__usi
 = 
__src4_2
;

282 
__u
 = 
	`__extension__
 ((void *) __u + 2);

285 
__u
->
__ui
 = 
__src0_4
;

286 
__u
 = 
	`__extension__
 ((void *) __u + 4);

287 
__u
->
__usi
 = 
__src4_2
;

288 
__u
 = 
	`__extension__
 ((void *) __u + 2);

289 
__u
->
__c
 = 
__src6_1
;

290 
__u
 = 
	`__extension__
 ((void *) __u + 1);

293 
__u
->
__ui
 = 
__src0_4
;

294 
__u
 = 
	`__extension__
 ((void *) __u + 4);

295 
__u
->
__ui
 = 
__src4_4
;

296 
__u
 = 
	`__extension__
 ((void *) __u + 4);

299 return (void *) 
__u
;

300 
	}
}

302 #ifndef 
_FORCE_INLINES


303 #define 
	#__mempcpy_args
(
src
) \

304 ((const char *) (
src
))[0], \

305 
	`__extension__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((const char *) (
src
))[0], ((const char *) (src))[1] } }), \

307 
	`__extension__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

309 ((const char *) (
src
))[2] } }), \

310 
	`__extension__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

312 ((const char *) (
src
))[2], ((const char *) (src))[3] } }), \

313 
	`__extension__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

315 ((const char *) (
src
))[2], ((const char *) (src))[3], \

316 ((const char *) (
src
))[4] } }), \

317 
	`__extension__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

319 ((const char *) (
src
))[2], ((const char *) (src))[3], \

320 ((const char *) (
src
))[4], ((const char *) (src))[5] } }), \

321 
	`__extension__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

323 ((const char *) (
src
))[2], ((const char *) (src))[3], \

324 ((const char *) (
src
))[4], ((const char *) (src))[5], \

325 ((const char *) (
src
))[6] } }), \

326 
	`__extension__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

328 ((const char *) (
src
))[2], ((const char *) (src))[3], \

329 ((const char *) (
src
))[4], ((const char *) (src))[5], \

330 ((const char *) (
src
))[6], ((const char *) (src))[7] } })

	)

332 
__STRING_INLINE
 void *
__mempcpy_small
 (void *, char, 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 void *

340 
	$__mempcpy_small
 (void *
__dest
, char 
__src1
,

341 
__STRING2_COPY_ARR2
 
__src2
, 
__STRING2_COPY_ARR3
 
__src3
,

342 
__STRING2_COPY_ARR4
 
__src4
, 
__STRING2_COPY_ARR5
 
__src5
,

343 
__STRING2_COPY_ARR6
 
__src6
, 
__STRING2_COPY_ARR7
 
__src7
,

344 
__STRING2_COPY_ARR8
 
__src8
, 
size_t
 
__srclen
)

347 char 
__c
;

348 
__STRING2_COPY_ARR2
 
__sca2
;

349 
__STRING2_COPY_ARR3
 
__sca3
;

350 
__STRING2_COPY_ARR4
 
__sca4
;

351 
__STRING2_COPY_ARR5
 
__sca5
;

352 
__STRING2_COPY_ARR6
 
__sca6
;

353 
__STRING2_COPY_ARR7
 
__sca7
;

354 
__STRING2_COPY_ARR8
 
__sca8
;

355 } *
__u
 = 
__dest
;

356 switch ((unsigned int) 
__srclen
)

359 
__u
->
__c
 = 
__src1
;

362 
__extension__
 
__u
->
__sca2
 = 
__src2
;

365 
__extension__
 
__u
->
__sca3
 = 
__src3
;

368 
__extension__
 
__u
->
__sca4
 = 
__src4
;

371 
__extension__
 
__u
->
__sca5
 = 
__src5
;

374 
__extension__
 
__u
->
__sca6
 = 
__src6
;

377 
__extension__
 
__u
->
__sca7
 = 
__src7
;

380 
__extension__
 
__u
->
__sca8
 = 
__src8
;

383 return 
	`__extension__
 ((void *) 
__u
 + 
__srclen
);

384 
	}
}

392 #ifndef 
_HAVE_STRING_ARCH_strchr


393 extern void *
__rawmemchr
 (const void *
__s
, int 
__c
);

394 #if 
__GNUC_PREREQ
 (3, 2)

395 #define 
	#strchr
(
s
, 
c
) \

396 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) && !__builtin_constant_p (
s
) \

397 && (
c
) == '\0' \

398 ? (char *) 
	`__rawmemchr
 (
s
, 
c
) \

399 : 
	`__builtin_strchr
 (
s
, 
c
)))

	)

401 #define 
	#strchr
(
s
, 
c
) \

402 (
	`__extension__
 (
	`__builtin_constant_p
 (
c
) && (c) == '\0' \

403 ? (char *) 
	`__rawmemchr
 (
s
, 
c
) \

404 : 
	`strchr
 (
s
, 
c
)))

	)

410 #if (!
defined
 
_HAVE_STRING_ARCH_strcpy
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
defined
 
	g_FORCE_INLINES


412 #if !
defined
 
_HAVE_STRING_ARCH_strcpy
 && !
__GNUC_PREREQ
 (3, 0)

413 #define 
	#strcpy
(
dest
, 
src
) \

414 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

415 ? (
	`__string2_1bptr_p
 (
src
) && 
	`strlen
 (src) + 1 <= 8 \

416 ? 
	`__strcpy_small
 (
dest
, 
	`__strcpy_args
 (
src
), \

417 
	`strlen
 (
src
) + 1) \

418 : (char *) 
	`memcpy
 (
dest
, 
src
, 
	`strlen
 (src) + 1)) \

419 : 
	`strcpy
 (
dest
, 
src
)))

	)

422 #if 
_STRING_ARCH_unaligned


423 #ifndef 
_FORCE_INLINES


424 #define 
	#__strcpy_args
(
src
) \

425 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 0), \

426 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 4), \

427 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 0), \

428 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 4)

	)

430 
__STRING_INLINE
 char *
__strcpy_small
 (char *, 
__uint16_t
, __uint16_t,

431 
__uint32_t
, __uint32_t, 
size_t
);

432 
__STRING_INLINE
 char *

433 
	$__strcpy_small
 (char *
__dest
,

434 
__uint16_t
 
__src0_2
, __uint16_t 
__src4_2
,

435 
__uint32_t
 
__src0_4
, __uint32_t 
__src4_4
,

436 
size_t
 
__srclen
)

439 
__uint32_t
 
__ui
;

440 
__uint16_t
 
__usi
;

441 unsigned char 
__uc
;

442 } *
__u
 = (void *) 
__dest
;

443 switch ((unsigned int) 
__srclen
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__src0_2
;

452 
__u
->
__usi
 = 
__src0_2
;

453 
__u
 = 
	`__extension__
 ((void *) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__src0_4
;

460 
__u
->
__ui
 = 
__src0_4
;

461 
__u
 = 
	`__extension__
 ((void *) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__src0_4
;

466 
__u
 = 
	`__extension__
 ((void *) __u + 4);

467 
__u
->
__usi
 = 
__src4_2
;

470 
__u
->
__ui
 = 
__src0_4
;

471 
__u
 = 
	`__extension__
 ((void *) __u + 4);

472 
__u
->
__usi
 = 
__src4_2
;

473 
__u
 = 
	`__extension__
 ((void *) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__src0_4
;

478 
__u
 = 
	`__extension__
 ((void *) __u + 4);

479 
__u
->
__ui
 = 
__src4_4
;

482 return 
__dest
;

483 
	}
}

485 #ifndef 
_FORCE_INLINES


486 #define 
	#__strcpy_args
(
src
) \

487 
	`__extension__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((const char *) (
src
))[0], '\0' } }), \

489 
	`__extension__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

492 
	`__extension__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

494 ((const char *) (
src
))[2], '\0' } }), \

495 
	`__extension__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

497 ((const char *) (
src
))[2], ((const char *) (src))[3], \

499 
	`__extension__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

501 ((const char *) (
src
))[2], ((const char *) (src))[3], \

502 ((const char *) (
src
))[4], '\0' } }), \

503 
	`__extension__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

505 ((const char *) (
src
))[2], ((const char *) (src))[3], \

506 ((const char *) (
src
))[4], ((const char *) (src))[5], \

508 
	`__extension__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

510 ((const char *) (
src
))[2], ((const char *) (src))[3], \

511 ((const char *) (
src
))[4], ((const char *) (src))[5], \

512 ((const char *) (
src
))[6], '\0' } })

	)

514 
__STRING_INLINE
 char *
__strcpy_small
 (char *, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 char *

522 
	$__strcpy_small
 (char *
__dest
,

523 
__STRING2_COPY_ARR2
 
__src2
, 
__STRING2_COPY_ARR3
 
__src3
,

524 
__STRING2_COPY_ARR4
 
__src4
, 
__STRING2_COPY_ARR5
 
__src5
,

525 
__STRING2_COPY_ARR6
 
__src6
, 
__STRING2_COPY_ARR7
 
__src7
,

526 
__STRING2_COPY_ARR8
 
__src8
, 
size_t
 
__srclen
)

529 char 
__c
;

530 
__STRING2_COPY_ARR2
 
__sca2
;

531 
__STRING2_COPY_ARR3
 
__sca3
;

532 
__STRING2_COPY_ARR4
 
__sca4
;

533 
__STRING2_COPY_ARR5
 
__sca5
;

534 
__STRING2_COPY_ARR6
 
__sca6
;

535 
__STRING2_COPY_ARR7
 
__sca7
;

536 
__STRING2_COPY_ARR8
 
__sca8
;

537 } *
__u
 = (void *) 
__dest
;

538 switch ((unsigned int) 
__srclen
)

541 
__u
->
__c
 = '\0';

544 
__extension__
 
__u
->
__sca2
 = 
__src2
;

547 
__extension__
 
__u
->
__sca3
 = 
__src3
;

550 
__extension__
 
__u
->
__sca4
 = 
__src4
;

553 
__extension__
 
__u
->
__sca5
 = 
__src5
;

556 
__extension__
 
__u
->
__sca6
 = 
__src6
;

559 
__extension__
 
__u
->
__sca7
 = 
__src7
;

562 
__extension__
 
__u
->
__sca8
 = 
__src8
;

565 return 
__dest
;

566 
	}
}

572 #ifdef 
__USE_GNU


573 #if !
defined
 
_HAVE_STRING_ARCH_stpcpy
 || defined 
_FORCE_INLINES


574 #ifndef 
_HAVE_STRING_ARCH_stpcpy


575 #if 
__GNUC_PREREQ
 (3, 4)

576 #define 
	#__stpcpy
(
dest
, 
src
) 
	`__builtin_stpcpy
 (dest, src)

	)

577 #elif 
__GNUC_PREREQ
 (3, 0)

578 #define 
	#__stpcpy
(
dest
, 
src
) \

579 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

580 ? (
	`__string2_1bptr_p
 (
src
) && 
	`strlen
 (src) + 1 <= 8 \

581 ? 
	`__builtin_strcpy
 (
dest
, 
src
) + 
	`strlen
 (src) \

582 : ((char *) (
__mempcpy
) (
dest
, 
src
, 
	`strlen
 (src) + 1) \

584 : 
	`__stpcpy
 (
dest
, 
src
)))

	)

586 #define 
	#__stpcpy
(
dest
, 
src
) \

587 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) \

588 ? (
	`__string2_1bptr_p
 (
src
) && 
	`strlen
 (src) + 1 <= 8 \

589 ? 
	`__stpcpy_small
 (
dest
, 
	`__stpcpy_args
 (
src
), \

590 
	`strlen
 (
src
) + 1) \

591 : ((char *) (
__mempcpy
) (
dest
, 
src
, 
	`strlen
 (src) + 1) \

593 : 
	`__stpcpy
 (
dest
, 
src
)))

	)

597 #define 
	#stpcpy
(
dest
, 
src
) 
	`__stpcpy
 (dest, src)

	)

600 #if !
__GNUC_PREREQ
 (3, 0) || 
defined
 
_FORCE_INLINES


601 #if 
_STRING_ARCH_unaligned


602 #ifndef 
_FORCE_INLINES


603 #define 
	#__stpcpy_args
(
src
) \

604 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 0), \

605 
__extension__
 
	`__STRING2_SMALL_GET16
 (
src
, 4), \

606 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 0), \

607 
__extension__
 
	`__STRING2_SMALL_GET32
 (
src
, 4)

	)

609 
__STRING_INLINE
 char *
__stpcpy_small
 (char *, 
__uint16_t
, __uint16_t,

610 
__uint32_t
, __uint32_t, 
size_t
);

611 
__STRING_INLINE
 char *

612 
	$__stpcpy_small
 (char *
__dest
,

613 
__uint16_t
 
__src0_2
, __uint16_t 
__src4_2
,

614 
__uint32_t
 
__src0_4
, __uint32_t 
__src4_4
,

615 
size_t
 
__srclen
)

618 unsigned int 
__ui
;

619 unsigned short int 
__usi
;

620 unsigned char 
__uc
;

621 char 
__c
;

622 } *
__u
 = (void *) 
__dest
;

623 switch ((unsigned int) 
__srclen
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__src0_2
;

630 
__u
 = 
	`__extension__
 ((void *) __u + 1);

633 
__u
->
__usi
 = 
__src0_2
;

634 
__u
 = 
	`__extension__
 ((void *) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__src0_4
;

639 
__u
 = 
	`__extension__
 ((void *) __u + 3);

642 
__u
->
__ui
 = 
__src0_4
;

643 
__u
 = 
	`__extension__
 ((void *) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__src0_4
;

648 
__u
 = 
	`__extension__
 ((void *) __u + 4);

649 
__u
->
__usi
 = 
__src4_2
;

650 
__u
 = 
	`__extension__
 ((void *) __u + 1);

653 
__u
->
__ui
 = 
__src0_4
;

654 
__u
 = 
	`__extension__
 ((void *) __u + 4);

655 
__u
->
__usi
 = 
__src4_2
;

656 
__u
 = 
	`__extension__
 ((void *) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__src0_4
;

661 
__u
 = 
	`__extension__
 ((void *) __u + 4);

662 
__u
->
__ui
 = 
__src4_4
;

663 
__u
 = 
	`__extension__
 ((void *) __u + 3);

666 return &
__u
->
__c
;

667 
	}
}

669 #ifndef 
_FORCE_INLINES


670 #define 
	#__stpcpy_args
(
src
) \

671 
	`__extension__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((const char *) (
src
))[0], '\0' } }), \

673 
	`__extension__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

676 
	`__extension__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

678 ((const char *) (
src
))[2], '\0' } }), \

679 
	`__extension__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

681 ((const char *) (
src
))[2], ((const char *) (src))[3], \

683 
	`__extension__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

685 ((const char *) (
src
))[2], ((const char *) (src))[3], \

686 ((const char *) (
src
))[4], '\0' } }), \

687 
	`__extension__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

689 ((const char *) (
src
))[2], ((const char *) (src))[3], \

690 ((const char *) (
src
))[4], ((const char *) (src))[5], \

692 
	`__extension__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((const char *) (
src
))[0], ((const char *) (src))[1], \

694 ((const char *) (
src
))[2], ((const char *) (src))[3], \

695 ((const char *) (
src
))[4], ((const char *) (src))[5], \

696 ((const char *) (
src
))[6], '\0' } })

	)

698 
__STRING_INLINE
 char *
__stpcpy_small
 (char *, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 char *

706 
	$__stpcpy_small
 (char *
__dest
,

707 
__STRING2_COPY_ARR2
 
__src2
, 
__STRING2_COPY_ARR3
 
__src3
,

708 
__STRING2_COPY_ARR4
 
__src4
, 
__STRING2_COPY_ARR5
 
__src5
,

709 
__STRING2_COPY_ARR6
 
__src6
, 
__STRING2_COPY_ARR7
 
__src7
,

710 
__STRING2_COPY_ARR8
 
__src8
, 
size_t
 
__srclen
)

713 char 
__c
;

714 
__STRING2_COPY_ARR2
 
__sca2
;

715 
__STRING2_COPY_ARR3
 
__sca3
;

716 
__STRING2_COPY_ARR4
 
__sca4
;

717 
__STRING2_COPY_ARR5
 
__sca5
;

718 
__STRING2_COPY_ARR6
 
__sca6
;

719 
__STRING2_COPY_ARR7
 
__sca7
;

720 
__STRING2_COPY_ARR8
 
__sca8
;

721 } *
__u
 = (void *) 
__dest
;

722 switch ((unsigned int) 
__srclen
)

725 
__u
->
__c
 = '\0';

728 
__extension__
 
__u
->
__sca2
 = 
__src2
;

731 
__extension__
 
__u
->
__sca3
 = 
__src3
;

734 
__extension__
 
__u
->
__sca4
 = 
__src4
;

737 
__extension__
 
__u
->
__sca5
 = 
__src5
;

740 
__extension__
 
__u
->
__sca6
 = 
__src6
;

743 
__extension__
 
__u
->
__sca7
 = 
__src7
;

746 
__extension__
 
__u
->
__sca8
 = 
__src8
;

749 return 
__dest
 + 
__srclen
 - 1;

750 
	}
}

758 #ifndef 
_HAVE_STRING_ARCH_strncpy


759 #if 
__GNUC_PREREQ
 (3, 2)

760 #define 
	#strncpy
(
dest
, 
src
, 
n
) 
	`__builtin_strncpy
 (dest, src, n)

	)

762 #define 
	#strncpy
(
dest
, 
src
, 
n
) \

763 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

764 ? (
	`strlen
 (
src
) + 1 >= ((
size_t
) (
n
)) \

765 ? (char *) 
	`memcpy
 (
dest
, 
src
, 
n
) \

766 : 
	`strncpy
 (
dest
, 
src
, 
n
)) \

767 : 
	`strncpy
 (
dest
, 
src
, 
n
)))

	)

773 #ifndef 
_HAVE_STRING_ARCH_strncat


774 #ifdef 
_USE_STRING_ARCH_strchr


775 #define 
	#strncat
(
dest
, 
src
, 
n
) \

776 (
	`__extension__
 ({ char *
__dest
 = (
dest
); \

777 
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

778 ? (
	`strlen
 (
src
) < ((
size_t
) (
n
)) \

779 ? 
	`strcat
 (
__dest
, 
src
) \

780 : (*((char *) 
	`__mempcpy
 (
	`strchr
 (
__dest
, '\0'), \

781 
src
, 
n
)) = '\0', 
__dest
)) \

782 : 
	`strncat
 (
dest
, 
src
, 
n
); }))

	)

783 #elif 
__GNUC_PREREQ
 (3, 2)

784 #define 
	#strncat
(
dest
, 
src
, 
n
) 
	`__builtin_strncat
 (dest, src, n)

	)

786 #define 
	#strncat
(
dest
, 
src
, 
n
) \

787 (
	`__extension__
 (
	`__builtin_constant_p
 (
src
) && __builtin_constant_p (
n
) \

788 ? (
	`strlen
 (
src
) < ((
size_t
) (
n
)) \

789 ? 
	`strcat
 (
dest
, 
src
) \

790 : 
	`strncat
 (
dest
, 
src
, 
n
)) \

791 : 
	`strncat
 (
dest
, 
src
, 
n
)))

	)

797 #ifndef 
_HAVE_STRING_ARCH_strcmp


798 #if 
__GNUC_PREREQ
 (3, 2)

799 #define 
	#strcmp
(
s1
, 
s2
) \

800 
__extension__
 \

801 ({ 
size_t
 
__s1_len
, 
__s2_len
; \

802 (
	`__builtin_constant_p
 (
s1
) && __builtin_constant_p (
s2
) \

803 && (
__s1_len
 = 
	`strlen
 (
s1
), 
__s2_len
 = strlen (
s2
), \

804 (!
	`__string2_1bptr_p
 (
s1
) || 
__s1_len
 >= 4) \

805 && (!
	`__string2_1bptr_p
 (
s2
) || 
__s2_len
 >= 4)) \

806 ? 
	`__builtin_strcmp
 (
s1
, 
s2
) \

807 : (
	`__builtin_constant_p
 (
s1
) && 
	`__string2_1bptr_p
 (s1) \

808 && (
__s1_len
 = 
	`strlen
 (
s1
), __s1_len < 4) \

809 ? (
	`__builtin_constant_p
 (
s2
) && 
	`__string2_1bptr_p
 (s2) \

810 ? 
	`__builtin_strcmp
 (
s1
, 
s2
) \

811 : 
	`__strcmp_cg
 (
s1
, 
s2
, 
__s1_len
)) \

812 : (
	`__builtin_constant_p
 (
s2
) && 
	`__string2_1bptr_p
 (s2) \

813 && (
__s2_len
 = 
	`strlen
 (
s2
), __s2_len < 4) \

814 ? (
	`__builtin_constant_p
 (
s1
) && 
	`__string2_1bptr_p
 (s1) \

815 ? 
	`__builtin_strcmp
 (
s1
, 
s2
) \

816 : 
	`__strcmp_gc
 (
s1
, 
s2
, 
__s2_len
)) \

817 : 
	`__builtin_strcmp
 (
s1
, 
s2
)))); })

	)

819 #define 
	#strcmp
(
s1
, 
s2
) \

820 
__extension__
 \

821 ({ 
size_t
 
__s1_len
, 
__s2_len
; \

822 (
	`__builtin_constant_p
 (
s1
) && __builtin_constant_p (
s2
) \

823 && (
__s1_len
 = 
	`strlen
 (
s1
), 
__s2_len
 = strlen (
s2
), \

824 (!
	`__string2_1bptr_p
 (
s1
) || 
__s1_len
 >= 4) \

825 && (!
	`__string2_1bptr_p
 (
s2
) || 
__s2_len
 >= 4)) \

826 ? 
	`memcmp
 ((const char *) (
s1
), (const char *) (
s2
), \

827 (
__s1_len
 < 
__s2_len
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__builtin_constant_p
 (
s1
) && 
	`__string2_1bptr_p
 (s1) \

829 && (
__s1_len
 = 
	`strlen
 (
s1
), __s1_len < 4) \

830 ? (
	`__builtin_constant_p
 (
s2
) && 
	`__string2_1bptr_p
 (s2) \

831 ? 
	`__strcmp_cc
 (
s1
, 
s2
, 
__s1_len
) \

832 : 
	`__strcmp_cg
 (
s1
, 
s2
, 
__s1_len
)) \

833 : (
	`__builtin_constant_p
 (
s2
) && 
	`__string2_1bptr_p
 (s2) \

834 && (
__s2_len
 = 
	`strlen
 (
s2
), __s2_len < 4) \

835 ? (
	`__builtin_constant_p
 (
s1
) && 
	`__string2_1bptr_p
 (s1) \

836 ? 
	`__strcmp_cc
 (
s1
, 
s2
, 
__s2_len
) \

837 : 
	`__strcmp_gc
 (
s1
, 
s2
, 
__s2_len
)) \

838 : 
	`strcmp
 (
s1
, 
s2
)))); })

	)

841 #define 
	#__strcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__extension__
 ({ int 
__result
 = \

843 (((const unsigned char *) (const char *) (
s1
))[0] \

844 - ((const unsigned char *) (const char *)(
s2
))[0]); \

845 if (
l
 > 0 && 
__result
 == 0) \

847 
__result
 = (((const unsigned char *) \

848 (const char *) (
s1
))[1] \

850 (const char *) (
s2
))[1]); \

851 if (
l
 > 1 && 
__result
 == 0) \

853 
__result
 = \

855 (const char *) (
s1
))[2] \

857 (const char *) (
s2
))[2]); \

858 if (
l
 > 2 && 
__result
 == 0) \

859 
__result
 = \

861 (const char *) (
s1
))[3] \

863 (const char *) (
s2
))[3]); \

866 
__result
; }))

	)

868 #define 
	#__strcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__extension__
 ({ const unsigned char *
__s2
 = \

870 (const unsigned char *) (const char *) (
s2
); \

871 int 
__result
 = \

872 (((const unsigned char *) (const char *) (
s1
))[0] \

873 - 
__s2
[0]); \

874 if (
l1
 > 0 && 
__result
 == 0) \

876 
__result
 = (((const unsigned char *) \

877 (const char *) (
s1
))[1] - 
__s2
[1]); \

878 if (
l1
 > 1 && 
__result
 == 0) \

880 
__result
 = (((const unsigned char *) \

881 (const char *) (
s1
))[2] - 
__s2
[2]); \

882 if (
l1
 > 2 && 
__result
 == 0) \

883 
__result
 = (((const unsigned char *) \

884 (const char *) (
s1
))[3] \

885 - 
__s2
[3]); \

888 
__result
; }))

	)

890 #define 
	#__strcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__extension__
 ({ const unsigned char *
__s1
 = \

892 (const unsigned char *) (const char *) (
s1
); \

893 register int 
__result
 = \

894 
__s1
[0] - ((const unsigned char *) \

895 (const char *) (
s2
))[0]; \

896 if (
l2
 > 0 && 
__result
 == 0) \

898 
__result
 = (
__s1
[1] \

900 (const char *) (
s2
))[1]); \

901 if (
l2
 > 1 && 
__result
 == 0) \

903 
__result
 = \

904 (
__s1
[2] - ((const unsigned char *) \

905 (const char *) (
s2
))[2]); \

906 if (
l2
 > 2 && 
__result
 == 0) \

907 
__result
 = \

908 (
__s1
[3] \

910 (const char *) (
s2
))[3]); \

913 
__result
; }))

	)

918 #ifndef 
_HAVE_STRING_ARCH_strncmp


919 #define 
	#strncmp
(
s1
, 
s2
, 
n
) \

920 (
	`__extension__
 (
	`__builtin_constant_p
 (
n
) \

921 && ((
	`__builtin_constant_p
 (
s1
) \

922 && 
	`strlen
 (
s1
) < ((
size_t
) (
n
))) \

923 || (
	`__builtin_constant_p
 (
s2
) \

924 && 
	`strlen
 (
s2
) < ((
size_t
) (
n
)))) \

925 ? 
	`strcmp
 (
s1
, 
s2
) : 
	`strncmp
 (s1, s2, 
n
)))

	)

931 #if !
defined
 
_HAVE_STRING_ARCH_strcspn
 || defined 
_FORCE_INLINES


932 #ifndef 
_HAVE_STRING_ARCH_strcspn


933 #if 
__GNUC_PREREQ
 (3, 2)

934 #define 
	#strcspn
(
s
, 
reject
) \

935 
__extension__
 \

936 ({ char 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__builtin_constant_p
 (
reject
) && 
	`__string2_1bptr_p
 (reject) \

938 ? ((
	`__builtin_constant_p
 (
s
) && 
	`__string2_1bptr_p
 (s)) \

939 ? 
	`__builtin_strcspn
 (
s
, 
reject
) \

940 : ((
__r0
 = ((const char *) (
reject
))[0], __r0 == '\0') \

941 ? 
	`strlen
 (
s
) \

942 : ((
__r1
 = ((const char *) (
reject
))[1], __r1 == '\0') \

943 ? 
	`__strcspn_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((const char *) (
reject
))[2], __r2 == '\0') \

945 ? 
	`__strcspn_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((const char *) (
reject
))[3] == '\0' \

947 ? 
	`__strcspn_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__builtin_strcspn
 (
s
, 
reject
)))))) \

949 : 
	`__builtin_strcspn
 (
s
, 
reject
)); })

	)

951 #define 
	#strcspn
(
s
, 
reject
) \

952 
__extension__
 \

953 ({ char 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__builtin_constant_p
 (
reject
) && 
	`__string2_1bptr_p
 (reject) \

955 ? ((
__r0
 = ((const char *) (
reject
))[0], __r0 == '\0') \

956 ? 
	`strlen
 (
s
) \

957 : ((
__r1
 = ((const char *) (
reject
))[1], __r1 == '\0') \

958 ? 
	`__strcspn_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((const char *) (
reject
))[2], __r2 == '\0') \

960 ? 
	`__strcspn_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((const char *) (
reject
))[3] == '\0' \

962 ? 
	`__strcspn_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`strcspn
 (
s
, 
reject
))))) \

964 : 
	`strcspn
 (
s
, 
reject
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__strcspn_c1
 (const char *
__s
, int 
__reject
);

969 
__STRING_INLINE
 
size_t


970 
	$__strcspn_c1
 (const char *
__s
, int 
__reject
)

972 
size_t
 
__result
 = 0;

973 while (
__s
[
__result
] != '\0' && __s[__result] != 
__reject
)

974 ++
__result
;

975 return 
__result
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__strcspn_c2
 (const char *
__s
, int 
__reject1
,

979 int 
__reject2
);

980 
__STRING_INLINE
 
size_t


981 
	$__strcspn_c2
 (const char *
__s
, int 
__reject1
, int 
__reject2
)

983 
size_t
 
__result
 = 0;

984 while (
__s
[
__result
] != '\0' && __s[__result] != 
__reject1


985 && 
__s
[
__result
] != 
__reject2
)

986 ++
__result
;

987 return 
__result
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__strcspn_c3
 (const char *
__s
, int 
__reject1
,

991 int 
__reject2
, int 
__reject3
);

992 
__STRING_INLINE
 
size_t


993 
	$__strcspn_c3
 (const char *
__s
, int 
__reject1
, int 
__reject2
,

994 int 
__reject3
)

996 
size_t
 
__result
 = 0;

997 while (
__s
[
__result
] != '\0' && __s[__result] != 
__reject1


998 && 
__s
[
__result
] != 
__reject2
 && __s[__result] != 
__reject3
)

999 ++
__result
;

1000 return 
__result
;

1001 
	}
}

1007 #if !
defined
 
_HAVE_STRING_ARCH_strspn
 || defined 
_FORCE_INLINES


1008 #ifndef 
_HAVE_STRING_ARCH_strspn


1009 #if 
__GNUC_PREREQ
 (3, 2)

1010 #define 
	#strspn
(
s
, 
accept
) \

1011 
__extension__
 \

1012 ({ char 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__builtin_constant_p
 (
accept
) && 
	`__string2_1bptr_p
 (accept) \

1014 ? ((
	`__builtin_constant_p
 (
s
) && 
	`__string2_1bptr_p
 (s)) \

1015 ? 
	`__builtin_strspn
 (
s
, 
accept
) \

1016 : ((
__a0
 = ((const char *) (
accept
))[0], __a0 == '\0') \

1017 ? ((void) (
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((const char *) (
accept
))[1], __a1 == '\0') \

1019 ? 
	`__strspn_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((const char *) (
accept
))[2], __a2 == '\0') \

1021 ? 
	`__strspn_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((const char *) (
accept
))[3] == '\0' \

1023 ? 
	`__strspn_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__builtin_strspn
 (
s
, 
accept
)))))) \

1025 : 
	`__builtin_strspn
 (
s
, 
accept
)); })

	)

1027 #define 
	#strspn
(
s
, 
accept
) \

1028 
__extension__
 \

1029 ({ char 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__builtin_constant_p
 (
accept
) && 
	`__string2_1bptr_p
 (accept) \

1031 ? ((
__a0
 = ((const char *) (
accept
))[0], __a0 == '\0') \

1032 ? ((void) (
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((const char *) (
accept
))[1], __a1 == '\0') \

1034 ? 
	`__strspn_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((const char *) (
accept
))[2], __a2 == '\0') \

1036 ? 
	`__strspn_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((const char *) (
accept
))[3] == '\0' \

1038 ? 
	`__strspn_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`strspn
 (
s
, 
accept
))))) \

1040 : 
	`strspn
 (
s
, 
accept
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__strspn_c1
 (const char *
__s
, int 
__accept
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__strspn_c1
 (const char *
__s
, int 
__accept
)

1048 
size_t
 
__result
 = 0;

1050 while (
__s
[
__result
] == 
__accept
)

1051 ++
__result
;

1052 return 
__result
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__strspn_c2
 (const char *
__s
, int 
__accept1
,

1056 int 
__accept2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__strspn_c2
 (const char *
__s
, int 
__accept1
, int 
__accept2
)

1060 
size_t
 
__result
 = 0;

1062 while (
__s
[
__result
] == 
__accept1
 || __s[__result] == 
__accept2
)

1063 ++
__result
;

1064 return 
__result
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__strspn_c3
 (const char *
__s
, int 
__accept1
,

1068 int 
__accept2
, int 
__accept3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__strspn_c3
 (const char *
__s
, int 
__accept1
, int 
__accept2
, int 
__accept3
)

1072 
size_t
 
__result
 = 0;

1074 while (
__s
[
__result
] == 
__accept1
 || __s[__result] == 
__accept2


1075 || 
__s
[
__result
] == 
__accept3
)

1076 ++
__result
;

1077 return 
__result
;

1078 
	}
}

1083 #if !
defined
 
_HAVE_STRING_ARCH_strpbrk
 || defined 
_FORCE_INLINES


1084 #ifndef 
_HAVE_STRING_ARCH_strpbrk


1085 #if 
__GNUC_PREREQ
 (3, 2)

1086 #define 
	#strpbrk
(
s
, 
accept
) \

1087 
__extension__
 \

1088 ({ char 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__builtin_constant_p
 (
accept
) && 
	`__string2_1bptr_p
 (accept) \

1090 ? ((
	`__builtin_constant_p
 (
s
) && 
	`__string2_1bptr_p
 (s)) \

1091 ? 
	`__builtin_strpbrk
 (
s
, 
accept
) \

1092 : ((
__a0
 = ((const char *) (
accept
))[0], __a0 == '\0') \

1093 ? ((void) (
s
), (char *) 
NULL
) \

1094 : ((
__a1
 = ((const char *) (
accept
))[1], __a1 == '\0') \

1095 ? 
	`__builtin_strchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((const char *) (
accept
))[2], __a2 == '\0') \

1097 ? 
	`__strpbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((const char *) (
accept
))[3] == '\0' \

1099 ? 
	`__strpbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__builtin_strpbrk
 (
s
, 
accept
)))))) \

1101 : 
	`__builtin_strpbrk
 (
s
, 
accept
)); })

	)

1103 #define 
	#strpbrk
(
s
, 
accept
) \

1104 
__extension__
 \

1105 ({ char 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__builtin_constant_p
 (
accept
) && 
	`__string2_1bptr_p
 (accept) \

1107 ? ((
__a0
 = ((const char *) (
accept
))[0], __a0 == '\0') \

1108 ? ((void) (
s
), (char *) 
NULL
) \

1109 : ((
__a1
 = ((const char *) (
accept
))[1], __a1 == '\0') \

1110 ? 
	`strchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((const char *) (
accept
))[2], __a2 == '\0') \

1112 ? 
	`__strpbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((const char *) (
accept
))[3] == '\0' \

1114 ? 
	`__strpbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`strpbrk
 (
s
, 
accept
))))) \

1116 : 
	`strpbrk
 (
s
, 
accept
)); })

	)

1120 
__STRING_INLINE
 char *
__strpbrk_c2
 (const char *
__s
, int 
__accept1
,

1121 int 
__accept2
);

1122 
__STRING_INLINE
 char *

1123 
	$__strpbrk_c2
 (const char *
__s
, int 
__accept1
, int 
__accept2
)

1126 while (*
__s
 != '\0' && *__s != 
__accept1
 && *__s != 
__accept2
)

1127 ++
__s
;

1128 return *
__s
 == '\0' ? 
NULL
 : (char *) (
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 char *
__strpbrk_c3
 (const char *
__s
, int 
__accept1
,

1132 int 
__accept2
, int 
__accept3
);

1133 
__STRING_INLINE
 char *

1134 
	$__strpbrk_c3
 (const char *
__s
, int 
__accept1
, int 
__accept2
, int 
__accept3
)

1137 while (*
__s
 != '\0' && *__s != 
__accept1
 && *__s != 
__accept2


1138 && *
__s
 != 
__accept3
)

1139 ++
__s
;

1140 return *
__s
 == '\0' ? 
NULL
 : (char *) (
size_t
) __s;

1141 
	}
}

1147 #if !
defined
 
_HAVE_STRING_ARCH_strstr
 && !
__GNUC_PREREQ
 (2, 97)

1148 #define 
	#strstr
(
haystack
, 
needle
) \

1149 (
	`__extension__
 (
	`__builtin_constant_p
 (
needle
) && 
	`__string2_1bptr_p
 (needle) \

1150 ? (((const char *) (
needle
))[0] == '\0' \

1151 ? (char *) (
size_t
) (
haystack
) \

1152 : (((const char *) (
needle
))[1] == '\0' \

1153 ? 
	`strchr
 (
haystack
, \

1154 ((const char *) (
needle
))[0]) \

1155 : 
	`strstr
 (
haystack
, 
needle
))) \

1156 : 
	`strstr
 (
haystack
, 
needle
)))

	)

1160 #if !
defined
 
_HAVE_STRING_ARCH_strtok_r
 || defined 
_FORCE_INLINES


1161 #ifndef 
_HAVE_STRING_ARCH_strtok_r


1162 #define 
	#__strtok_r
(
s
, 
sep
, 
nextp
) \

1163 (
	`__extension__
 (
	`__builtin_constant_p
 (
sep
) && 
	`__string2_1bptr_p
 (sep) \

1164 && ((const char *) (
sep
))[0] != '\0' \

1165 && ((const char *) (
sep
))[1] == '\0' \

1166 ? 
	`__strtok_r_1c
 (
s
, ((const char *) (
sep
))[0], 
nextp
) \

1167 : 
	`__strtok_r
 (
s
, 
sep
, 
nextp
)))

	)

1170 
__STRING_INLINE
 char *
__strtok_r_1c
 (char *
__s
, char 
__sep
, char **
__nextp
);

1171 
__STRING_INLINE
 char *

1172 
	$__strtok_r_1c
 (char *
__s
, char 
__sep
, char **
__nextp
)

1174 char *
__result
;

1175 if (
__s
 == 
NULL
)

1176 
__s
 = *
__nextp
;

1177 while (*
__s
 == 
__sep
)

1178 ++
__s
;

1179 
__result
 = 
NULL
;

1180 if (*
__s
 != '\0')

1182 
__result
 = 
__s
++;

1183 while (*
__s
 != '\0')

1184 if (*
__s
++ == 
__sep
)

1186 
__s
[-1] = '\0';

1190 *
__nextp
 = 
__s
;

1191 return 
__result
;

1192 
	}
}

1193 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


1194 #define 
	#strtok_r
(
s
, 
sep
, 
nextp
) 
	`__strtok_r
 (s, sep, nextp)

	)

1199 #if !
defined
 
_HAVE_STRING_ARCH_strsep
 || defined 
_FORCE_INLINES


1200 #ifndef 
_HAVE_STRING_ARCH_strsep


1202 extern char *
__strsep_g
 (char **
__stringp
, const char *
__delim
);

1203 #define 
	#__strsep
(
s
, 
reject
) \

1204 
__extension__
 \

1205 ({ char 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__builtin_constant_p
 (
reject
) && 
	`__string2_1bptr_p
 (reject) \

1207 && (
__r0
 = ((const char *) (
reject
))[0], \

1208 ((const char *) (
reject
))[0] != '\0') \

1209 ? ((
__r1
 = ((const char *) (
reject
))[1], \

1210 ((const char *) (
reject
))[1] == '\0') \

1211 ? 
	`__strsep_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((const char *) (
reject
))[2], __r2 == '\0') \

1213 ? 
	`__strsep_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((const char *) (
reject
))[3] == '\0' \

1215 ? 
	`__strsep_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__strsep_g
 (
s
, 
reject
)))) \

1217 : 
	`__strsep_g
 (
s
, 
reject
)); })

	)

1220 
__STRING_INLINE
 char *
__strsep_1c
 (char **
__s
, char 
__reject
);

1221 
__STRING_INLINE
 char *

1222 
	$__strsep_1c
 (char **
__s
, char 
__reject
)

1224 char *
__retval
 = *
__s
;

1225 if (
__retval
 != 
NULL
 && (*
__s
 = 
	`strchr
 (__retval, 
__reject
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227 return 
__retval
;

1228 
	}
}

1230 
__STRING_INLINE
 char *
__strsep_2c
 (char **
__s
, char 
__reject1
, char 
__reject2
);

1231 
__STRING_INLINE
 char *

1232 
	$__strsep_2c
 (char **
__s
, char 
__reject1
, char 
__reject2
)

1234 char *
__retval
 = *
__s
;

1235 if (
__retval
 != 
NULL
)

1237 char *
__cp
 = 
__retval
;

1240 if (*
__cp
 == '\0')

1242 
__cp
 = 
NULL
;

1245 if (*
__cp
 == 
__reject1
 || *__cp == 
__reject2
)

1247 *
__cp
++ = '\0';

1250 ++
__cp
;

1252 *
__s
 = 
__cp
;

1254 return 
__retval
;

1255 
	}
}

1257 
__STRING_INLINE
 char *
__strsep_3c
 (char **
__s
, char 
__reject1
, char 
__reject2
,

1258 char 
__reject3
);

1259 
__STRING_INLINE
 char *

1260 
	$__strsep_3c
 (char **
__s
, char 
__reject1
, char 
__reject2
, char 
__reject3
)

1262 char *
__retval
 = *
__s
;

1263 if (
__retval
 != 
NULL
)

1265 char *
__cp
 = 
__retval
;

1268 if (*
__cp
 == '\0')

1270 
__cp
 = 
NULL
;

1273 if (*
__cp
 == 
__reject1
 || *__cp == 
__reject2
 || *__cp == 
__reject3
)

1275 *
__cp
++ = '\0';

1278 ++
__cp
;

1280 *
__s
 = 
__cp
;

1282 return 
__retval
;

1283 
	}
}

1284 #ifdef 
__USE_BSD


1285 #define 
	#strsep
(
s
, 
reject
) 
	`__strsep
 (s, reject)

	)

1292 #ifdef 
__USE_MISC


1294 #if !
defined
 
_HAVE_STRING_ARCH_strdup
 || !defined 
_HAVE_STRING_ARCH_strndup


1295 #define 
	#__need_malloc_and_calloc


	)

1296 #include 
	~<stdlib.h
>

1299 #ifndef 
_HAVE_STRING_ARCH_strdup


1301 extern char *
	$__strdup
 (const char *
__string
) 
__THROW
 
__attribute_malloc__
;

1302 #define 
	#__strdup
(
s
) \

1303 (
	`__extension__
 (
	`__builtin_constant_p
 (
s
) && 
	`__string2_1bptr_p
 (s) \

1304 ? (((const char *) (
s
))[0] == '\0' \

1305 ? (char *) 
	`calloc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__len
 = 
	`strlen
 (
s
) + 1; \

1307 char *
__retval
 = (char *) 
	`malloc
 (
__len
); \

1308 if (
__retval
 != 
NULL
) \

1309 
__retval
 = (char *) 
	`memcpy
 (__retval, 
s
, 
__len
); \

1310 
__retval
; 
	}
})) \

1311 : 
	`__strdup
 (
s
)))

	)

1313 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


1314 #define 
	#strdup
(
s
) 
	`__strdup
 (s)

	)

1318 #ifndef 
_HAVE_STRING_ARCH_strndup


1320 extern char *
	$__strndup
 (const char *
__string
, 
size_t
 
__n
)

1321 
__THROW
 
__attribute_malloc__
;

1322 #define 
	#__strndup
(
s
, 
n
) \

1323 (
	`__extension__
 (
	`__builtin_constant_p
 (
s
) && 
	`__string2_1bptr_p
 (s) \

1324 ? (((const char *) (
s
))[0] == '\0' \

1325 ? (char *) 
	`calloc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__len
 = 
	`strlen
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 char *
__retval
; \

1329 if (
__n
 < 
__len
) \

1330 
__len
 = 
__n
 + 1; \

1331 
__retval
 = (char *) 
	`malloc
 (
__len
); \

1332 if (
__retval
 != 
NULL
) \

1334 
__retval
[
__len
 - 1] = '\0'; \

1335 
__retval
 = (char *) 
	`memcpy
 (__retval, 
s
, \

1336 
__len
 - 1); \

1338 
__retval
; 
	}
})) \

1339 : 
	`__strndup
 (
s
, 
n
)))

	)

1341 #ifdef 
__USE_GNU


1342 #define 
	#strndup
(
s
, 
n
) 
	`__strndup
 (s, n)

	)

1348 #ifndef 
_FORCE_INLINES


1349 #undef 
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #ifndef 
_STRING_H


22 
__warndecl
 (
__warn_memset_zero_len
,

25 #ifndef 
__cplusplus


29 #undef 
memcpy


30 #undef 
memmove


31 #undef 
memset


32 #undef 
strcat


33 #undef 
strcpy


34 #undef 
strncat


35 #undef 
strncpy


36 #ifdef 
__USE_GNU


37 #undef 
mempcpy


38 #undef 
stpcpy


40 #ifdef 
__USE_BSD


41 #undef 
bcopy


42 #undef 
bzero


47 
__fortify_function
 void *

48 
__NTH
 (
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

49 
size_t
 
__len
))

51 return 
	`__builtin___memcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__fortify_function
 void *

55 
__NTH
 (
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__len
))

57 return 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifdef 
__USE_GNU


61 
__fortify_function
 void *

62 
__NTH
 (
	$mempcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

63 
size_t
 
__len
))

65 return 
	`__builtin___mempcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__fortify_function
 void *

76 
__NTH
 (
	$memset
 (void *
__dest
, int 
__ch
, 
size_t
 
__len
))

78 if (
	`__builtin_constant_p
 (
__len
) && __len == 0

79 && (!
	`__builtin_constant_p
 (
__ch
) || __ch != 0))

81 
	`__warn_memset_zero_len
 ();

82 return 
__dest
;

84 return 
	`__builtin___memset_chk
 (
__dest
, 
__ch
, 
__len
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifdef 
__USE_BSD


88 
__fortify_function
 void

89 
__NTH
 (
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__len
))

91 (void) 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__fortify_function
 void

95 
__NTH
 (
	$bzero
 (void *
__dest
, 
size_t
 
__len
))

97 (void) 
	`__builtin___memset_chk
 (
__dest
, '\0', 
__len
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__fortify_function
 char *

102 
__NTH
 (
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

104 return 
	`__builtin___strcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifdef 
__USE_GNU


108 
__fortify_function
 char *

109 
__NTH
 (
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

111 return 
	`__builtin___stpcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

112 
	}
}

116 
__fortify_function
 char *

117 
__NTH
 (
	$strncpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

118 
size_t
 
__len
))

120 return 
	`__builtin___strncpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

121 
	}
}

124 extern char *
	$__stpncpy_chk
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

125 
size_t
 
__destlen
) 
__THROW
;

126 extern char *
	`__REDIRECT_NTH
 (
__stpncpy_alias
, (char *
__dest
, const char *
__src
,

127 
size_t
 
__n
), 
stpncpy
);

129 
__fortify_function
 char *

130 
	`__NTH
 (
	$stpncpy
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
))

132 if (
	`__bos
 (
__dest
) != (
size_t
) -1

133 && (!
	`__builtin_constant_p
 (
__n
) || __n <= 
	`__bos
 (
__dest
)))

134 return 
	`__stpncpy_chk
 (
__dest
, 
__src
, 
__n
, 
	`__bos
 (__dest));

135 return 
	`__stpncpy_alias
 (
__dest
, 
__src
, 
__n
);

136 
	}
}

139 
__fortify_function
 char *

140 
__NTH
 (
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

142 return 
	`__builtin___strcat_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

143 
	}
}

146 
__fortify_function
 char *

147 
__NTH
 (
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

148 
size_t
 
__len
))

150 return 
	`__builtin___strncat_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #ifndef 
_STDIO_H


25 #ifdef 
__USE_BSD


26 extern int 
sys_nerr
;

27 extern const char *const 
sys_errlist
[];

29 #ifdef 
__USE_GNU


30 extern int 
_sys_nerr
;

31 extern const char *const 
_sys_errlist
[];

	@/usr/include/bits/termios.h

19 #ifndef 
_TERMIOS_H


23 typedef unsigned char 
	tcc_t
;

24 typedef unsigned int 
	tspeed_t
;

25 typedef unsigned int 
	ttcflag_t
;

27 #define 
	#NCCS
 32

	)

28 struct 
	stermios


30 
tcflag_t
 
	mc_iflag
;

31 
tcflag_t
 
	mc_oflag
;

32 
tcflag_t
 
	mc_cflag
;

33 
tcflag_t
 
	mc_lflag
;

34 
cc_t
 
	mc_line
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
speed_t
 
	mc_ispeed
;

37 
speed_t
 
	mc_ospeed
;

38 #define 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 #define 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 #define 
	#VINTR
 0

	)

44 #define 
	#VQUIT
 1

	)

45 #define 
	#VERASE
 2

	)

46 #define 
	#VKILL
 3

	)

47 #define 
	#VEOF
 4

	)

48 #define 
	#VTIME
 5

	)

49 #define 
	#VMIN
 6

	)

50 #define 
	#VSWTC
 7

	)

51 #define 
	#VSTART
 8

	)

52 #define 
	#VSTOP
 9

	)

53 #define 
	#VSUSP
 10

	)

54 #define 
	#VEOL
 11

	)

55 #define 
	#VREPRINT
 12

	)

56 #define 
	#VDISCARD
 13

	)

57 #define 
	#VWERASE
 14

	)

58 #define 
	#VLNEXT
 15

	)

59 #define 
	#VEOL2
 16

	)

62 #define 
	#IGNBRK
 0000001

	)

63 #define 
	#BRKINT
 0000002

	)

64 #define 
	#IGNPAR
 0000004

	)

65 #define 
	#PARMRK
 0000010

	)

66 #define 
	#INPCK
 0000020

	)

67 #define 
	#ISTRIP
 0000040

	)

68 #define 
	#INLCR
 0000100

	)

69 #define 
	#IGNCR
 0000200

	)

70 #define 
	#ICRNL
 0000400

	)

71 #define 
	#IUCLC
 0001000

	)

72 #define 
	#IXON
 0002000

	)

73 #define 
	#IXANY
 0004000

	)

74 #define 
	#IXOFF
 0010000

	)

75 #define 
	#IMAXBEL
 0020000

	)

76 #define 
	#IUTF8
 0040000

	)

79 #define 
	#OPOST
 0000001

	)

80 #define 
	#OLCUC
 0000002

	)

81 #define 
	#ONLCR
 0000004

	)

82 #define 
	#OCRNL
 0000010

	)

83 #define 
	#ONOCR
 0000020

	)

84 #define 
	#ONLRET
 0000040

	)

85 #define 
	#OFILL
 0000100

	)

86 #define 
	#OFDEL
 0000200

	)

87 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


88 #define 
	#NLDLY
 0000400

	)

89 #define 
	#NL0
 0000000

	)

90 #define 
	#NL1
 0000400

	)

91 #define 
	#CRDLY
 0003000

	)

92 #define 
	#CR0
 0000000

	)

93 #define 
	#CR1
 0001000

	)

94 #define 
	#CR2
 0002000

	)

95 #define 
	#CR3
 0003000

	)

96 #define 
	#TABDLY
 0014000

	)

97 #define 
	#TAB0
 0000000

	)

98 #define 
	#TAB1
 0004000

	)

99 #define 
	#TAB2
 0010000

	)

100 #define 
	#TAB3
 0014000

	)

101 #define 
	#BSDLY
 0020000

	)

102 #define 
	#BS0
 0000000

	)

103 #define 
	#BS1
 0020000

	)

104 #define 
	#FFDLY
 0100000

	)

105 #define 
	#FF0
 0000000

	)

106 #define 
	#FF1
 0100000

	)

109 #define 
	#VTDLY
 0040000

	)

110 #define 
	#VT0
 0000000

	)

111 #define 
	#VT1
 0040000

	)

113 #ifdef 
__USE_MISC


114 #define 
	#XTABS
 0014000

	)

118 #ifdef 
__USE_MISC


119 #define 
	#CBAUD
 0010017

	)

121 #define 
	#B0
 0000000

	)

122 #define 
	#B50
 0000001

	)

123 #define 
	#B75
 0000002

	)

124 #define 
	#B110
 0000003

	)

125 #define 
	#B134
 0000004

	)

126 #define 
	#B150
 0000005

	)

127 #define 
	#B200
 0000006

	)

128 #define 
	#B300
 0000007

	)

129 #define 
	#B600
 0000010

	)

130 #define 
	#B1200
 0000011

	)

131 #define 
	#B1800
 0000012

	)

132 #define 
	#B2400
 0000013

	)

133 #define 
	#B4800
 0000014

	)

134 #define 
	#B9600
 0000015

	)

135 #define 
	#B19200
 0000016

	)

136 #define 
	#B38400
 0000017

	)

137 #ifdef 
__USE_MISC


138 #define 
	#EXTA
 
B19200


	)

139 #define 
	#EXTB
 
B38400


	)

141 #define 
	#CSIZE
 0000060

	)

142 #define 
	#CS5
 0000000

	)

143 #define 
	#CS6
 0000020

	)

144 #define 
	#CS7
 0000040

	)

145 #define 
	#CS8
 0000060

	)

146 #define 
	#CSTOPB
 0000100

	)

147 #define 
	#CREAD
 0000200

	)

148 #define 
	#PARENB
 0000400

	)

149 #define 
	#PARODD
 0001000

	)

150 #define 
	#HUPCL
 0002000

	)

151 #define 
	#CLOCAL
 0004000

	)

152 #ifdef 
__USE_MISC


153 #define 
	#CBAUDEX
 0010000

	)

155 #define 
	#B57600
 0010001

	)

156 #define 
	#B115200
 0010002

	)

157 #define 
	#B230400
 0010003

	)

158 #define 
	#B460800
 0010004

	)

159 #define 
	#B500000
 0010005

	)

160 #define 
	#B576000
 0010006

	)

161 #define 
	#B921600
 0010007

	)

162 #define 
	#B1000000
 0010010

	)

163 #define 
	#B1152000
 0010011

	)

164 #define 
	#B1500000
 0010012

	)

165 #define 
	#B2000000
 0010013

	)

166 #define 
	#B2500000
 0010014

	)

167 #define 
	#B3000000
 0010015

	)

168 #define 
	#B3500000
 0010016

	)

169 #define 
	#B4000000
 0010017

	)

170 #define 
	#__MAX_BAUD
 
B4000000


	)

171 #ifdef 
__USE_MISC


172 #define 
	#CIBAUD
 002003600000

	)

173 #define 
	#CMSPAR
 010000000000

	)

174 #define 
	#CRTSCTS
 020000000000

	)

178 #define 
	#ISIG
 0000001

	)

179 #define 
	#ICANON
 0000002

	)

180 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


181 #define 
	#XCASE
 0000004

	)

183 #define 
	#ECHO
 0000010

	)

184 #define 
	#ECHOE
 0000020

	)

185 #define 
	#ECHOK
 0000040

	)

186 #define 
	#ECHONL
 0000100

	)

187 #define 
	#NOFLSH
 0000200

	)

188 #define 
	#TOSTOP
 0000400

	)

189 #ifdef 
__USE_MISC


190 #define 
	#ECHOCTL
 0001000

	)

191 #define 
	#ECHOPRT
 0002000

	)

192 #define 
	#ECHOKE
 0004000

	)

193 #define 
	#FLUSHO
 0010000

	)

194 #define 
	#PENDIN
 0040000

	)

196 #define 
	#IEXTEN
 0100000

	)

197 #ifdef 
__USE_BSD


198 #define 
	#EXTPROC
 0200000

	)

202 #define 
	#TCOOFF
 0

	)

203 #define 
	#TCOON
 1

	)

204 #define 
	#TCIOFF
 2

	)

205 #define 
	#TCION
 3

	)

208 #define 
	#TCIFLUSH
 0

	)

209 #define 
	#TCOFLUSH
 1

	)

210 #define 
	#TCIOFLUSH
 2

	)

213 #define 
	#TCSANOW
 0

	)

214 #define 
	#TCSADRAIN
 1

	)

215 #define 
	#TCSAFLUSH
 2

	)

218 #define 
	#_IOT_termios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cflag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
speed_t
), 2)

	)

	@/usr/include/bits/types.h

23 #ifndef 
_BITS_TYPES_H


24 #define 
	#_BITS_TYPES_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/wordsize.h
>

30 typedef unsigned char 
	t__u_char
;

31 typedef unsigned short int 
	t__u_short
;

32 typedef unsigned int 
	t__u_int
;

33 typedef unsigned long int 
	t__u_long
;

36 typedef signed char 
	t__int8_t
;

37 typedef unsigned char 
	t__uint8_t
;

38 typedef signed short int 
	t__int16_t
;

39 typedef unsigned short int 
	t__uint16_t
;

40 typedef signed int 
	t__int32_t
;

41 typedef unsigned int 
	t__uint32_t
;

42 #if 
__WORDSIZE
 == 64

43 typedef signed long int 
	t__int64_t
;

44 typedef unsigned long int 
	t__uint64_t
;

45 #elif 
defined
 
__GLIBC_HAVE_LONG_LONG


46 
__extension__
 typedef signed long long int 
	t__int64_t
;

47 
__extension__
 typedef unsigned long long int 
	t__uint64_t
;

51 #if 
__WORDSIZE
 == 64

52 typedef long int 
	t__quad_t
;

53 typedef unsigned long int 
	t__u_quad_t
;

54 #elif 
defined
 
__GLIBC_HAVE_LONG_LONG


55 
__extension__
 typedef long long int 
	t__quad_t
;

56 
__extension__
 typedef unsigned long long int 
	t__u_quad_t
;

60 long 
	m__val
[2];

61 } 
	t__quad_t
;

64 
__u_long
 
	m__val
[2];

65 } 
	t__u_quad_t
;

98 #define 
	#__S16_TYPE
 short int

	)

99 #define 
	#__U16_TYPE
 unsigned short int

	)

100 #define 
	#__S32_TYPE
 int

	)

101 #define 
	#__U32_TYPE
 unsigned int

	)

102 #define 
	#__SLONGWORD_TYPE
 long int

	)

103 #define 
	#__ULONGWORD_TYPE
 unsigned long int

	)

104 #if 
__WORDSIZE
 == 32

105 #define 
	#__SQUAD_TYPE
 
__quad_t


	)

106 #define 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 #define 
	#__SWORD_TYPE
 int

	)

108 #define 
	#__UWORD_TYPE
 unsigned int

	)

109 #define 
	#__SLONG32_TYPE
 long int

	)

110 #define 
	#__ULONG32_TYPE
 unsigned long int

	)

111 #define 
	#__S64_TYPE
 
__quad_t


	)

112 #define 
	#__U64_TYPE
 
__u_quad_t


	)

115 #define 
	#__STD_TYPE
 
__extension__
 typedef

	)

116 #elif 
__WORDSIZE
 == 64

117 #define 
	t__SQUAD_TYPE
 long int

	)

118 #define 
	t__UQUAD_TYPE
 unsigned long int

	)

119 #define 
	t__SWORD_TYPE
 long int

	)

120 #define 
	t__UWORD_TYPE
 unsigned long int

	)

121 #define 
	t__SLONG32_TYPE
 int

	)

122 #define 
	t__ULONG32_TYPE
 unsigned int

	)

123 #define 
	t__S64_TYPE
 long int

	)

124 #define 
	t__U64_TYPE
 unsigned long int

	)

126 #define 
	t__STD_TYPE
 typedef

	)

130 #include 
	~<bits/typesizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__ino_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__ino64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__nlink_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__clock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__rlim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__rlim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__useconds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__suseconds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__clockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timer_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkcnt_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkcnt64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkcnt_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkcnt64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfilcnt_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfilcnt64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsword_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__syscall_slong_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__syscall_ulong_t
;

190 typedef 
__off64_t
 
	t__loff_t
;

191 typedef 
__quad_t
 *
	t__qaddr_t
;

192 typedef char *
	t__caddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__intptr_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__socklen_t
;

201 #undef 
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #ifndef 
_UNISTD_H


23 extern 
ssize_t
 
	$__read_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

24 
size_t
 
__buflen
) 
__wur
;

25 extern 
ssize_t
 
	`__REDIRECT
 (
__read_alias
, (int 
__fd
, void *
__buf
,

26 
size_t
 
__nbytes
), 
read
) 
__wur
;

27 extern 
ssize_t
 
	`__REDIRECT
 (
__read_chk_warn
,

28 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

29 
size_t
 
__buflen
), 
__read_chk
)

30 
__wur
 
	`__warnattr
 ("read called with bigger length than size of "

33 
__fortify_function
 
__wur
 
ssize_t


34 
	$read
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
)

36 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

38 if (!
	`__builtin_constant_p
 (
__nbytes
))

39 return 
	`__read_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
	`__bos0
 (__buf));

41 if (
__nbytes
 > 
	`__bos0
 (
__buf
))

42 return 
	`__read_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
	`__bos0
 (__buf));

44 return 
	`__read_alias
 (
__fd
, 
__buf
, 
__nbytes
);

45 
	}
}

47 #ifdef 
__USE_UNIX98


48 extern 
ssize_t
 
	$__pread_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

49 
__off_t
 
__offset
, 
size_t
 
__bufsize
) 
__wur
;

50 extern 
ssize_t
 
	$__pread64_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

51 
__off64_t
 
__offset
, 
size_t
 
__bufsize
) 
__wur
;

52 extern 
ssize_t
 
	`__REDIRECT
 (
__pread_alias
,

53 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

54 
__off_t
 
__offset
), 
pread
) 
__wur
;

55 extern 
ssize_t
 
	`__REDIRECT
 (
__pread64_alias
,

56 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

57 
__off64_t
 
__offset
), 
pread64
) 
__wur
;

58 extern 
ssize_t
 
	`__REDIRECT
 (
__pread_chk_warn
,

59 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

60 
__off_t
 
__offset
, 
size_t
 
__bufsize
), 
__pread_chk
)

61 
__wur
 
	`__warnattr
 ("pread called with bigger length than size of "

63 extern 
ssize_t
 
	`__REDIRECT
 (
__pread64_chk_warn
,

64 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

65 
__off64_t
 
__offset
, 
size_t
 
__bufsize
),

66 
__pread64_chk
)

67 
__wur
 
	`__warnattr
 ("pread64 called with bigger length than size of "

70 #ifndef 
__USE_FILE_OFFSET64


71 
__fortify_function
 
__wur
 
ssize_t


72 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off_t
 
__offset
)

74 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

76 if (!
	`__builtin_constant_p
 (
__nbytes
))

77 return 
	`__pread_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

79 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

80 return 
	`__pread_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

81 
	`__bos0
 (
__buf
));

83 return 
	`__pread_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

84 
	}
}

86 
__fortify_function
 
__wur
 
ssize_t


87 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off64_t
 
__offset
)

89 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

91 if (!
	`__builtin_constant_p
 (
__nbytes
))

92 return 
	`__pread64_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

94 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

95 return 
	`__pread64_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

96 
	`__bos0
 (
__buf
));

99 return 
	`__pread64_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

100 
	}
}

103 #ifdef 
__USE_LARGEFILE64


104 
__fortify_function
 
__wur
 
ssize_t


105 
	$pread64
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off64_t
 
__offset
)

107 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

109 if (!
	`__builtin_constant_p
 (
__nbytes
))

110 return 
	`__pread64_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

112 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

113 return 
	`__pread64_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

114 
	`__bos0
 (
__buf
));

117 return 
	`__pread64_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

118 
	}
}

122 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


123 extern 
ssize_t
 
	$__readlink_chk
 (const char *
__restrict
 
__path
,

124 char *
__restrict
 
__buf
, 
size_t
 
__len
,

125 
size_t
 
__buflen
)

126 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

127 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlink_alias
,

128 (const char *
__restrict
 
__path
,

129 char *
__restrict
 
__buf
, 
size_t
 
__len
), 
readlink
)

130 
	`__nonnull
 ((1, 2)) 
__wur
;

131 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlink_chk_warn
,

132 (const char *
__restrict
 
__path
,

133 char *
__restrict
 
__buf
, 
size_t
 
__len
,

134 
size_t
 
__buflen
), 
__readlink_chk
)

135 
	`__nonnull
 ((1, 2)) 
__wur
 
	`__warnattr
 ("readlink called with bigger length "

138 
__fortify_function
 
	`__nonnull
 ((1, 2)) 
__wur
 
ssize_t


139 
	`__NTH
 (
	$readlink
 (const char *
__restrict
 
__path
, char *__restrict 
__buf
,

140 
size_t
 
__len
))

142 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

144 if (!
	`__builtin_constant_p
 (
__len
))

145 return 
	`__readlink_chk
 (
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

147 if ( 
__len
 > 
	`__bos
 (
__buf
))

148 return 
	`__readlink_chk_warn
 (
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

150 return 
	`__readlink_alias
 (
__path
, 
__buf
, 
__len
);

151 
	}
}

154 #ifdef 
__USE_ATFILE


155 extern 
ssize_t
 
	$__readlinkat_chk
 (int 
__fd
, const char *
__restrict
 
__path
,

156 char *
__restrict
 
__buf
, 
size_t
 
__len
,

157 
size_t
 
__buflen
)

158 
__THROW
 
	`__nonnull
 ((2, 3)) 
__wur
;

159 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlinkat_alias
,

160 (int 
__fd
, const char *
__restrict
 
__path
,

161 char *
__restrict
 
__buf
, 
size_t
 
__len
),

162 
readlinkat
)

163 
	`__nonnull
 ((2, 3)) 
__wur
;

164 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlinkat_chk_warn
,

165 (int 
__fd
, const char *
__restrict
 
__path
,

166 char *
__restrict
 
__buf
, 
size_t
 
__len
,

167 
size_t
 
__buflen
), 
__readlinkat_chk
)

168 
	`__nonnull
 ((2, 3)) 
__wur
 
	`__warnattr
 ("readlinkat called with bigger "

172 
__fortify_function
 
	`__nonnull
 ((2, 3)) 
__wur
 
ssize_t


173 
	`__NTH
 (
	$readlinkat
 (int 
__fd
, const char *
__restrict
 
__path
,

174 char *
__restrict
 
__buf
, 
size_t
 
__len
))

176 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

178 if (!
	`__builtin_constant_p
 (
__len
))

179 return 
	`__readlinkat_chk
 (
__fd
, 
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

181 if (
__len
 > 
	`__bos
 (
__buf
))

182 return 
	`__readlinkat_chk_warn
 (
__fd
, 
__path
, 
__buf
, 
__len
,

183 
	`__bos
 (
__buf
));

185 return 
	`__readlinkat_alias
 (
__fd
, 
__path
, 
__buf
, 
__len
);

186 
	}
}

189 extern char *
	$__getcwd_chk
 (char *
__buf
, 
size_t
 
__size
, size_t 
__buflen
)

190 
__THROW
 
__wur
;

191 extern char *
	`__REDIRECT_NTH
 (
__getcwd_alias
,

192 (char *
__buf
, 
size_t
 
__size
), 
getcwd
) 
__wur
;

193 extern char *
	`__REDIRECT_NTH
 (
__getcwd_chk_warn
,

194 (char *
__buf
, 
size_t
 
__size
, size_t 
__buflen
),

195 
__getcwd_chk
)

196 
__wur
 
	`__warnattr
 ("getcwd caller with bigger length than size of "

199 
__fortify_function
 
__wur
 char *

200 
	`__NTH
 (
	$getcwd
 (char *
__buf
, 
size_t
 
__size
))

202 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

204 if (!
	`__builtin_constant_p
 (
__size
))

205 return 
	`__getcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 if (
__size
 > 
	`__bos
 (
__buf
))

208 return 
	`__getcwd_chk_warn
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210 return 
	`__getcwd_alias
 (
__buf
, 
__size
);

211 
	}
}

213 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


214 extern char *
	$__getwd_chk
 (char *
__buf
, 
size_t
 
buflen
)

215 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

216 extern char *
	`__REDIRECT_NTH
 (
__getwd_warn
, (char *
__buf
), 
getwd
)

217 
	`__nonnull
 ((1)) 
__wur
 
	`__warnattr
 ("please use getcwd instead, as getwd "

220 
__fortify_function
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
 
__wur
 char *

221 
	`__NTH
 (
	$getwd
 (char *
__buf
))

223 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

224 return 
	`__getwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225 return 
	`__getwd_warn
 (
__buf
);

226 
	}
}

229 extern 
size_t
 
	$__confstr_chk
 (int 
__name
, char *
__buf
, 
size_t
 
__len
,

230 
size_t
 
__buflen
) 
__THROW
;

231 extern 
size_t
 
	`__REDIRECT_NTH
 (
__confstr_alias
, (int 
__name
, char *
__buf
,

232 
size_t
 
__len
), 
confstr
);

233 extern 
size_t
 
	`__REDIRECT_NTH
 (
__confstr_chk_warn
,

234 (int 
__name
, char *
__buf
, 
size_t
 
__len
,

235 
size_t
 
__buflen
), 
__confstr_chk
)

236 
	`__warnattr
 ("confstr called with bigger length than size of destination "

239 
__fortify_function
 
size_t


240 
	`__NTH
 (
	$confstr
 (int 
__name
, char *
__buf
, 
size_t
 
__len
))

242 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

244 if (!
	`__builtin_constant_p
 (
__len
))

245 return 
	`__confstr_chk
 (
__name
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

247 if (
	`__bos
 (
__buf
) < 
__len
)

248 return 
	`__confstr_chk_warn
 (
__name
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

250 return 
	`__confstr_alias
 (
__name
, 
__buf
, 
__len
);

251 
	}
}

254 extern int 
	$__getgroups_chk
 (int 
__size
, 
__gid_t
 
__list
[], 
size_t
 
__listlen
)

255 
__THROW
 
__wur
;

256 extern int 
	`__REDIRECT_NTH
 (
__getgroups_alias
, (int 
__size
, 
__gid_t
 
__list
[]),

257 
getgroups
) 
__wur
;

258 extern int 
	`__REDIRECT_NTH
 (
__getgroups_chk_warn
,

259 (int 
__size
, 
__gid_t
 
__list
[], 
size_t
 
__listlen
),

260 
__getgroups_chk
)

261 
__wur
 
	`__warnattr
 ("getgroups called with bigger group count than what "

264 
__fortify_function
 int

265 
	`__NTH
 (
	$getgroups
 (int 
__size
, 
__gid_t
 
__list
[]))

267 if (
	`__bos
 (
__list
) != (
size_t
) -1)

269 if (!
	`__builtin_constant_p
 (
__size
) || __size < 0)

270 return 
	`__getgroups_chk
 (
__size
, 
__list
, 
	`__bos
 (__list));

272 if (
__size
 * sizeof (
__gid_t
) > 
	`__bos
 (
__list
))

273 return 
	`__getgroups_chk_warn
 (
__size
, 
__list
, 
	`__bos
 (__list));

275 return 
	`__getgroups_alias
 (
__size
, 
__list
);

276 
	}
}

279 extern int 
	$__ttyname_r_chk
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

280 
size_t
 
__nreal
) 
__THROW
 
	`__nonnull
 ((2));

281 extern int 
	`__REDIRECT_NTH
 (
__ttyname_r_alias
, (int 
__fd
, char *
__buf
,

282 
size_t
 
__buflen
), 
ttyname_r
)

283 
	`__nonnull
 ((2));

284 extern int 
	`__REDIRECT_NTH
 (
__ttyname_r_chk_warn
,

285 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

286 
size_t
 
__nreal
), 
__ttyname_r_chk
)

287 
	`__nonnull
 ((2)) 
	`__warnattr
 ("ttyname_r called with bigger buflen than "

290 
__fortify_function
 int

291 
	`__NTH
 (
	$ttyname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
))

293 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

295 if (!
	`__builtin_constant_p
 (
__buflen
))

296 return 
	`__ttyname_r_chk
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

298 if (
__buflen
 > 
	`__bos
 (
__buf
))

299 return 
	`__ttyname_r_chk_warn
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

301 return 
	`__ttyname_r_alias
 (
__fd
, 
__buf
, 
__buflen
);

302 
	}
}

305 #if 
defined
 
__USE_REENTRANT
 || defined 
__USE_POSIX199506


306 extern int 
	$__getlogin_r_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

307 
	`__nonnull
 ((1));

308 extern int 
	`__REDIRECT
 (
__getlogin_r_alias
, (char *
__buf
, 
size_t
 
__buflen
),

309 
getlogin_r
) 
	`__nonnull
 ((1));

310 extern int 
	`__REDIRECT
 (
__getlogin_r_chk_warn
,

311 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

312 
__getlogin_r_chk
)

313 
	`__nonnull
 ((1)) 
	`__warnattr
 ("getlogin_r called with bigger buflen than "

316 
__fortify_function
 int

317 
	$getlogin_r
 (char *
__buf
, 
size_t
 
__buflen
)

319 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

321 if (!
	`__builtin_constant_p
 (
__buflen
))

322 return 
	`__getlogin_r_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

324 if (
__buflen
 > 
	`__bos
 (
__buf
))

325 return 
	`__getlogin_r_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

327 return 
	`__getlogin_r_alias
 (
__buf
, 
__buflen
);

328 
	}
}

332 #if 
defined
 
__USE_BSD
 || defined 
__USE_UNIX98


333 extern int 
	$__gethostname_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

334 
__THROW
 
	`__nonnull
 ((1));

335 extern int 
	`__REDIRECT_NTH
 (
__gethostname_alias
, (char *
__buf
, 
size_t
 
__buflen
),

336 
gethostname
) 
	`__nonnull
 ((1));

337 extern int 
	`__REDIRECT_NTH
 (
__gethostname_chk_warn
,

338 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

339 
__gethostname_chk
)

340 
	`__nonnull
 ((1)) 
	`__warnattr
 ("gethostname called with bigger buflen than "

343 
__fortify_function
 int

344 
	`__NTH
 (
	$gethostname
 (char *
__buf
, 
size_t
 
__buflen
))

346 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

348 if (!
	`__builtin_constant_p
 (
__buflen
))

349 return 
	`__gethostname_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

351 if (
__buflen
 > 
	`__bos
 (
__buf
))

352 return 
	`__gethostname_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

354 return 
	`__gethostname_alias
 (
__buf
, 
__buflen
);

355 
	}
}

359 #if 
defined
 
__USE_BSD
 || (defined 
__USE_XOPEN
 && !defined 
__USE_UNIX98
)

360 extern int 
	$__getdomainname_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

361 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

362 extern int 
	`__REDIRECT_NTH
 (
__getdomainname_alias
, (char *
__buf
,

363 
size_t
 
__buflen
),

364 
getdomainname
) 
	`__nonnull
 ((1)) 
__wur
;

365 extern int 
	`__REDIRECT_NTH
 (
__getdomainname_chk_warn
,

366 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

367 
__getdomainname_chk
)

368 
	`__nonnull
 ((1)) 
__wur
 
	`__warnattr
 ("getdomainname called with bigger "

372 
__fortify_function
 int

373 
	`__NTH
 (
	$getdomainname
 (char *
__buf
, 
size_t
 
__buflen
))

375 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

377 if (!
	`__builtin_constant_p
 (
__buflen
))

378 return 
	`__getdomainname_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

380 if (
__buflen
 > 
	`__bos
 (
__buf
))

381 return 
	`__getdomainname_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

383 return 
	`__getdomainname_alias
 (
__buf
, 
__buflen
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #if !
defined
 
_SYS_WAIT_H
 && !defined 
_STDLIB_H


25 #define 
	#WNOHANG
 1

	)

26 #define 
	#WUNTRACED
 2

	)

29 #define 
	#WSTOPPED
 2

	)

30 #define 
	#WEXITED
 4

	)

31 #define 
	#WCONTINUED
 8

	)

32 #define 
	#WNOWAIT
 0x01000000

	)

34 #define 
	#__WNOTHREAD
 0x20000000

	)

36 #define 
	#__WALL
 0x40000000

	)

37 #define 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #if !
defined
 
_SYS_WAIT_H
 && !defined 
_STDLIB_H


28 #define 
	#__WEXITSTATUS
(
status
) (((status) & 0xff00) >> 8)

	)

31 #define 
	#__WTERMSIG
(
status
) ((status) & 0x7f)

	)

34 #define 
	#__WSTOPSIG
(
status
) 
	`__WEXITSTATUS
(status)

	)

37 #define 
	#__WIFEXITED
(
status
) (
	`__WTERMSIG
(status) == 0)

	)

40 #define 
	#__WIFSIGNALED
(
status
) \

41 (((signed char) (((
status
) & 0x7f) + 1) >> 1) > 0)

	)

44 #define 
	#__WIFSTOPPED
(
status
) (((status) & 0xff) == 0x7f)

	)

48 #ifdef 
WCONTINUED


49 #define 
	#__WIFCONTINUED
(
status
) ((status) == 
__W_CONTINUED
)

	)

53 #define 
	#__WCOREDUMP
(
status
) ((status) & 
__WCOREFLAG
)

	)

56 #define 
	#__W_EXITCODE
(
ret
, 
sig
) ((ret) << 8 | (sig))

	)

57 #define 
	#__W_STOPCODE
(
sig
) ((sig) << 8 | 0x7f)

	)

58 #define 
	#__W_CONTINUED
 0xffff

	)

59 #define 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 #include 
	~<endian.h
>

66 union 
	uwait


68 int 
	mw_status
;

71 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


72 unsigned int 
	m__w_termsig
:7;

73 unsigned int 
	m__w_coredump
:1;

74 unsigned int 
	m__w_retcode
:8;

77 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


79 unsigned int 
	m__w_retcode
:8;

80 unsigned int 
	m__w_coredump
:1;

81 unsigned int 
	m__w_termsig
:7;

83 } 
	m__wait_terminated
;

86 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


87 unsigned int 
	m__w_stopval
:8;

88 unsigned int 
	m__w_stopsig
:8;

91 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


93 unsigned int 
	m__w_stopsig
:8;

94 unsigned int 
	m__w_stopval
:8;

96 } 
	m__wait_stopped
;

99 #define 
	#w_termsig
 
__wait_terminated
.
__w_termsig


	)

100 #define 
	#w_coredump
 
__wait_terminated
.
__w_coredump


	)

101 #define 
	#w_retcode
 
__wait_terminated
.
__w_retcode


	)

102 #define 
	#w_stopsig
 
__wait_stopped
.
__w_stopsig


	)

103 #define 
	#w_stopval
 
__wait_stopped
.
__w_stopval


	)

	@/usr/include/endian.h

18 #ifndef 
_ENDIAN_H


19 #define 
	#_ENDIAN_H
 1

	)

21 #include 
	~<features.h
>

31 #define 
	#__LITTLE_ENDIAN
 1234

	)

32 #define 
	#__BIG_ENDIAN
 4321

	)

33 #define 
	#__PDP_ENDIAN
 3412

	)

36 #include 
	~<bits/endian.h
>

40 #ifndef 
__FLOAT_WORD_ORDER


41 #define 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 #define 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 #define 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 #define 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 #define 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


52 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) LO, 
	)
HI

53 #elif 
__BYTE_ORDER
 == 
__BIG_ENDIAN


54 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) HI, 
	)
LO

58 #if 
defined
 
__USE_BSD
 && !defined 
__ASSEMBLER__


60 #include 
	~<bits/byteswap.h
>

62 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


63 #define 
	#htobe16
(
x
) 
	`__bswap_16
 (x)

	)

64 #define 
	#htole16
(
x
) (x)

	)

65 #define 
	#be16toh
(
x
) 
	`__bswap_16
 (x)

	)

66 #define 
	#le16toh
(
x
) (x)

	)

68 #define 
	#htobe32
(
x
) 
	`__bswap_32
 (x)

	)

69 #define 
	#htole32
(
x
) (x)

	)

70 #define 
	#be32toh
(
x
) 
	`__bswap_32
 (x)

	)

71 #define 
	#le32toh
(
x
) (x)

	)

73 #if 
__GLIBC_HAVE_LONG_LONG


74 #define 
	#htobe64
(
x
) 
	`__bswap_64
 (x)

	)

75 #define 
	#htole64
(
x
) (x)

	)

76 #define 
	#be64toh
(
x
) 
	`__bswap_64
 (x)

	)

77 #define 
	#le64toh
(
x
) (x)

	)

81 #define 
	#htobe16
(
x
) (x)

	)

82 #define 
	#htole16
(
x
) 
	`__bswap_16
 (x)

	)

83 #define 
	#be16toh
(
x
) (x)

	)

84 #define 
	#le16toh
(
x
) 
	`__bswap_16
 (x)

	)

86 #define 
	#htobe32
(
x
) (x)

	)

87 #define 
	#htole32
(
x
) 
	`__bswap_32
 (x)

	)

88 #define 
	#be32toh
(
x
) (x)

	)

89 #define 
	#le32toh
(
x
) 
	`__bswap_32
 (x)

	)

91 #if 
__GLIBC_HAVE_LONG_LONG


92 #define 
	#htobe64
(
x
) (x)

	)

93 #define 
	#htole64
(
x
) 
	`__bswap_64
 (x)

	)

94 #define 
	#be64toh
(
x
) (x)

	)

95 #define 
	#le64toh
(
x
) 
	`__bswap_64
 (x)

	)

	@/usr/include/features.h

18 #ifndef 
_FEATURES_H


19 #define 
	#_FEATURES_H
 1

	)

98 #undef 
__USE_ISOC11


99 #undef 
__USE_ISOC99


100 #undef 
__USE_ISOC95


101 #undef 
__USE_ISOCXX11


102 #undef 
__USE_POSIX


103 #undef 
__USE_POSIX2


104 #undef 
__USE_POSIX199309


105 #undef 
__USE_POSIX199506


106 #undef 
__USE_XOPEN


107 #undef 
__USE_XOPEN_EXTENDED


108 #undef 
__USE_UNIX98


109 #undef 
__USE_XOPEN2K


110 #undef 
__USE_XOPEN2KXSI


111 #undef 
__USE_XOPEN2K8


112 #undef 
__USE_XOPEN2K8XSI


113 #undef 
__USE_LARGEFILE


114 #undef 
__USE_LARGEFILE64


115 #undef 
__USE_FILE_OFFSET64


116 #undef 
__USE_BSD


117 #undef 
__USE_SVID


118 #undef 
__USE_MISC


119 #undef 
__USE_ATFILE


120 #undef 
__USE_GNU


121 #undef 
__USE_REENTRANT


122 #undef 
__USE_FORTIFY_LEVEL


123 #undef 
__FAVOR_BSD


124 #undef 
__KERNEL_STRICT_NAMES


128 #ifndef 
_LOOSE_KERNEL_NAMES


129 #define 
	#__KERNEL_STRICT_NAMES


	)

133 #define 
	#__USE_ANSI
 1

	)

142 #if 
defined
 
__GNUC__
 && defined 
__GNUC_MINOR__


143 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) \

144 ((
__GNUC__
 << 16) + 
__GNUC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

146 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) 0

	)

151 #if 
defined
 
_BSD_SOURCE
 && \

152 !(
defined
 
	g_POSIX_SOURCE
 || defined 
	g_POSIX_C_SOURCE
 || \

153 
defined
 
	g_XOPEN_SOURCE
 || defined 
	g_GNU_SOURCE
 || defined 
	g_SVID_SOURCE
)

154 #define 
	#__FAVOR_BSD
 1

	)

158 #ifdef 
_GNU_SOURCE


159 #undef 
_ISOC95_SOURCE


160 #define 
	#_ISOC95_SOURCE
 1

	)

161 #undef 
_ISOC99_SOURCE


162 #define 
	#_ISOC99_SOURCE
 1

	)

163 #undef 
_ISOC11_SOURCE


164 #define 
	#_ISOC11_SOURCE
 1

	)

165 #undef 
_POSIX_SOURCE


166 #define 
	#_POSIX_SOURCE
 1

	)

167 #undef 
_POSIX_C_SOURCE


168 #define 
	#_POSIX_C_SOURCE
 200809L

	)

169 #undef 
_XOPEN_SOURCE


170 #define 
	#_XOPEN_SOURCE
 700

	)

171 #undef 
_XOPEN_SOURCE_EXTENDED


172 #define 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #undef 
_LARGEFILE64_SOURCE


174 #define 
	#_LARGEFILE64_SOURCE
 1

	)

175 #undef 
_BSD_SOURCE


176 #define 
	#_BSD_SOURCE
 1

	)

177 #undef 
_SVID_SOURCE


178 #define 
	#_SVID_SOURCE
 1

	)

179 #undef 
_ATFILE_SOURCE


180 #define 
	#_ATFILE_SOURCE
 1

	)

185 #if (!
defined
 
__STRICT_ANSI__
 && !defined 
_ISOC99_SOURCE
 && \

186 !
defined
 
	g_POSIX_SOURCE
 && !defined 
	g_POSIX_C_SOURCE
 && \

187 !
defined
 
	g_XOPEN_SOURCE
 && !defined 
	g_BSD_SOURCE
 && !defined 
	g_SVID_SOURCE
)

188 #define 
	#_BSD_SOURCE
 1

	)

189 #define 
	#_SVID_SOURCE
 1

	)

193 #if (
defined
 
_ISOC11_SOURCE
 \

194 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 #define 
	#__USE_ISOC11
 1

	)

199 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

200 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 #define 
	#__USE_ISOC99
 1

	)

205 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

206 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 #define 
	#__USE_ISOC95
 1

	)

214 #if ((
defined
 
__cplusplus
 && __cplusplus >= 201103L) \

215 || 
defined
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 #define 
	#__USE_ISOCXX11
 1

	)

221 #if ((!
defined
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE
)

223 #define 
	#_POSIX_SOURCE
 1

	)

224 #if 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 #define 
	#_POSIX_C_SOURCE
 2

	)

226 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 #define 
	#_POSIX_C_SOURCE
 199506L

	)

228 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 #define 
	#_POSIX_C_SOURCE
 200112L

	)

231 #define 
	#_POSIX_C_SOURCE
 200809L

	)

233 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #if 
defined
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >= 1 || defined 
_XOPEN_SOURCE


237 #define 
	#__USE_POSIX
 1

	)

240 #if 
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 2 || defined 
_XOPEN_SOURCE


241 #define 
	#__USE_POSIX2
 1

	)

244 #if (
_POSIX_C_SOURCE
 - 0) >= 199309L

245 #define 
	#__USE_POSIX199309
 1

	)

248 #if (
_POSIX_C_SOURCE
 - 0) >= 199506L

249 #define 
	#__USE_POSIX199506
 1

	)

252 #if (
_POSIX_C_SOURCE
 - 0) >= 200112L

253 #define 
	#__USE_XOPEN2K
 1

	)

254 #undef 
__USE_ISOC95


255 #define 
	#__USE_ISOC95
 1

	)

256 #undef 
__USE_ISOC99


257 #define 
	#__USE_ISOC99
 1

	)

260 #if (
_POSIX_C_SOURCE
 - 0) >= 200809L

261 #define 
	#__USE_XOPEN2K8
 1

	)

262 #undef 
_ATFILE_SOURCE


263 #define 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 #define 
	#__USE_XOPEN
 1

	)

268 #if (
_XOPEN_SOURCE
 - 0) >= 500

269 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

270 #define 
	#__USE_UNIX98
 1

	)

271 #undef 
_LARGEFILE_SOURCE


272 #define 
	#_LARGEFILE_SOURCE
 1

	)

273 #if (
_XOPEN_SOURCE
 - 0) >= 600

274 #if (
_XOPEN_SOURCE
 - 0) >= 700

275 #define 
	#__USE_XOPEN2K8
 1

	)

276 #define 
	#__USE_XOPEN2K8XSI
 1

	)

278 #define 
	#__USE_XOPEN2K
 1

	)

279 #define 
	#__USE_XOPEN2KXSI
 1

	)

280 #undef 
__USE_ISOC95


281 #define 
	#__USE_ISOC95
 1

	)

282 #undef 
__USE_ISOC99


283 #define 
	#__USE_ISOC99
 1

	)

286 #ifdef 
_XOPEN_SOURCE_EXTENDED


287 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifdef 
_LARGEFILE_SOURCE


293 #define 
	#__USE_LARGEFILE
 1

	)

296 #ifdef 
_LARGEFILE64_SOURCE


297 #define 
	#__USE_LARGEFILE64
 1

	)

300 #if 
defined
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 #define 
	#__USE_FILE_OFFSET64
 1

	)

304 #if 
defined
 
_BSD_SOURCE
 || defined 
_SVID_SOURCE


305 #define 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 #define 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 #define 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 #define 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 #define 
	#__USE_GNU
 1

	)

324 #if 
defined
 
_REENTRANT
 || defined 
_THREAD_SAFE


325 #define 
	#__USE_REENTRANT
 1

	)

328 #if 
defined
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #if !
defined
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #warning 
_FORTIFY_SOURCE
 
requires
 
compiling
 
with
 
optimization
 (-
O
)

331 #elif !
__GNUC_PREREQ
 (4, 1)

332 #warning 
_FORTIFY_SOURCE
 
requires
 
GCC
 4.1 
or
 
later


333 #elif 
_FORTIFY_SOURCE
 > 1

334 #define 
	#__USE_FORTIFY_LEVEL
 2

	)

336 #define 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #ifndef 
__USE_FORTIFY_LEVEL


340 #define 
	#__USE_FORTIFY_LEVEL
 0

	)

345 #include 
	~<stdc-predef.h
>

353 #undef 
__GNU_LIBRARY__


354 #define 
	#__GNU_LIBRARY__
 6

	)

358 #define 
	#__GLIBC__
 2

	)

359 #define 
	#__GLIBC_MINOR__
 17

	)

361 #define 
	#__GLIBC_PREREQ
(
maj
, 
min
) \

362 ((
__GLIBC__
 << 16) + 
__GLIBC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

365 #if 
defined
 
__GNUC__
 \

366 || (
defined
 
	g__PGI
 && defined 
	g__i386__
 ) \

367 || (
defined
 
	g__INTEL_COMPILER
 && (defined 
	g__i386__
 || defined 
	g__ia64__
)) \

368 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 #define 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #ifndef 
__ASSEMBLER__


374 #ifndef 
_SYS_CDEFS_H


375 #include 
	~<sys/cdefs.h
>

380 #if 
defined
 
__USE_FILE_OFFSET64
 && !defined 
__REDIRECT


381 #define 
	#__USE_LARGEFILE
 1

	)

382 #define 
	#__USE_LARGEFILE64
 1

	)

388 #if 
__GNUC_PREREQ
 (2, 7) && 
defined
 
__OPTIMIZE__
 \

389 && !
defined
 
	g__OPTIMIZE_SIZE__
 && !defined 
	g__NO_INLINE__
 \

390 && 
defined
 
	g__extern_inline


391 #define 
	#__USE_EXTERN_INLINES
 1

	)

399 #include 
	~<gnu/stubs.h
>

	@/usr/include/getopt.h

20 #ifndef 
_GETOPT_H


22 #ifndef 
__need_getopt


23 #define 
	#_GETOPT_H
 1

	)

33 #if !
defined
 
__GNU_LIBRARY__


34 #include 
	~<ctype.h
>

37 #ifndef 
__THROW


38 #ifndef 
__GNUC_PREREQ


39 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) (0)

	)

41 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

42 #define 
	#__THROW
 
	`throw
 ()

	)

44 #define 
	#__THROW


	)

48 #ifdef 
__cplusplus


58 extern char *
optarg
;

72 extern int 
optind
;

77 extern int 
opterr
;

81 extern int 
optopt
;

83 #ifndef 
__need_getopt


105 struct 
	soption


107 const char *
	gname
;

110 int 
	ghas_arg
;

111 int *
	gflag
;

112 int 
	gval
;

117 #define 
	#no_argument
 0

	)

118 #define 
	#required_argument
 1

	)

119 #define 
	#optional_argument
 2

	)

147 #ifdef 
__GNU_LIBRARY__


151 extern int 
getopt
 (int 
___argc
, char *const *
___argv
, const char *
__shortopts
)

152 
__THROW
;

154 #if 
defined
 
__need_getopt
 && defined 
__USE_POSIX2
 \

155 && !
defined
 
	g__USE_POSIX_IMPLICITLY
 && !defined 
	g__USE_GNU


159 #ifdef 
__REDIRECT


160 extern int 
__REDIRECT_NTH
 (
getopt
, (int 
___argc
, char *const *
___argv
,

161 const char *
__shortopts
),

162 
__posix_getopt
);

164 extern int 
__posix_getopt
 (int 
___argc
, char *const *
___argv
,

165 const char *
__shortopts
) 
__THROW
;

166 #define 
	#getopt
 
__posix_getopt


	)

170 extern int 
getopt
 ();

173 #ifndef 
__need_getopt


174 extern int 
getopt_long
 (int 
___argc
, char *const *
___argv
,

175 const char *
__shortopts
,

176 const struct 
option
 *
__longopts
, int *
__longind
)

177 
__THROW
;

178 extern int 
getopt_long_only
 (int 
___argc
, char *const *
___argv
,

179 const char *
__shortopts
,

180 const struct 
option
 *
__longopts
, int *
__longind
)

181 
__THROW
;

185 #ifdef 
__cplusplus


190 #undef 
__need_getopt


	@/usr/include/libio.h

29 #ifndef 
_IO_STDIO_H


30 #define 
	#_IO_STDIO_H


	)

32 #include 
	~<_G_config.h
>

34 #define 
	#_IO_fpos_t
 
_G_fpos_t


	)

35 #define 
	#_IO_fpos64_t
 
_G_fpos64_t


	)

36 #define 
	#_IO_size_t
 
size_t


	)

37 #define 
	#_IO_ssize_t
 
__ssize_t


	)

38 #define 
	#_IO_off_t
 
__off_t


	)

39 #define 
	#_IO_off64_t
 
__off64_t


	)

40 #define 
	#_IO_pid_t
 
__pid_t


	)

41 #define 
	#_IO_uid_t
 
__uid_t


	)

42 #define 
	#_IO_iconv_t
 
_G_iconv_t


	)

43 #define 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 #define 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 #define 
	#_IO_va_list
 
_G_va_list


	)

46 #define 
	#_IO_wint_t
 
wint_t


	)

49 #define 
	#__need___va_list


	)

50 #include 
	~<stdarg.h
>

51 #ifdef 
__GNUC_VA_LIST


52 #undef 
_IO_va_list


53 #define 
	#_IO_va_list
 
__gnuc_va_list


	)

56 #ifndef 
__P


57 #include 
	~<sys/cdefs.h
>

60 #define 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #ifndef 
EOF


63 #define 
	#EOF
 (-1)

	)

65 #ifndef 
NULL


66 #if 
defined
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ == 2 && 
__GNUC_MINOR__
 >= 8))

68 #define 
	#NULL
 (
__null
)

	)

70 #if !
defined
(
__cplusplus
)

71 #define 
	#NULL
 ((void*)0)

	)

73 #define 
	#NULL
 (0)

	)

78 #define 
	#_IOS_INPUT
 1

	)

79 #define 
	#_IOS_OUTPUT
 2

	)

80 #define 
	#_IOS_ATEND
 4

	)

81 #define 
	#_IOS_APPEND
 8

	)

82 #define 
	#_IOS_TRUNC
 16

	)

83 #define 
	#_IOS_NOCREATE
 32

	)

84 #define 
	#_IOS_NOREPLACE
 64

	)

85 #define 
	#_IOS_BIN
 128

	)

93 #define 
	#_IO_MAGIC
 0xFBAD0000

	)

94 #define 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 #define 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 #define 
	#_IO_USER_BUF
 1

	)

97 #define 
	#_IO_UNBUFFERED
 2

	)

98 #define 
	#_IO_NO_READS
 4

	)

99 #define 
	#_IO_NO_WRITES
 8

	)

100 #define 
	#_IO_EOF_SEEN
 0x10

	)

101 #define 
	#_IO_ERR_SEEN
 0x20

	)

102 #define 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 #define 
	#_IO_LINKED
 0x80

	)

104 #define 
	#_IO_IN_BACKUP
 0x100

	)

105 #define 
	#_IO_LINE_BUF
 0x200

	)

106 #define 
	#_IO_TIED_PUT_GET
 0x400

	)

107 #define 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 #define 
	#_IO_IS_APPENDING
 0x1000

	)

109 #define 
	#_IO_IS_FILEBUF
 0x2000

	)

110 #define 
	#_IO_BAD_SEEN
 0x4000

	)

111 #define 
	#_IO_USER_LOCK
 0x8000

	)

113 #define 
	#_IO_FLAGS2_MMAP
 1

	)

114 #define 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifdef 
_LIBC


116 #define 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 #define 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifdef 
_LIBC


120 #define 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 #define 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 #define 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 #define 
	#_IO_SKIPWS
 01

	)

127 #define 
	#_IO_LEFT
 02

	)

128 #define 
	#_IO_RIGHT
 04

	)

129 #define 
	#_IO_INTERNAL
 010

	)

130 #define 
	#_IO_DEC
 020

	)

131 #define 
	#_IO_OCT
 040

	)

132 #define 
	#_IO_HEX
 0100

	)

133 #define 
	#_IO_SHOWBASE
 0200

	)

134 #define 
	#_IO_SHOWPOINT
 0400

	)

135 #define 
	#_IO_UPPERCASE
 01000

	)

136 #define 
	#_IO_SHOWPOS
 02000

	)

137 #define 
	#_IO_SCIENTIFIC
 04000

	)

138 #define 
	#_IO_FIXED
 010000

	)

139 #define 
	#_IO_UNITBUF
 020000

	)

140 #define 
	#_IO_STDIO
 040000

	)

141 #define 
	#_IO_DONT_CLOSE
 0100000

	)

142 #define 
	#_IO_BOOLALPHA
 0200000

	)

145 struct 
_IO_jump_t
; struct 
	g_IO_FILE
;

148 #ifdef 
_IO_MTSAFE_IO


149 #if 
defined
 
__GLIBC__
 && __GLIBC__ >= 2

150 #include 
	~<bits/stdio-lock.h
>

155 typedef void 
	t_IO_lock_t
;

161 struct 
	s_IO_marker
 {

162 struct 
_IO_marker
 *
	m_next
;

163 struct 
_IO_FILE
 *
	m_sbuf
;

167 int 
	m_pos
;

169 void 
set_streampos
(
streampos
 
sp
) { 
	m_spos
 = sp; }

170 void 
set_offset
(int 
offset
) { 
	m_pos
 = offset; 
	m_spos
 = (
streampos
)(-2); }

171 
	mpublic
:

172 
streammarker
(
streambuf
 *
sb
);

173 ~
streammarker
();

174 int 
saving
() { return 
	m_spos
 == -2; }

175 int 
delta
(
streammarker
&);

176 int 
delta
();

181 enum 
	e__codecvt_result


183 
	m__codecvt_ok
,

184 
	m__codecvt_partial
,

185 
	m__codecvt_error
,

186 
	m__codecvt_noconv


189 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


192 struct 
	s_IO_codecvt


194 void (*
	m__codecvt_destr
) (struct 
	m_IO_codecvt
 *);

195 enum 
__codecvt_result
 (*
__codecvt_do_out
) (struct 
	m_IO_codecvt
 *,

196 
	m__mbstate_t
 *,

197 const 
	mwchar_t
 *,

198 const 
	mwchar_t
 *,

199 const 
	mwchar_t
 **, char *,

201 enum 
__codecvt_result
 (*
__codecvt_do_unshift
) (struct 
	m_IO_codecvt
 *,

202 
	m__mbstate_t
 *, char *,

204 enum 
__codecvt_result
 (*
__codecvt_do_in
) (struct 
	m_IO_codecvt
 *,

205 
	m__mbstate_t
 *,

207 const char **, 
	mwchar_t
 *,

208 
	mwchar_t
 *, wchar_t **);

209 int (*
	m__codecvt_do_encoding
) (struct 
	m_IO_codecvt
 *);

210 int (*
	m__codecvt_do_always_noconv
) (struct 
	m_IO_codecvt
 *);

211 int (*
	m__codecvt_do_length
) (struct 
	m_IO_codecvt
 *, 
	m__mbstate_t
 *,

212 const char *, const char *, 
	m_IO_size_t
);

213 int (*
	m__codecvt_do_max_length
) (struct 
	m_IO_codecvt
 *);

215 
_IO_iconv_t
 
	m__cd_in
;

216 
_IO_iconv_t
 
	m__cd_out
;

220 struct 
	s_IO_wide_data


222 
wchar_t
 *
	m_IO_read_ptr
;

223 
wchar_t
 *
	m_IO_read_end
;

224 
wchar_t
 *
	m_IO_read_base
;

225 
wchar_t
 *
	m_IO_write_base
;

226 
wchar_t
 *
	m_IO_write_ptr
;

227 
wchar_t
 *
	m_IO_write_end
;

228 
wchar_t
 *
	m_IO_buf_base
;

229 
wchar_t
 *
	m_IO_buf_end
;

231 
wchar_t
 *
	m_IO_save_base
;

232 
wchar_t
 *
	m_IO_backup_base
;

234 
wchar_t
 *
	m_IO_save_end
;

236 
__mbstate_t
 
	m_IO_state
;

237 
__mbstate_t
 
	m_IO_last_state
;

238 struct 
_IO_codecvt
 
	m_codecvt
;

240 
wchar_t
 
	m_shortbuf
[1];

242 const struct 
_IO_jump_t
 *
	m_wide_vtable
;

246 struct 
	s_IO_FILE
 {

247 int 
	m_flags
;

248 #define 
	#_IO_file_flags
 
_flags


	)

252 char* 
	m_IO_read_ptr
;

253 char* 
	m_IO_read_end
;

254 char* 
	m_IO_read_base
;

255 char* 
	m_IO_write_base
;

256 char* 
	m_IO_write_ptr
;

257 char* 
	m_IO_write_end
;

258 char* 
	m_IO_buf_base
;

259 char* 
	m_IO_buf_end
;

261 char *
	m_IO_save_base
;

262 char *
	m_IO_backup_base
;

263 char *
	m_IO_save_end
;

265 struct 
_IO_marker
 *
	m_markers
;

267 struct 
_IO_FILE
 *
	m_chain
;

269 int 
	m_fileno
;

271 int 
	m_blksize
;

273 int 
	m_flags2
;

275 
_IO_off_t
 
	m_old_offset
;

277 #define 
	#__HAVE_COLUMN


	)

279 unsigned short 
	m_cur_column
;

280 signed char 
	m_vtable_offset
;

281 char 
	m_shortbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifdef 
_IO_USE_OLD_IO_FILE


289 struct 
	s_IO_FILE_complete


291 struct 
_IO_FILE
 
	m_file
;

293 #if 
defined
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_offset
;

295 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


297 struct 
_IO_codecvt
 *
	m_codecvt
;

298 struct 
_IO_wide_data
 *
	m_wide_data
;

299 struct 
_IO_FILE
 *
	m_freeres_list
;

300 void *
	m_freeres_buf
;

301 
size_t
 
	m_freeres_size
;

303 void *
	m__pad1
;

304 void *
	m__pad2
;

305 void *
	m__pad3
;

306 void *
	m__pad4
;

307 
size_t
 
	m__pad5
;

309 int 
	m_mode
;

311 char 
	m_unused2
[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (
size_t
)];

315 #ifndef 
__cplusplus


316 typedef struct 
_IO_FILE
 
	t_IO_FILE
;

319 struct 
	g_IO_FILE_plus
;

321 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdin_
;

322 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdout_
;

323 extern struct 
_IO_FILE_plus
 
_IO_2_1_stderr_
;

324 #ifndef 
_LIBC


325 #define 
	#_IO_stdin
 ((
_IO_FILE
*)(&
_IO_2_1_stdin_
))

	)

326 #define 
	#_IO_stdout
 ((
_IO_FILE
*)(&
_IO_2_1_stdout_
))

	)

327 #define 
	#_IO_stderr
 ((
_IO_FILE
*)(&
_IO_2_1_stderr_
))

	)

329 extern 
_IO_FILE
 *
_IO_stdin
 
attribute_hidden
;

330 extern 
_IO_FILE
 *
_IO_stdout
 
attribute_hidden
;

331 extern 
_IO_FILE
 *
_IO_stderr
 
attribute_hidden
;

339 typedef 
__ssize_t
 
	t__io_read_fn
 (void *
	t__cookie
, char *
	t__buf
, 
	tsize_t
 
	t__nbytes
);

347 typedef 
__ssize_t
 
	t__io_write_fn
 (void *
	t__cookie
, const char *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 typedef int 
	t__io_seek_fn
 (void *
	t__cookie
, 
	t_IO_off64_t
 *
	t__pos
, int 
	t__w
);

359 typedef int 
	t__io_close_fn
 (void *
	t__cookie
);

362 #ifdef 
_GNU_SOURCE


364 typedef 
__io_read_fn
 
	tcookie_read_function_t
;

365 typedef 
__io_write_fn
 
	tcookie_write_function_t
;

366 typedef 
__io_seek_fn
 
	tcookie_seek_function_t
;

367 typedef 
__io_close_fn
 
	tcookie_close_function_t
;

372 
__io_read_fn
 *
	mread
;

373 
__io_write_fn
 *
	mwrite
;

374 
__io_seek_fn
 *
	mseek
;

375 
__io_close_fn
 *
	mclose
;

376 } 
	t_IO_cookie_io_functions_t
;

377 typedef 
_IO_cookie_io_functions_t
 
	tcookie_io_functions_t
;

379 struct 
	g_IO_cookie_file
;

382 extern void 
_IO_cookie_init
 (struct 
_IO_cookie_file
 *
__cfile
, int 
__read_write
,

383 void *
__cookie
, 
_IO_cookie_io_functions_t
 
__fns
);

387 #ifdef 
__cplusplus


391 extern int 
__underflow
 (
_IO_FILE
 *);

392 extern int 
__uflow
 (
_IO_FILE
 *);

393 extern int 
__overflow
 (
_IO_FILE
 *, int);

394 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


395 extern 
_IO_wint_t
 
__wunderflow
 (
_IO_FILE
 *);

396 extern 
_IO_wint_t
 
__wuflow
 (
_IO_FILE
 *);

397 extern 
_IO_wint_t
 
__woverflow
 (
_IO_FILE
 *, _IO_wint_t);

400 #if 
__GNUC__
 >= 3

401 #define 
	#_IO_BE
(
expr
, 
res
) 
	`__builtin_expect
 ((expr), res)

	)

403 #define 
	#_IO_BE
(
expr
, 
res
) (expr)

	)

406 #define 
	#_IO_getc_unlocked
(
_fp
) \

407 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

408 ? 
	`__uflow
 (
_fp
) : *(unsigned char *) (_fp)->
_IO_read_ptr
++)

	)

409 #define 
	#_IO_peekc_unlocked
(
_fp
) \

410 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

411 && 
	`__underflow
 (
_fp
) == 
EOF
 ? EOF \

412 : *(unsigned char *) (
_fp
)->
_IO_read_ptr
)

	)

413 #define 
	#_IO_putc_unlocked
(
_ch
, 
_fp
) \

414 (
	`_IO_BE
 ((
_fp
)->
_IO_write_ptr
 >= (_fp)->
_IO_write_end
, 0) \

415 ? 
	`__overflow
 (
_fp
, (unsigned char) (
_ch
)) \

416 : (unsigned char) (*(
_fp
)->
_IO_write_ptr
++ = (
_ch
)))

	)

418 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


419 #define 
	#_IO_getwc_unlocked
(
_fp
) \

420 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

421 || ((
_fp
)->
_wide_data
->
_IO_read_ptr
 \

422 >= (
_fp
)->
_wide_data
->
_IO_read_end
), 0) \

423 ? 
	`__wuflow
 (
_fp
) : (
_IO_wint_t
) *(_fp)->
_wide_data
->
_IO_read_ptr
++)

	)

424 #define 
	#_IO_putwc_unlocked
(
_wch
, 
_fp
) \

425 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

426 || ((
_fp
)->
_wide_data
->
_IO_write_ptr
 \

427 >= (
_fp
)->
_wide_data
->
_IO_write_end
), 0) \

428 ? 
	`__woverflow
 (
_fp
, 
_wch
) \

429 : (
_IO_wint_t
) (*(
_fp
)->
_wide_data
->
_IO_write_ptr
++ = (
_wch
)))

	)

432 #define 
	#_IO_feof_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_EOF_SEEN
) != 0)

	)

433 #define 
	#_IO_ferror_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_ERR_SEEN
) != 0)

	)

435 extern int 
_IO_getc
 (
_IO_FILE
 *
__fp
);

436 extern int 
_IO_putc
 (int 
__c
, 
_IO_FILE
 *
__fp
);

437 extern int 
_IO_feof
 (
_IO_FILE
 *
__fp
) 
__THROW
;

438 extern int 
_IO_ferror
 (
_IO_FILE
 *
__fp
) 
__THROW
;

440 extern int 
_IO_peekc_locked
 (
_IO_FILE
 *
__fp
);

443 #define 
	#_IO_PENDING_OUTPUT_COUNT
(
_fp
) \

444 ((
_fp
)->
_IO_write_ptr
 - (_fp)->
_IO_write_base
)

	)

446 extern void 
_IO_flockfile
 (
_IO_FILE
 *) 
__THROW
;

447 extern void 
_IO_funlockfile
 (
_IO_FILE
 *) 
__THROW
;

448 extern int 
_IO_ftrylockfile
 (
_IO_FILE
 *) 
__THROW
;

450 #ifdef 
_IO_MTSAFE_IO


451 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_locked
 (_fp)

	)

452 #define 
	#_IO_flockfile
(
_fp
) \

453 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_flockfile
 (_fp)

	)

454 #define 
	#_IO_funlockfile
(
_fp
) \

455 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_funlockfile
 (_fp)

	)

457 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_unlocked
 (_fp)

	)

458 #define 
	#_IO_flockfile
(
_fp
)

	)

459 #define 
	#_IO_funlockfile
(
_fp
)

	)

460 #define 
	#_IO_ftrylockfile
(
_fp
)

	)

461 #define 
	#_IO_cleanup_region_start
(
_fct
, 
_fp
)

	)

462 #define 
	#_IO_cleanup_region_end
(
_Doit
)

	)

465 extern int 
_IO_vfscanf
 (
_IO_FILE
 * 
__restrict
, const char * __restrict,

466 
_IO_va_list
, int *
__restrict
);

467 extern int 
_IO_vfprintf
 (
_IO_FILE
 *
__restrict
, const char *__restrict,

468 
_IO_va_list
);

469 extern 
_IO_ssize_t
 
_IO_padn
 (
_IO_FILE
 *, int, _IO_ssize_t);

470 extern 
_IO_size_t
 
_IO_sgetn
 (
_IO_FILE
 *, void *, _IO_size_t);

472 extern 
_IO_off64_t
 
_IO_seekoff
 (
_IO_FILE
 *, _IO_off64_t, int, int);

473 extern 
_IO_off64_t
 
_IO_seekpos
 (
_IO_FILE
 *, _IO_off64_t, int);

475 extern void 
_IO_free_backup_area
 (
_IO_FILE
 *) 
__THROW
;

477 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


478 extern 
_IO_wint_t
 
_IO_getwc
 (
_IO_FILE
 *
__fp
);

479 extern 
_IO_wint_t
 
_IO_putwc
 (
wchar_t
 
__wc
, 
_IO_FILE
 *
__fp
);

480 extern int 
_IO_fwide
 (
_IO_FILE
 *
__fp
, int 
__mode
) 
__THROW
;

481 #if 
__GNUC__
 >= 2

484 #if 
defined
 
_LIBC
 && defined 
SHARED


485 #include 
	~<shlib-compat.h
>

486 #if 
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 #define 
	#_IO_fwide_maybe_incompatible
 \

488 (
	`__builtin_expect
 (&
_IO_stdin_used
 == 
NULL
, 0))

	)

489 extern const int 
_IO_stdin_used
;

490 
weak_extern
 (
_IO_stdin_used
);

493 #ifndef 
_IO_fwide_maybe_incompatible


494 #define 
	#_IO_fwide_maybe_incompatible
 (0)

	)

498 #define 
	#_IO_fwide
(
__fp
, 
__mode
) \

499 ({ int 
__result
 = (
__mode
); \

500 if (
__result
 < 0 && ! 
_IO_fwide_maybe_incompatible
) \

502 if ((
__fp
)->
_mode
 == 0) \

504 (
__fp
)->
_mode
 = -1; \

505 
__result
 = (
__fp
)->
_mode
; \

507 else if (
	`__builtin_constant_p
 (
__mode
) && (__mode) == 0) \

508 
__result
 = 
_IO_fwide_maybe_incompatible
 ? -1 : (
__fp
)->
_mode
; \

510 
__result
 = 
	`_IO_fwide
 (
__fp
, __result); \

511 
__result
; })

	)

514 extern int 
_IO_vfwscanf
 (
_IO_FILE
 * 
__restrict
, const 
wchar_t
 * __restrict,

515 
_IO_va_list
, int *
__restrict
);

516 extern int 
_IO_vfwprintf
 (
_IO_FILE
 *
__restrict
, const 
wchar_t
 *__restrict,

517 
_IO_va_list
);

518 extern 
_IO_ssize_t
 
_IO_wpadn
 (
_IO_FILE
 *, 
wint_t
, _IO_ssize_t);

519 extern void 
_IO_free_wbackup_area
 (
_IO_FILE
 *) 
__THROW
;

522 #ifdef 
__LDBL_COMPAT


523 #include 
	~<bits/libio-ldbl.h
>

526 #ifdef 
__cplusplus


	@/usr/include/sys/select.h

21 #ifndef 
_SYS_SELECT_H


22 #define 
	#_SYS_SELECT_H
 1

	)

24 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

30 #include 
	~<bits/select.h
>

33 #include 
	~<bits/sigset.h
>

35 #ifndef 
__sigset_t_defined


36 #define 
	#__sigset_t_defined


	)

37 typedef 
__sigset_t
 
	tsigset_t
;

41 #define 
	#__need_time_t


	)

42 #define 
	#__need_timespec


	)

43 #include 
	~<time.h
>

44 #define 
	#__need_timeval


	)

45 #include 
	~<bits/time.h
>

47 #ifndef 
__suseconds_t_defined


48 typedef 
__suseconds_t
 
	tsuseconds_t
;

49 #define 
	#__suseconds_t_defined


	)

54 typedef long int 
	t__fd_mask
;

57 #undef 
__NFDBITS


59 #define 
	#__NFDBITS
 (8 * (int) sizeof (
__fd_mask
))

	)

60 #define 
	#__FD_ELT
(
d
) ((d) / 
__NFDBITS
)

	)

61 #define 
	#__FD_MASK
(
d
) ((
__fd_mask
) 1 << ((d) % 
__NFDBITS
))

	)

68 #ifdef 
__USE_XOPEN


69 
__fd_mask
 
	mfds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 #define 
	#__FDS_BITS
(
set
) ((set)->
fds_bits
)

	)

72 
__fd_mask
 
	m__fds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 #define 
	#__FDS_BITS
(
set
) ((set)->
__fds_bits
)

	)

75 } 
	tfd_set
;

78 #define 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifdef 
__USE_MISC


82 typedef 
__fd_mask
 
	tfd_mask
;

85 #define 
	#NFDBITS
 
__NFDBITS


	)

90 #define 
	#FD_SET
(
fd
, 
fdsetp
) 
	`__FD_SET
 (fd, fdsetp)

	)

91 #define 
	#FD_CLR
(
fd
, 
fdsetp
) 
	`__FD_CLR
 (fd, fdsetp)

	)

92 #define 
	#FD_ISSET
(
fd
, 
fdsetp
) 
	`__FD_ISSET
 (fd, fdsetp)

	)

93 #define 
	#FD_ZERO
(
fdsetp
) 
	`__FD_ZERO
 (fdsetp)

	)

96 
__BEGIN_DECLS


106 extern int 
select
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

107 
fd_set
 *
__restrict
 
__writefds
,

108 
fd_set
 *
__restrict
 
__exceptfds
,

109 struct 
timeval
 *
__restrict
 
__timeout
);

111 #ifdef 
__USE_XOPEN2K


118 extern int 
pselect
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

119 
fd_set
 *
__restrict
 
__writefds
,

120 
fd_set
 *
__restrict
 
__exceptfds
,

121 const struct 
timespec
 *
__restrict
 
__timeout
,

122 const 
__sigset_t
 *
__restrict
 
__sigmask
);

127 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__GNUC__


128 #include 
	~<bits/select2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #ifndef 
_SYS_SYSMACROS_H


21 #define 
	#_SYS_SYSMACROS_H
 1

	)

23 #include 
	~<features.h
>

28 #ifdef 
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__extension__


32 extern unsigned int 
	$gnu_dev_major
 (unsigned long long int 
__dev
)

33 
__THROW
 
__attribute_const__
;

34 
__extension__


35 extern unsigned int 
	$gnu_dev_minor
 (unsigned long long int 
__dev
)

36 
__THROW
 
__attribute_const__
;

37 
__extension__


38 extern unsigned long long int 
	$gnu_dev_makedev
 (unsigned int 
__major
,

39 unsigned int 
__minor
)

40 
__THROW
 
__attribute_const__
;

42 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2 && defined 
__USE_EXTERN_INLINES


43 
__extension__
 
__extern_inline
 
__attribute_const__
 unsigned int

44 
	`__NTH
 (
	$gnu_dev_major
 (unsigned long long int 
__dev
))

46 return ((
__dev
 >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__extension__
 
__extern_inline
 
__attribute_const__
 unsigned int

50 
__NTH
 (
	$gnu_dev_minor
 (unsigned long long int 
__dev
))

52 return (
__dev
 & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);

53 
	}
}

55 
__extension__
 
__extern_inline
 
__attribute_const__
 unsigned long long int

56 
__NTH
 (
	$gnu_dev_makedev
 (unsigned int 
__major
, unsigned int 
__minor
))

58 return ((
__minor
 & 0xff) | ((
__major
 & 0xfff) << 8)

59 | (((unsigned long long int) (
__minor
 & ~0xff)) << 12)

60 | (((unsigned long long int) (
__major
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 #define 
	#major
(
dev
) 
	`gnu_dev_major
 (dev)

	)

67 #define 
	#minor
(
dev
) 
	`gnu_dev_minor
 (dev)

	)

68 #define 
	#makedev
(
maj
, 
min
) 
	`gnu_dev_makedev
 (maj, min)

	)

	@/usr/include/sys/ttydefaults.h

40 #ifndef 
_SYS_TTYDEFAULTS_H_


41 #define 
	#_SYS_TTYDEFAULTS_H_


	)

46 #define 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 #define 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 #define 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 #define 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 #define 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 #define 
	#CTRL
(
x
) (x&037)

	)

56 #define 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifdef 
_POSIX_VDISABLE


58 #define 
	#CEOL
 
_POSIX_VDISABLE


	)

60 #define 
	#CEOL
 '\0'

	)

62 #define 
	#CERASE
 0177

	)

63 #define 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifdef 
_POSIX_VDISABLE


65 #define 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 #define 
	#CSTATUS
 '\0'

	)

69 #define 
	#CKILL
 
	`CTRL
('u')

	)

70 #define 
	#CMIN
 1

	)

71 #define 
	#CQUIT
 034

	)

72 #define 
	#CSUSP
 
	`CTRL
('z')

	)

73 #define 
	#CTIME
 0

	)

74 #define 
	#CDSUSP
 
	`CTRL
('y')

	)

75 #define 
	#CSTART
 
	`CTRL
('q')

	)

76 #define 
	#CSTOP
 
	`CTRL
('s')

	)

77 #define 
	#CLNEXT
 
	`CTRL
('v')

	)

78 #define 
	#CDISCARD
 
	`CTRL
('o')

	)

79 #define 
	#CWERASE
 
	`CTRL
('w')

	)

80 #define 
	#CREPRINT
 
	`CTRL
('r')

	)

81 #define 
	#CEOT
 
CEOF


	)

83 #define 
	#CBRK
 
CEOL


	)

84 #define 
	#CRPRNT
 
CREPRINT


	)

85 #define 
	#CFLUSH
 
CDISCARD


	)

93 #ifdef 
TTYDEFCHARS


94 
cc_t
 
	gttydefchars
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #undef 
TTYDEFCHARS


	@/usr/include/time.h

22 #ifndef 
_TIME_H


24 #if (! 
defined
 
__need_time_t
 && !defined 
__need_clock_t
 && \

25 ! 
defined
 
	g__need_timespec
)

26 #define 
	#_TIME_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 #define 
	#__need_size_t


	)

36 #define 
	#__need_NULL


	)

37 #include 
	~<stddef.h
>

41 #include 
	~<bits/time.h
>

44 #if !
defined
 
__STRICT_ANSI__
 && !defined 
__USE_XOPEN2K


45 #ifndef 
CLK_TCK


46 #define 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #if !
defined
 
__clock_t_defined
 && (defined 
_TIME_H
 || defined 
__need_clock_t
)

53 #define 
	#__clock_t_defined
 1

	)

55 #include 
	~<bits/types.h
>

57 
__BEGIN_NAMESPACE_STD


59 typedef 
__clock_t
 
	tclock_t
;

60 
	g__END_NAMESPACE_STD


61 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
clock_t
)

66 #undef 
__need_clock_t


68 #if !
defined
 
__time_t_defined
 && (defined 
_TIME_H
 || defined 
__need_time_t
)

69 #define 
	#__time_t_defined
 1

	)

71 #include 
	~<bits/types.h
>

73 
__BEGIN_NAMESPACE_STD


75 typedef 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC
 || defined 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #undef 
__need_time_t


84 #if !
defined
 
__clockid_t_defined
 && \

85 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_clockid_t
)

86 #define 
	#__clockid_t_defined
 1

	)

88 #include 
	~<bits/types.h
>

91 typedef 
__clockid_t
 
	tclockid_t
;

94 #undef 
__clockid_time_t


96 #if !
defined
 
__timer_t_defined
 && \

97 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_timer_t
)

98 #define 
	#__timer_t_defined
 1

	)

100 #include 
	~<bits/types.h
>

103 typedef 
__timer_t
 
	ttimer_t
;

106 #undef 
__need_timer_t


109 #if (!
defined
 
__timespec_defined
 \

110 && ((
defined
 
_TIME_H
 \

111 && (
defined
 
__USE_POSIX199309
 || defined 
__USE_MISC
 \

112 || 
defined
 
__USE_ISOC11
)) \

113 || 
defined
 
__need_timespec
))

114 #define 
	#__timespec_defined
 1

	)

116 #include 
	~<bits/types.h
>

120 struct 
	stimespec


122 
__time_t
 
tv_sec
;

123 
__syscall_slong_t
 
tv_nsec
;

127 #undef 
__need_timespec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 struct 
	stm


135 int 
tm_sec
;

136 int 
tm_min
;

137 int 
tm_hour
;

138 int 
tm_mday
;

139 int 
tm_mon
;

140 int 
tm_year
;

141 int 
tm_wday
;

142 int 
tm_yday
;

143 int 
tm_isdst
;

145 #ifdef 
__USE_BSD


146 long int 
tm_gmtoff
;

147 const char *
tm_zone
;

149 long int 
__tm_gmtoff
;

150 const char *
__tm_zone
;

153 
__END_NAMESPACE_STD


154 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdef 
__USE_POSIX199309


161 struct 
	sitimerspec


163 struct 
timespec
 
it_interval
;

164 struct 
timespec
 
it_value
;

168 struct 
sigevent
;

172 #ifdef 
__USE_XOPEN2K


173 #ifndef 
__pid_t_defined


174 typedef 
__pid_t
 
	tpid_t
;

175 #define 
	#__pid_t_defined


	)

180 #ifdef 
__USE_ISOC11


182 #define 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 extern 
clock_t
 
	$clock
 (void) 
__THROW
;

192 extern 
time_t
 
	$time
 (
time_t
 *
__timer
) 
__THROW
;

195 extern double 
	$difftime
 (
time_t
 
__time1
, time_t 
__time0
)

196 
__THROW
 
	`__attribute__
 ((
__const__
));

199 extern 
time_t
 
	$mktime
 (struct 
tm
 *
__tp
) 
__THROW
;

205 extern 
size_t
 
	$strftime
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

206 const char *
__restrict
 
__format
,

207 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifdef 
__USE_XOPEN


213 extern char *
	$strptime
 (const char *
__restrict
 
__s
,

214 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
)

215 
__THROW
;

218 #ifdef 
__USE_XOPEN2K8


221 #include 
	~<xlocale.h
>

223 extern 
size_t
 
	$strftime_l
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

224 const char *
__restrict
 
__format
,

225 const struct 
tm
 *
__restrict
 
__tp
,

226 
__locale_t
 
__loc
) 
__THROW
;

229 #ifdef 
__USE_GNU


230 extern char *
	$strptime_l
 (const char *
__restrict
 
__s
,

231 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
,

232 
__locale_t
 
__loc
) 
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 extern struct 
tm
 *
	$gmtime
 (const 
time_t
 *
__timer
) 
__THROW
;

243 extern struct 
tm
 *
	$localtime
 (const 
time_t
 *
__timer
) 
__THROW
;

244 
__END_NAMESPACE_STD


246 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


249 extern struct 
tm
 *
	$gmtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

250 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

254 extern struct 
tm
 *
	$localtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

255 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 extern char *
	$asctime
 (const struct 
tm
 *
__tp
) 
__THROW
;

264 extern char *
	$ctime
 (const 
time_t
 *
__timer
) 
__THROW
;

265 
__END_NAMESPACE_STD


267 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


272 extern char *
	$asctime_r
 (const struct 
tm
 *
__restrict
 
__tp
,

273 char *
__restrict
 
__buf
) 
__THROW
;

276 extern char *
	$ctime_r
 (const 
time_t
 *
__restrict
 
__timer
,

277 char *
__restrict
 
__buf
) 
__THROW
;

282 extern char *
__tzname
[2];

283 extern int 
__daylight
;

284 extern long int 
__timezone
;

287 #ifdef 
__USE_POSIX


289 extern char *
tzname
[2];

293 extern void 
	$tzset
 (void) 
__THROW
;

296 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


297 extern int 
daylight
;

298 extern long int 
timezone
;

301 #ifdef 
__USE_SVID


304 extern int 
	$stime
 (const 
time_t
 *
__when
) 
__THROW
;

310 #define 
	#__isleap
(
year
) \

311 ((
year
) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))

	)

314 #ifdef 
__USE_MISC


319 extern 
time_t
 
	$timegm
 (struct 
tm
 *
__tp
) 
__THROW
;

322 extern 
time_t
 
	$timelocal
 (struct 
tm
 *
__tp
) 
__THROW
;

325 extern int 
	$dysize
 (int 
__year
) 
__THROW
 
	`__attribute__
 ((
__const__
));

329 #ifdef 
__USE_POSIX199309


334 extern int 
	`nanosleep
 (const struct 
timespec
 *
__requested_time
,

335 struct 
timespec
 *
__remaining
);

339 extern int 
	$clock_getres
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__res
) 
__THROW
;

342 extern int 
	$clock_gettime
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__tp
) 
__THROW
;

345 extern int 
	$clock_settime
 (
clockid_t
 
__clock_id
, const struct 
timespec
 *
__tp
)

346 
__THROW
;

348 #ifdef 
__USE_XOPEN2K


353 extern int 
	`clock_nanosleep
 (
clockid_t
 
__clock_id
, int 
__flags
,

354 const struct 
timespec
 *
__req
,

355 struct 
timespec
 *
__rem
);

358 extern int 
	$clock_getcpuclockid
 (
pid_t
 
__pid
, 
clockid_t
 *
__clock_id
) 
__THROW
;

363 extern int 
	$timer_create
 (
clockid_t
 
__clock_id
,

364 struct 
sigevent
 *
__restrict
 
__evp
,

365 
timer_t
 *
__restrict
 
__timerid
) 
__THROW
;

368 extern int 
	$timer_delete
 (
timer_t
 
__timerid
) 
__THROW
;

371 extern int 
	$timer_settime
 (
timer_t
 
__timerid
, int 
__flags
,

372 const struct 
itimerspec
 *
__restrict
 
__value
,

373 struct 
itimerspec
 *
__restrict
 
__ovalue
) 
__THROW
;

376 extern int 
	$timer_gettime
 (
timer_t
 
__timerid
, struct 
itimerspec
 *
__value
)

377 
__THROW
;

380 extern int 
	$timer_getoverrun
 (
timer_t
 
__timerid
) 
__THROW
;

384 #ifdef 
__USE_ISOC11


386 extern int 
	$timespec_get
 (struct 
timespec
 *
__ts
, int 
__base
)

387 
__THROW
 
	`__nonnull
 ((1));

391 #ifdef 
__USE_XOPEN_EXTENDED


403 extern int 
getdate_err
;

412 extern struct 
tm
 *
	`getdate
 (const char *
__string
);

415 #ifdef 
__USE_GNU


426 extern int 
	`getdate_r
 (const char *
__restrict
 
__string
,

427 struct 
tm
 *
__restrict
 
__resbufp
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #ifndef 
_XLOCALE_H


21 #define 
	#_XLOCALE_H
 1

	)

27 typedef struct 
	s__locale_struct


30 struct 
__locale_data
 *
	m__locales
[13];

33 const unsigned short int *
	m__ctype_b
;

34 const int *
	m__ctype_tolower
;

35 const int *
	m__ctype_toupper
;

38 const char *
	m__names
[13];

39 } *
	t__locale_t
;

42 typedef 
__locale_t
 
	tlocale_t
;

	@/usr/include/_G_config.h

4 #ifndef 
_G_config_h


5 #define 
	#_G_config_h
 1

	)

9 #include 
	~<bits/types.h
>

10 #define 
	#__need_size_t


	)

11 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


12 #define 
	#__need_wchar_t


	)

14 #define 
	#__need_NULL


	)

15 #include 
	~<stddef.h
>

16 #define 
	#__need_mbstate_t


	)

17 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


18 #define 
	#__need_wint_t


	)

20 #include 
	~<wchar.h
>

23 
__off_t
 
	m__pos
;

24 
__mbstate_t
 
	m__state
;

25 } 
	t_G_fpos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mbstate_t
 
	m__state
;

30 } 
	t_G_fpos64_t
;

31 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


32 #include 
	~<gconv.h
>

35 struct 
__gconv_info
 
	m__cd
;

38 struct 
__gconv_info
 
	m__cd
;

39 struct 
__gconv_step_data
 
	m__data
;

40 } 
	m__combined
;

41 } 
	t_G_iconv_t
;

46 #define 
	#_G_va_list
 
__gnuc_va_list


	)

48 #define 
	#_G_HAVE_MMAP
 1

	)

49 #define 
	#_G_HAVE_MREMAP
 1

	)

51 #define 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 #define 
	#_G_HAVE_ST_BLKSIZE
 
	`defined
 (
_STATBUF_ST_BLKSIZE
)

	)

56 #define 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 #include 
	~<asm-generic/ioctls.h
>

	@/usr/include/bits/byteswap.h

19 #if !
defined
 
_BYTESWAP_H
 && !defined 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_BYTESWAP_H


24 #define 
	#_BITS_BYTESWAP_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

28 #include 
	~<bits/wordsize.h
>

31 #define 
	#__bswap_constant_16
(
x
) \

32 ((unsigned short int) ((((
x
) >> 8) & 0xff) | (((x) & 0xff) << 8)))

	)

35 #include 
	~<bits/byteswap-16.h
>

38 #define 
	#__bswap_constant_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24))

	)

42 #ifdef 
__GNUC__


43 #if 
__GNUC_PREREQ
 (4, 3)

44 static 
__inline
 unsigned int

45 
	$__bswap_32
 (unsigned int 
__bsx
)

47 return 
	`__builtin_bswap32
 (
__bsx
);

48 
	}
}

49 #elif 
__GNUC__
 >= 2

50 #if 
__WORDSIZE
 == 64 || (
defined
 
__i486__
 || defined 
__pentium__
 \

51 || 
defined
 
	g__pentiumpro__
 || defined 
	g__pentium4__
 \

52 || 
defined
 
	g__k8__
 || defined 
	g__athlon__
 \

53 || 
defined
 
	g__k6__
 || defined 
	g__nocona__
 \

54 || 
defined
 
	g__core2__
 || defined 
	g__geode__
 \

55 || 
defined
 
	g__amdfam10__
)

58 #define 
	#__bswap_32
(
x
) \

59 (
__extension__
 \

60 ({ unsigned int 
__v
, 
__x
 = (
x
); \

61 if (
	`__builtin_constant_p
 (
__x
)) \

62 
__v
 = 
	`__bswap_constant_32
 (
__x
); \

64 
	`__asm__
 ("bswap %0" : "=r" (
__v
) : "0" (
__x
)); \

65 
__v
; }))

	)

67 #define 
	#__bswap_32
(
x
) \

68 (
__extension__
 \

69 ({ unsigned int 
__v
, 
__x
 = (
x
); \

70 if (
	`__builtin_constant_p
 (
__x
)) \

71 
__v
 = 
	`__bswap_constant_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "=r" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 #define 
	#__bswap_32
(
x
) \

83 (
__extension__
 \

84 ({ unsigned int 
__x
 = (
x
); 
	`__bswap_constant_32
 (__x); }))

	)

87 static 
__inline
 unsigned int

88 
	$__bswap_32
 (unsigned int 
__bsx
)

90 return 
	`__bswap_constant_32
 (
__bsx
);

91 
	}
}

95 #if 
__GNUC_PREREQ
 (2, 0)

97 #define 
	#__bswap_constant_64
(
x
) \

98 (
	`__extension__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
) & 0x00000000000000ffull) << 56)))

	)

107 #if 
__GNUC_PREREQ
 (4, 3)

108 static 
__inline
 
__uint64_t


109 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

111 return 
	`__builtin_bswap64
 (
__bsx
);

112 
	}
}

113 #elif 
__WORDSIZE
 == 64

114 #define 
	#__bswap_64
(
x
) \

115 (
__extension__
 \

116 ({ 
__uint64_t
 
__v
, 
__x
 = (
x
); \

117 if (
	`__builtin_constant_p
 (
__x
)) \

118 
__v
 = 
	`__bswap_constant_64
 (
__x
); \

120 
	`__asm__
 ("bswap %q0" : "=r" (
__v
) : "0" (
__x
)); \

121 
__v
; }))

	)

123 #define 
	#__bswap_64
(
x
) \

124 (
__extension__
 \

125 ({ union { 
__extension__
 
__uint64_t
 
__ll
; \

126 unsigned int 
__l
[2]; } 
__w
, 
__r
; \

127 if (
	`__builtin_constant_p
 (
x
)) \

128 
__r
.
__ll
 = 
	`__bswap_constant_64
 (
x
); \

131 
__w
.
__ll
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bswap_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bswap_32
 (
__w
.__l[0]); \

135 
__r
.
__ll
; }))

	)

137 #elif 
__GLIBC_HAVE_LONG_LONG


138 #define 
	#__bswap_constant_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
) & 0x00000000000000ffull) << 56))

	)

148 static 
__inline
 
__uint64_t


149 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

151 return 
	`__bswap_constant_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #ifndef 
_ENDIAN_H


7 #define 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

19 #ifndef 
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfscanf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vfprintf
)

	@/usr/include/bits/select.h

18 #ifndef 
_SYS_SELECT_H


22 #include 
	~<bits/wordsize.h
>

25 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

27 #if 
__WORDSIZE
 == 64

28 #define 
	#__FD_ZERO_STOS
 "stosq"

	)

30 #define 
	#__FD_ZERO_STOS
 "stosl"

	)

33 #define 
	#__FD_ZERO
(
fdsp
) \

35 int 
__d0
, 
__d1
; \

36 
__asm__
 
	`__volatile__
 ("cld; rep; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" (sizeof (
fd_set
) \

39 / sizeof (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fdsp
)[0]) \

42 } while (0)

	)

48 #define 
	#__FD_ZERO
(
set
) \

50 unsigned int 
__i
; \

51 
fd_set
 *
__arr
 = (
set
); \

52 for (
__i
 = 0; __i < sizeof (
fd_set
) / sizeof (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__arr
)[
__i
] = 0; \

54 } while (0)

	)

58 #define 
	#__FD_SET
(
d
, 
set
) \

59 ((void) (
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] |= 
	`__FD_MASK
 (d)))

	)

60 #define 
	#__FD_CLR
(
d
, 
set
) \

61 ((void) (
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] &= ~
	`__FD_MASK
 (d)))

	)

62 #define 
	#__FD_ISSET
(
d
, 
set
) \

63 ((
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)) != 0)

	)

	@/usr/include/bits/select2.h

19 #ifndef 
_SYS_SELECT_H


24 extern long int 
__fdelt_chk
 (long int 
__d
);

25 extern long int 
	$__fdelt_warn
 (long int 
__d
)

26 
	`__warnattr
 ("bit outside of fd_set selected");

27 #undef 
__FD_ELT


28 #define 
	#__FD_ELT
(
d
) \

29 
__extension__
 \

30 ({ long int 
__d
 = (
d
); \

31 (
	`__builtin_constant_p
 (
__d
) \

32 ? (0 <= 
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdelt_warn
 (
__d
)) \

35 : 
	`__fdelt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #ifndef 
_SIGSET_H_types


21 #define 
	#_SIGSET_H_types
 1

	)

23 typedef int 
	t__sig_atomic_t
;

27 #define 
	#_SIGSET_NWORDS
 (1024 / (8 * sizeof (unsigned long int)))

	)

30 unsigned long int 
	m__val
[
_SIGSET_NWORDS
];

31 } 
	t__sigset_t
;

42 #if !
defined
 
_SIGSET_H_fns
 && defined 
_SIGNAL_H


43 #define 
	#_SIGSET_H_fns
 1

	)

45 #ifndef 
_EXTERN_INLINE


46 #define 
	#_EXTERN_INLINE
 
__extern_inline


	)

50 #define 
	#__sigmask
(
sig
) \

51 (((unsigned long int) 1) << (((
sig
) - 1) % (8 * sizeof (unsigned long int))))

	)

54 #define 
	#__sigword
(
sig
) (((sig) - 1) / (8 * sizeof (unsigned long int)))

	)

56 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

57 #define 
	#__sigemptyset
(
set
) \

58 (
	`__extension__
 ({ int 
__cnt
 = 
_SIGSET_NWORDS
; \

59 
sigset_t
 *
__set
 = (
set
); \

60 while (--
__cnt
 >= 0) 
__set
->
__val
[__cnt] = 0; \

61 0; }))

	)

62 #define 
	#__sigfillset
(
set
) \

63 (
	`__extension__
 ({ int 
__cnt
 = 
_SIGSET_NWORDS
; \

64 
sigset_t
 *
__set
 = (
set
); \

65 while (--
__cnt
 >= 0) 
__set
->
__val
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifdef 
__USE_GNU


72 #define 
	#__sigisemptyset
(
set
) \

73 (
	`__extension__
 ({ int 
__cnt
 = 
_SIGSET_NWORDS
; \

74 const 
sigset_t
 *
__set
 = (
set
); \

75 int 
__ret
 = 
__set
->
__val
[--
__cnt
]; \

76 while (!
__ret
 && --
__cnt
 >= 0) \

77 
__ret
 = 
__set
->
__val
[
__cnt
]; \

78 
__ret
 == 0; }))

	)

79 #define 
	#__sigandset
(
dest
, 
left
, 
right
) \

80 (
	`__extension__
 ({ int 
__cnt
 = 
_SIGSET_NWORDS
; \

81 
sigset_t
 *
__dest
 = (
dest
); \

82 const 
sigset_t
 *
__left
 = (
left
); \

83 const 
sigset_t
 *
__right
 = (
right
); \

84 while (--
__cnt
 >= 0) \

85 
__dest
->
__val
[
__cnt
] = (
__left
->__val[__cnt] \

86 & 
__right
->
__val
[
__cnt
]); \

87 0; }))

	)

88 #define 
	#__sigorset
(
dest
, 
left
, 
right
) \

89 (
	`__extension__
 ({ int 
__cnt
 = 
_SIGSET_NWORDS
; \

90 
sigset_t
 *
__dest
 = (
dest
); \

91 const 
sigset_t
 *
__left
 = (
left
); \

92 const 
sigset_t
 *
__right
 = (
right
); \

93 while (--
__cnt
 >= 0) \

94 
__dest
->
__val
[
__cnt
] = (
__left
->__val[__cnt] \

95 | 
__right
->
__val
[
__cnt
]); \

96 0; }))

	)

103 extern int 
__sigismember
 (const 
__sigset_t
 *, int);

104 extern int 
__sigaddset
 (
__sigset_t
 *, int);

105 extern int 
__sigdelset
 (
__sigset_t
 *, int);

107 #ifdef 
__USE_EXTERN_INLINES


108 #define 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 int \

110 
	`NAME
 (
CONST
 
__sigset_t
 *
__set
, int 
__sig
) \

112 unsigned long int 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 unsigned long int 
__word
 = 
	`__sigword
 (
__sig
); \

114 return 
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismember
, (
__set
->
__val
[
__word
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigaddset
, ((
__set
->
__val
[
__word
] |= 
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdelset
, ((
__set
->
__val
[
__word
] &= ~
__mask
), 0), )

121 #undef 
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #ifndef 
_BITS_STDIO_LOCK_H


20 #define 
	#_BITS_STDIO_LOCK_H
 1

	)

22 #include 
	~<bits/libc-lock.h
>

24 
	$__libc_lock_define_recursive
 (typedef, 
_IO_lock_t
)

27 #ifdef 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 #define 
	t_IO_lock_initializer
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #elif 
	t_IO_MTSAFE_IO


30 #error 
	tlibio
 
	tneeds
 
	trecursive
 
	tmutexes
 for 
	t_IO_MTSAFE_IO


33 #define 
	t_IO_lock_init
(
	t_name
) 
	t__libc_lock_init_recursive
 (_name)

	)

34 #define 
	t_IO_lock_fini
(
	t_name
) 
	t__libc_lock_fini_recursive
 (_name)

	)

35 #define 
	t_IO_lock_lock
(
	t_name
) 
	t__libc_lock_lock_recursive
 (_name)

	)

36 #define 
	t_IO_lock_trylock
(
	t_name
) 
	t__libc_lock_trylock_recursive
 (_name)

	)

37 #define 
	t_IO_lock_unlock
(
	t_name
) 
	t__libc_lock_unlock_recursive
 (_name)

	)

40 #define 
	t_IO_cleanup_region_start
(
	t_fct
, 
	t_fp
) \

41 
	t__libc_cleanup_region_start
 (((
	t_fp
)->
	t_flags
 & 
	t_IO_USER_LOCK
) == 0, 
	t_fct
, _fp)

	)

42 #define 
	t_IO_cleanup_region_start_noarg
(
	t_fct
) \

43 
	t__libc_cleanup_region_start
 (1, 
	t_fct
, 
	tNULL
)

	)

44 #define 
	t_IO_cleanup_region_end
(
	t_doit
) \

45 
	t__libc_cleanup_region_end
 (
	t_doit
)

	)

47 #if 
	tdefined
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 #define 
	t_IO_acquire_lock
(
	t_fp
) \

49 
	t_IO_cleanup_region_start
 ((void (*) (void *)) 
	t_IO_funlockfile
, (
	t_fp
)); \

50 
	`_IO_flockfile
 (
_fp
)

	)

52 #define 
	#_IO_release_lock
(
_fp
) \

53 
	`_IO_funlockfile
 (
_fp
); \

54 
	`_IO_cleanup_region_end
 (0)

	)

	@/usr/include/bits/time.h

23 #if 
defined
 
__need_timeval
 || defined 
__USE_GNU


24 #ifndef 
_STRUCT_TIMEVAL


25 #define 
	#_STRUCT_TIMEVAL
 1

	)

26 #include 
	~<bits/types.h
>

30 struct 
	stimeval


32 
__time_t
 
	mtv_sec
;

33 
__suseconds_t
 
	mtv_usec
;

38 #ifndef 
__need_timeval


39 #ifndef 
_BITS_TIME_H


40 #define 
	#_BITS_TIME_H
 1

	)

48 #define 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #if (!
defined
 
__STRICT_ANSI__
 || defined 
__USE_POSIX
) \

51 && !
defined
 
	g__USE_XOPEN2K


54 #include 
	~<bits/types.h
>

55 extern long int 
__sysconf
 (int);

56 #define 
	#CLK_TCK
 ((
__clock_t
) 
	`__sysconf
 (2))

	)

59 #ifdef 
__USE_POSIX199309


61 #define 
	#CLOCK_REALTIME
 0

	)

63 #define 
	#CLOCK_MONOTONIC
 1

	)

65 #define 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 #define 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 #define 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 #define 
	#CLOCK_REALTIME_COARSE
 5

	)

73 #define 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 #define 
	#CLOCK_BOOTTIME
 7

	)

77 #define 
	#CLOCK_REALTIME_ALARM
 8

	)

79 #define 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 #define 
	#CLOCK_TAI
 11

	)

84 #define 
	#TIMER_ABSTIME
 1

	)

87 #ifdef 
__USE_GNU


88 #include 
	~<bits/timex.h
>

90 
__BEGIN_DECLS


93 extern int 
	$clock_adjtime
 (
__clockid_t
 
__clock_id
, struct 
timex
 *
__utx
) 
__THROW
;

95 
__END_DECLS


101 #undef 
__need_timeval


	@/usr/include/bits/typesizes.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TYPESIZES_H


24 #define 
	#_BITS_TYPESIZES_H
 1

	)

30 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


31 #define 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 #define 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 #define 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 #define 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 #define 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 #define 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 #define 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 #define 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 #define 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 #define 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdef 
__x86_64__


45 #define 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 #define 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 #define 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 #define 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 #define 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 #define 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 #define 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 #define 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 #define 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 #define 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 #define 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 #define 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 #define 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 #define 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 #define 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 #define 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 #define 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 #define 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 #define 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 #define 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 #define 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 #define 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 #define 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 #define 
	#__TIMER_T_TYPE
 void *

	)

71 #define 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 #define 
	#__FSID_T_TYPE
 struct { int 
__val
[2]; }

	)

73 #define 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifdef 
__x86_64__


79 #define 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 #define 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 #define 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #if 
defined
 
__x86_64__
 && !defined 
__ILP32__


4 #define 
	#__WORDSIZE
 64

	)

6 #define 
	#__WORDSIZE
 32

	)

9 #ifdef 
__x86_64__


10 #define 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 #define 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/gnu/stubs.h

6 #if !
defined
 
__x86_64__


7 #include 
	~<gnu/stubs-32.h
>

9 #if 
defined
 
__x86_64__
 && defined 
__LP64__


10 #include 
	~<gnu/stubs-64.h
>

12 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


13 #include 
	~<gnu/stubs-x32.h
>

	@/usr/include/linux/errno.h

1 #include 
	~<asm/errno.h
>

	@/usr/include/stdc-predef.h

18 #ifndef 
_STDC_PREDEF_H


19 #define 
	#_STDC_PREDEF_H
 1

	)

30 #define 
	#__STDC_IEC_559__
 1

	)

31 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 #define 
	#__STDC_ISO_10646__
 201103L

	)

38 #define 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #ifndef 
_SYS_CDEFS_H


20 #define 
	#_SYS_CDEFS_H
 1

	)

23 #ifndef 
_FEATURES_H


24 #include 
	~<features.h
>

30 #if 
defined
 
__GNUC__
 && !defined 
__STDC__


35 #undef 
__P


36 #undef 
__PMT


38 #ifdef 
__GNUC__


42 #if 
__GNUC_PREREQ
 (4, 6) && !
defined
 
_LIBC


43 #define 
	#__LEAF
 , 
__leaf__


	)

44 #define 
	#__LEAF_ATTR
 
	`__attribute__
 ((
__leaf__
))

	)

46 #define 
	#__LEAF


	)

47 #define 
	#__LEAF_ATTR


	)

55 #if !
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (3, 3)

56 #define 
	#__THROW
 
	`__attribute__
 ((
__nothrow__
 
__LEAF
))

	)

57 #define 
	#__THROWNL
 
	`__attribute__
 ((
__nothrow__
))

	)

58 #define 
	#__NTH
(
fct
) 
	`__attribute__
 ((
__nothrow__
 
__LEAF
)) 
	)
fct

60 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

61 #define 
	#__THROW
 
	`throw
 ()

	)

62 #define 
	#__THROWNL
 
	`throw
 ()

	)

63 #define 
	#__NTH
(
fct
) 
__LEAF_ATTR
 fct 
	`throw
 ()

	)

65 #define 
	#__THROW


	)

66 #define 
	#__THROWNL


	)

67 #define 
	#__NTH
(
fct
) 
	)
fct

73 #define 
	#__inline


	)

75 #define 
	#__THROW


	)

76 #define 
	#__THROWNL


	)

77 #define 
	#__NTH
(
fct
) 
	)
fct

83 #define 
	#__P
(
args
) 
	)
args

84 #define 
	#__PMT
(
args
) 
	)
args

89 #define 
	#__CONCAT
(
x
,
y
) x ## 
	)
y

90 #define 
	#__STRING
(
x
) #x

	)

93 #define 
	#__ptr_t
 void *

	)

94 #define 
	#__long_double_t
 long double

	)

98 #ifdef 
__cplusplus


99 #define 
	#__BEGIN_DECLS
 extern "C" {

	)

100 #define 
	#__END_DECLS
 }

	)

102 #define 
	#__BEGIN_DECLS


	)

103 #define 
	#__END_DECLS


	)

112 #if 
defined
 
__cplusplus
 && defined 
_GLIBCPP_USE_NAMESPACES


113 #define 
	#__BEGIN_NAMESPACE_STD
 
namespace
 
std
 {

	)

114 #define 
	#__END_NAMESPACE_STD
 }

	)

115 #define 
	#__USING_NAMESPACE_STD
(
name
) 
using
 
std
::name;

	)

116 #define 
	#__BEGIN_NAMESPACE_C99
 
namespace
 
__c99
 {

	)

117 #define 
	#__END_NAMESPACE_C99
 }

	)

118 #define 
	#__USING_NAMESPACE_C99
(
name
) 
using
 
__c99
::name;

	)

123 #define 
	#__BEGIN_NAMESPACE_STD


	)

124 #define 
	#__END_NAMESPACE_STD


	)

125 #define 
	#__USING_NAMESPACE_STD
(
name
)

	)

126 #define 
	#__BEGIN_NAMESPACE_C99


	)

127 #define 
	#__END_NAMESPACE_C99


	)

128 #define 
	#__USING_NAMESPACE_C99
(
name
)

	)

133 #ifndef 
__BOUNDED_POINTERS__


134 #define 
	#__bounded


	)

135 #define 
	#__unbounded


	)

136 #define 
	#__ptrvalue


	)

141 #define 
	#__bos
(
ptr
) 
	`__builtin_object_size
 (ptr, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 #define 
	#__bos0
(
ptr
) 
	`__builtin_object_size
 (ptr, 0)

	)

144 #if 
__GNUC_PREREQ
 (4,3)

145 #define 
	#__warndecl
(
name
, 
msg
) \

146 extern void 
	`name
 (void) 
	`__attribute__
((
	`__warning__
 (
msg
)))

	)

147 #define 
	#__warnattr
(
msg
) 
	`__attribute__
((
	`__warning__
 (msg)))

	)

148 #define 
	#__errordecl
(
name
, 
msg
) \

149 extern void 
	`name
 (void) 
	`__attribute__
((
	`__error__
 (
msg
)))

	)

151 #define 
	#__warndecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

152 #define 
	#__warnattr
(
msg
)

	)

153 #define 
	#__errordecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

157 #if 
__GNUC_PREREQ
 (2,97)

159 #define 
	#__flexarr
 []

	)

161 #ifdef 
__GNUC__


162 #define 
	#__flexarr
 [0]

	)

164 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

165 #define 
	#__flexarr
 []

	)

168 #define 
	#__flexarr
 [1]

	)

184 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

186 #define 
	#__REDIRECT
(
name
, 
proto
, 
alias
) name proto 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

187 #ifdef 
__cplusplus


188 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

189 
name
 
proto
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

190 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

191 
name
 
proto
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

193 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

194 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROW


	)

195 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

196 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROWNL


	)

198 #define 
	#__ASMNAME
(
cname
) 
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cname)

	)

199 #define 
	#__ASMNAME2
(
prefix
, 
cname
) 
	`__STRING
 (prefix) 
	)
cname

212 #if !
defined
 
__GNUC__
 || __GNUC__ < 2

213 #define 
	#__attribute__
(
xyz
)

	)

219 #if 
__GNUC_PREREQ
 (2,96)

220 #define 
	#__attribute_malloc__
 
	`__attribute__
 ((
__malloc__
))

	)

222 #define 
	#__attribute_malloc__


	)

228 #if 
__GNUC_PREREQ
 (2,96)

229 #define 
	#__attribute_pure__
 
	`__attribute__
 ((
__pure__
))

	)

231 #define 
	#__attribute_pure__


	)

235 #if 
__GNUC_PREREQ
 (2,5)

236 #define 
	#__attribute_const__
 
	`__attribute__
 ((
__const__
))

	)

238 #define 
	#__attribute_const__


	)

244 #if 
__GNUC_PREREQ
 (3,1)

245 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__used__
))

	)

246 #define 
	#__attribute_noinline__
 
	`__attribute__
 ((
__noinline__
))

	)

248 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__unused__
))

	)

249 #define 
	#__attribute_noinline__


	)

253 #if 
__GNUC_PREREQ
 (3,2)

254 #define 
	#__attribute_deprecated__
 
	`__attribute__
 ((
__deprecated__
))

	)

256 #define 
	#__attribute_deprecated__


	)

265 #if 
__GNUC_PREREQ
 (2,8)

266 #define 
	#__attribute_format_arg__
(
x
) 
	`__attribute__
 ((
	`__format_arg__
 (x)))

	)

268 #define 
	#__attribute_format_arg__
(
x
)

	)

275 #if 
__GNUC_PREREQ
 (2,97)

276 #define 
	#__attribute_format_strfmon__
(
a
,
b
) \

277 
	`__attribute__
 ((
	`__format__
 (
__strfmon__
, 
a
, 
b
)))

	)

279 #define 
	#__attribute_format_strfmon__
(
a
,
b
)

	)

284 #if 
__GNUC_PREREQ
 (3,3)

285 #define 
	#__nonnull
(
params
) 
	`__attribute__
 ((
__nonnull__
 params))

	)

287 #define 
	#__nonnull
(
params
)

	)

292 #if 
__GNUC_PREREQ
 (3,4)

293 #define 
	#__attribute_warn_unused_result__
 \

294 
	`__attribute__
 ((
__warn_unused_result__
))

	)

295 #if 
__USE_FORTIFY_LEVEL
 > 0

296 #define 
	#__wur
 
__attribute_warn_unused_result__


	)

299 #define 
	#__attribute_warn_unused_result__


	)

301 #ifndef 
__wur


302 #define 
	#__wur


	)

306 #if 
__GNUC_PREREQ
 (3,2)

307 #define 
	#__always_inline
 
__inline
 
	`__attribute__
 ((
__always_inline__
))

	)

309 #define 
	#__always_inline
 
__inline


	)

314 #if 
__GNUC_PREREQ
 (4,3)

315 #define 
	#__attribute_artificial__
 
	`__attribute__
 ((
__artificial__
))

	)

317 #define 
	#__attribute_artificial__


	)

329 #if (!
defined
 
__cplusplus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
defined
 
__clang__
 && (defined 
__GNUC_STDC_INLINE__
 \

331 || 
defined
 
__GNUC_GNU_INLINE__
)))

332 #if 
defined
 
__GNUC_STDC_INLINE__
 || defined 
__cplusplus


333 #define 
	#__extern_inline
 extern 
__inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

334 #define 
	#__extern_always_inline
 \

335 extern 
__always_inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

337 #define 
	#__extern_inline
 extern 
__inline


	)

338 #define 
	#__extern_always_inline
 extern 
__always_inline


	)

342 #ifdef 
__extern_always_inline


343 #define 
	#__fortify_function
 
__extern_always_inline
 
__attribute_artificial__


	)

348 #if 
__GNUC_PREREQ
 (4,3)

349 #define 
	#__va_arg_pack
() 
	`__builtin_va_arg_pack
 ()

	)

350 #define 
	#__va_arg_pack_len
() 
	`__builtin_va_arg_pack_len
 ()

	)

357 #if !
__GNUC_PREREQ
 (2,8)

358 #define 
	#__extension__


	)

362 #if !
__GNUC_PREREQ
 (2,92)

363 #define 
	#__restrict


	)

369 #if 
__GNUC_PREREQ
 (3,1) && !
defined
 
__GNUG__


370 #define 
	#__restrict_arr
 
__restrict


	)

372 #ifdef 
__GNUC__


373 #define 
	#__restrict_arr


	)

375 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 #define 
	#__restrict_arr
 
restrict


	)

379 #define 
	#__restrict_arr


	)

384 #if 
__GNUC__
 >= 3

385 #define 
	#__glibc_unlikely
(
cond
) 
	`__builtin_expect
((cond), 0)

	)

386 #define 
	#__glibc_likely
(
cond
) 
	`__builtin_expect
((cond), 1)

	)

388 #define 
	#__glibc_unlikely
(
cond
) (cond)

	)

389 #define 
	#__glibc_likely
(
cond
) (cond)

	)

392 #include 
	~<bits/wordsize.h
>

394 #if 
defined
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defined 
__NO_LONG_DOUBLE_MATH


395 #define 
	#__LDBL_COMPAT
 1

	)

396 #ifdef 
__REDIRECT


397 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

398 #define 
	#__LDBL_REDIR
(
name
, 
proto
) \

399 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##name)

	)

400 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) 
	`__REDIRECT_NTH
 (name, proto, alias)

	)

401 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) \

402 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##name)

	)

403 #define 
	#__LDBL_REDIR1_DECL
(
name
, 
alias
) \

404 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 (#alias));

	)

405 #define 
	#__LDBL_REDIR_DECL
(
name
) \

406 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 ("__nldbl_" #name));

	)

407 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) \

408 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

409 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

410 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

413 #if !
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT


414 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) name 
	)
proto

415 #define 
	#__LDBL_REDIR
(
name
, 
proto
) name 
	)
proto

416 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) name proto 
__THROW


	)

417 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) name proto 
__THROW


	)

418 #define 
	#__LDBL_REDIR_DECL
(
name
)

	)

419 #ifdef 
__REDIRECT


420 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

421 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

422 
	`__REDIRECT_NTH
 (
name
, 
proto
, 
alias
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #ifndef 
__ASM_GENERIC_IOCTLS_H


2 #define 
	#__ASM_GENERIC_IOCTLS_H


	)

4 #include 
	~<linux/ioctl.h
>

19 #define 
	#TCGETS
 0x5401

	)

20 #define 
	#TCSETS
 0x5402

	)

21 #define 
	#TCSETSW
 0x5403

	)

22 #define 
	#TCSETSF
 0x5404

	)

23 #define 
	#TCGETA
 0x5405

	)

24 #define 
	#TCSETA
 0x5406

	)

25 #define 
	#TCSETAW
 0x5407

	)

26 #define 
	#TCSETAF
 0x5408

	)

27 #define 
	#TCSBRK
 0x5409

	)

28 #define 
	#TCXONC
 0x540A

	)

29 #define 
	#TCFLSH
 0x540B

	)

30 #define 
	#TIOCEXCL
 0x540C

	)

31 #define 
	#TIOCNXCL
 0x540D

	)

32 #define 
	#TIOCSCTTY
 0x540E

	)

33 #define 
	#TIOCGPGRP
 0x540F

	)

34 #define 
	#TIOCSPGRP
 0x5410

	)

35 #define 
	#TIOCOUTQ
 0x5411

	)

36 #define 
	#TIOCSTI
 0x5412

	)

37 #define 
	#TIOCGWINSZ
 0x5413

	)

38 #define 
	#TIOCSWINSZ
 0x5414

	)

39 #define 
	#TIOCMGET
 0x5415

	)

40 #define 
	#TIOCMBIS
 0x5416

	)

41 #define 
	#TIOCMBIC
 0x5417

	)

42 #define 
	#TIOCMSET
 0x5418

	)

43 #define 
	#TIOCGSOFTCAR
 0x5419

	)

44 #define 
	#TIOCSSOFTCAR
 0x541A

	)

45 #define 
	#FIONREAD
 0x541B

	)

46 #define 
	#TIOCINQ
 
FIONREAD


	)

47 #define 
	#TIOCLINUX
 0x541C

	)

48 #define 
	#TIOCCONS
 0x541D

	)

49 #define 
	#TIOCGSERIAL
 0x541E

	)

50 #define 
	#TIOCSSERIAL
 0x541F

	)

51 #define 
	#TIOCPKT
 0x5420

	)

52 #define 
	#FIONBIO
 0x5421

	)

53 #define 
	#TIOCNOTTY
 0x5422

	)

54 #define 
	#TIOCSETD
 0x5423

	)

55 #define 
	#TIOCGETD
 0x5424

	)

56 #define 
	#TCSBRKP
 0x5425

	)

57 #define 
	#TIOCSBRK
 0x5427

	)

58 #define 
	#TIOCCBRK
 0x5428

	)

59 #define 
	#TIOCGSID
 0x5429

	)

60 #define 
	#TCGETS2
 
	`_IOR
('T', 0x2A, struct 
termios2
)

	)

61 #define 
	#TCSETS2
 
	`_IOW
('T', 0x2B, struct 
termios2
)

	)

62 #define 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, struct 
termios2
)

	)

63 #define 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, struct 
termios2
)

	)

64 #define 
	#TIOCGRS485
 0x542E

	)

65 #ifndef 
TIOCSRS485


66 #define 
	#TIOCSRS485
 0x542F

	)

68 #define 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, unsigned int)

	)

69 #define 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, int)

	)

70 #define 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, unsigned int)

	)

71 #define 
	#TCGETX
 0x5432

	)

72 #define 
	#TCSETX
 0x5433

	)

73 #define 
	#TCSETXF
 0x5434

	)

74 #define 
	#TCSETXW
 0x5435

	)

75 #define 
	#TIOCSIG
 
	`_IOW
('T', 0x36, int)

	)

76 #define 
	#TIOCVHANGUP
 0x5437

	)

77 #define 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, int)

	)

78 #define 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, int)

	)

79 #define 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, int)

	)

81 #define 
	#FIONCLEX
 0x5450

	)

82 #define 
	#FIOCLEX
 0x5451

	)

83 #define 
	#FIOASYNC
 0x5452

	)

84 #define 
	#TIOCSERCONFIG
 0x5453

	)

85 #define 
	#TIOCSERGWILD
 0x5454

	)

86 #define 
	#TIOCSERSWILD
 0x5455

	)

87 #define 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 #define 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 #define 
	#TIOCSERGSTRUCT
 0x5458

	)

90 #define 
	#TIOCSERGETLSR
 0x5459

	)

91 #define 
	#TIOCSERGETMULTI
 0x545A

	)

92 #define 
	#TIOCSERSETMULTI
 0x545B

	)

94 #define 
	#TIOCMIWAIT
 0x545C

	)

95 #define 
	#TIOCGICOUNT
 0x545D

	)

101 #ifndef 
FIOQSIZE


102 #define 
	#FIOQSIZE
 0x5460

	)

106 #define 
	#TIOCPKT_DATA
 0

	)

107 #define 
	#TIOCPKT_FLUSHREAD
 1

	)

108 #define 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 #define 
	#TIOCPKT_STOP
 4

	)

110 #define 
	#TIOCPKT_START
 8

	)

111 #define 
	#TIOCPKT_NOSTOP
 16

	)

112 #define 
	#TIOCPKT_DOSTOP
 32

	)

113 #define 
	#TIOCPKT_IOCTL
 64

	)

115 #define 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 #include 
	~<asm-generic/errno.h
>

	@/usr/include/bits/byteswap-16.h

19 #ifndef 
_BITS_BYTESWAP_H


23 #ifdef 
__GNUC__


24 #if 
__GNUC__
 >= 2

25 #define 
	#__bswap_16
(
x
) \

26 (
__extension__
 \

27 ({ unsigned short int 
__v
, 
__x
 = (unsigned short int) (
x
); \

28 if (
	`__builtin_constant_p
 (
__x
)) \

29 
__v
 = 
	`__bswap_constant_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "=r" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 #define 
	#__bswap_16
(
x
) \

39 (
__extension__
 \

40 ({ unsigned short int 
__x
 = (unsigned short int) (
x
); \

41 
	`__bswap_constant_16
 (
__x
); }))

	)

44 static 
__inline
 unsigned short int

45 
	$__bswap_16
 (unsigned short int 
__bsx
)

47 return 
	`__bswap_constant_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

21 #ifndef 
_BITS_LIBC_LOCK_H


22 #define 
	#_BITS_LIBC_LOCK_H
 1

	)

24 #include 
	~<pthread.h
>

27 #ifdef 
_IO_MTSAFE_IO


28 typedef 
pthread_mutex_t
 
	t__libc_lock_t
;

29 typedef struct { 
pthread_mutex_t
 
	mmutex
; } 
	t__libc_lock_recursive_t
;

30 #ifdef 
__USE_UNIX98


31 typedef 
pthread_rwlock_t
 
	t__libc_rwlock_t
;

33 typedef struct 
__libc_rwlock_opaque__
 
	t__libc_rwlock_t
;

35 typedef 
__libc_lock_recursive_t
 
	t__rtld_lock_recursive_t
;

37 typedef struct 
__libc_lock_opaque__
 
	t__libc_lock_t
;

38 typedef struct 
__libc_lock_recursive_opaque__
 
	t__libc_lock_recursive_t
;

39 typedef struct 
__libc_rwlock_opaque__
 
	t__libc_rwlock_t
;

43 typedef 
pthread_key_t
 
	t__libc_key_t
;

52 #define 
	#__libc_lock_define
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 #define 
	#__libc_rwlock_define
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 #define 
	#__libc_lock_define_recursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_recursive_t
 
NAME
;

	)

58 #define 
	#__rtld_lock_define_recursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__rtld_lock_recursive_t
 
NAME
;

	)

70 #if 
__LT_SPINLOCK_INIT
 == 0

71 #define 
	#__libc_lock_define_initialized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 #define 
	#__libc_lock_define_initialized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 #define 
	#__libc_rwlock_define_initialized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 #define 
	#__libc_lock_define_initialized_recursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_recursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 #define 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 #define 
	#__rtld_lock_define_initialized_recursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__rtld_lock_recursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 #define 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #if 
defined
 
__PIC__


94 #define 
	#__libc_maybe_call
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__extension__
 ({ 
	`__typeof
 (
FUNC
) *
_fn
 = (FUNC); \

96 
_fn
 != 
NULL
 ? (*_fn) 
ARGS
 : 
ELSE
; }))

	)

98 #define 
	#__libc_maybe_call
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 != 
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 #define 
	#__libc_maybe_call2
(
FUNC
, 
ARGS
, 
ELSE
) 
	`__libc_maybe_call
 (
__
##FUNC, ARGS, ELSE)

	)

105 #define 
	#__libc_lock_init
(
NAME
) \

106 (
	`__libc_maybe_call2
 (
pthread_mutex_init
, (&(
NAME
), 
NULL
), 0))

	)

107 #define 
	#__libc_rwlock_init
(
NAME
) \

108 (
	`__libc_maybe_call
 (
__pthread_rwlock_init
, (&(
NAME
), 
NULL
), 0));

	)

111 #define 
	#__libc_lock_init_recursive
(
NAME
) \

113 if (
__pthread_mutex_init
 != 
NULL
) \

115 
pthread_mutexattr_t
 
__attr
; \

116 
	`__pthread_mutexattr_init
 (&
__attr
); \

117 
	`__pthread_mutexattr_settype
 (&
__attr
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__pthread_mutex_init
 (&(
NAME
).
mutex
, &
__attr
); \

119 
	`__pthread_mutexattr_destroy
 (&
__attr
); \

121 } while (0);

	)

122 #define 
	#__rtld_lock_init_recursive
(
NAME
) \

123 
	`__libc_lock_init_recursive
 (
NAME
)

	)

128 #define 
	#__libc_lock_fini
(
NAME
) \

129 (
	`__libc_maybe_call2
 (
pthread_mutex_destroy
, (&(
NAME
)), 0));

	)

130 #define 
	#__libc_rwlock_fini
(
NAME
) \

131 (
	`__libc_maybe_call
 (
__pthread_rwlock_destroy
, (&(
NAME
)), 0));

	)

134 #define 
	#__libc_lock_fini_recursive
(
NAME
) 
	`__libc_lock_fini
 ((NAME).
mutex
)

	)

135 #define 
	#__rtld_lock_fini_recursive
(
NAME
) 
	`__libc_lock_fini_recursive
 (NAME)

	)

138 #define 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_call2
 (
pthread_mutex_lock
, (&(
NAME
)), 0));

	)

140 #define 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_call
 (
__pthread_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 #define 
	#__libc_rwlock_wrlock
(
NAME
) \

143 (
	`__libc_maybe_call
 (
__pthread_rwlock_wrlock
, (&(
NAME
)), 0));

	)

146 #define 
	#__libc_lock_lock_recursive
(
NAME
) 
	`__libc_lock_lock
 ((NAME).
mutex
)

	)

149 #define 
	#__libc_lock_trylock
(
NAME
) \

150 (
	`__libc_maybe_call2
 (
pthread_mutex_trylock
, (&(
NAME
)), 0))

	)

151 #define 
	#__libc_rwlock_tryrdlock
(
NAME
) \

152 (
	`__libc_maybe_call
 (
__pthread_rwlock_tryrdlock
, (&(
NAME
)), 0))

	)

153 #define 
	#__libc_rwlock_trywrlock
(
NAME
) \

154 (
	`__libc_maybe_call
 (
__pthread_rwlock_trywrlock
, (&(
NAME
)), 0))

	)

157 #define 
	#__libc_lock_trylock_recursive
(
NAME
) 
	`__libc_lock_trylock
 ((NAME).
mutex
)

	)

158 #define 
	#__rtld_lock_trylock_recursive
(
NAME
) \

159 
	`__libc_lock_trylock_recursive
 (
NAME
)

	)

162 #define 
	#__libc_lock_unlock
(
NAME
) \

163 (
	`__libc_maybe_call2
 (
pthread_mutex_unlock
, (&(
NAME
)), 0));

	)

164 #define 
	#__libc_rwlock_unlock
(
NAME
) \

165 (
	`__libc_maybe_call
 (
__pthread_rwlock_unlock
, (&(
NAME
)), 0));

	)

168 #define 
	#__libc_lock_unlock_recursive
(
NAME
) 
	`__libc_lock_unlock
 ((NAME).
mutex
)

	)

170 #define 
	#__rtld_lock_lock_recursive
(
NAME
) 
	`__libc_lock_lock_recursive
 (NAME)

	)

171 #define 
	#__rtld_lock_unlock_recursive
(
NAME
) 
	`__libc_lock_unlock_recursive
 (NAME)

	)

174 #if 
PTHREAD_ONCE_INIT
 == 0

177 #define 
	#__libc_once_define
(
CLASS
, 
NAME
) \

178 
CLASS
 
pthread_once_t
 
NAME


	)

180 #define 
	#__libc_once_define
(
CLASS
, 
NAME
) \

181 
CLASS
 
pthread_once_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 #define 
	#__libc_once
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 if (
__pthread_once
 != 
NULL
) \

188 
	`__pthread_once
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 else if ((
ONCE_CONTROL
) == 
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } while (0)

	)

197 #define 
	#__libc_cleanup_region_start
(
DOIT
, 
FCT
, 
ARG
) \

198 { struct 
_pthread_cleanup_buffer
 
_buffer
; \

199 int 
_avail
 = (
DOIT
) && 
_pthread_cleanup_push_defer
 != 
NULL
; \

200 if (
_avail
) { \

201 
	`_pthread_cleanup_push_defer
 (&
_buffer
, (
FCT
), (
ARG
)); \

202 }

	)

205 #define 
	#__libc_cleanup_region_end
(
DOIT
) \

206 if (
_avail
) { \

207 
	`_pthread_cleanup_pop_restore
 (&
_buffer
, (
DOIT
)); \

209 }

	)

212 #define 
	#__libc_cleanup_end
(
DOIT
) \

213 if (
_avail
) { \

214 
	`_pthread_cleanup_pop_restore
 (&
_buffer
, (
DOIT
)); \

215 }

	)

217 #define 
	#__libc_cleanup_push
(
fct
, 
arg
) \

218 { struct 
_pthread_cleanup_buffer
 
_buffer
; \

219 
	`__libc_maybe_call
 (
_pthread_cleanup_push
, (&
_buffer
, (
fct
), (
arg
)), 0)

	)

221 #define 
	#__libc_cleanup_pop
(
execute
) \

222 
	`__libc_maybe_call
 (
_pthread_cleanup_pop
, (&
_buffer
, 
execute
), 0); \

223 }

	)

226 #define 
	#__libc_key_create
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_call
 (
__pthread_key_create
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 #define 
	#__libc_getspecific
(
KEY
) \

231 (
	`__libc_maybe_call
 (
__pthread_getspecific
, (
KEY
), 
NULL
))

	)

234 #define 
	#__libc_setspecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_call
 (
__pthread_setspecific
, (
KEY
, 
VALUE
), 0))

	)

239 #define 
	#__libc_atfork
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_call
 (
__pthread_atfork
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 extern void 
_pthread_cleanup_push_defer
 (struct 
_pthread_cleanup_buffer
 *
__buffer
,

245 void (*
__routine
) (void *),

246 void *
__arg
) 
__THROW
;

248 extern void 
	$_pthread_cleanup_pop_restore
 (struct 
_pthread_cleanup_buffer
 *
__buffer
,

249 int 
__execute
) 
__THROW
;

255 extern int 
	`__pthread_mutex_init
 (
pthread_mutex_t
 *
__mutex
,

256 
__const
 
pthread_mutexattr_t
 *
__mutex_attr
);

258 extern int 
	`__pthread_mutex_destroy
 (
pthread_mutex_t
 *
__mutex
);

260 extern int 
	`__pthread_mutex_trylock
 (
pthread_mutex_t
 *
__mutex
);

262 extern int 
	`__pthread_mutex_lock
 (
pthread_mutex_t
 *
__mutex
);

264 extern int 
	`__pthread_mutex_unlock
 (
pthread_mutex_t
 *
__mutex
);

266 extern int 
	`__pthread_mutexattr_init
 (
pthread_mutexattr_t
 *
__attr
);

268 extern int 
	`__pthread_mutexattr_destroy
 (
pthread_mutexattr_t
 *
__attr
);

270 extern int 
	`__pthread_mutexattr_settype
 (
pthread_mutexattr_t
 *
__attr
,

271 int 
__kind
);

273 #ifdef 
__USE_UNIX98


274 extern int 
	`__pthread_rwlock_init
 (
pthread_rwlock_t
 *
__rwlock
,

275 
__const
 
pthread_rwlockattr_t
 *
__attr
);

277 extern int 
	`__pthread_rwlock_destroy
 (
pthread_rwlock_t
 *
__rwlock
);

279 extern int 
	`__pthread_rwlock_rdlock
 (
pthread_rwlock_t
 *
__rwlock
);

281 extern int 
	`__pthread_rwlock_tryrdlock
 (
pthread_rwlock_t
 *
__rwlock
);

283 extern int 
	`__pthread_rwlock_wrlock
 (
pthread_rwlock_t
 *
__rwlock
);

285 extern int 
	`__pthread_rwlock_trywrlock
 (
pthread_rwlock_t
 *
__rwlock
);

287 extern int 
	`__pthread_rwlock_unlock
 (
pthread_rwlock_t
 *
__rwlock
);

290 extern int 
	`__pthread_key_create
 (
pthread_key_t
 *
__key
,

291 void (*
__destr_function
) (void *));

293 extern int 
	`__pthread_setspecific
 (
pthread_key_t
 
__key
,

294 
__const
 void *
__pointer
);

296 extern void *
	`__pthread_getspecific
 (
pthread_key_t
 
__key
);

298 extern int 
	`__pthread_once
 (
pthread_once_t
 *
__once_control
,

299 void (*
__init_routine
) (void));

301 extern int 
	`__pthread_atfork
 (void (*
__prepare
) (void),

302 void (*
__parent
) (void),

303 void (*
__child
) (void));

305 
__END_DECLS


309 #ifndef 
__NO_WEAK_PTHREAD_ALIASES


310 #pragma 
weak
 
__pthread_mutex_init


311 #pragma 
weak
 
__pthread_mutex_destroy


312 #pragma 
weak
 
__pthread_mutex_lock


313 #pragma 
weak
 
__pthread_mutex_trylock


314 #pragma 
weak
 
__pthread_mutex_unlock


315 #pragma 
weak
 
__pthread_mutexattr_init


316 #pragma 
weak
 
__pthread_mutexattr_destroy


317 #pragma 
weak
 
__pthread_mutexattr_settype


318 #pragma 
weak
 
__pthread_rwlock_destroy


319 #pragma 
weak
 
__pthread_rwlock_rdlock


320 #pragma 
weak
 
__pthread_rwlock_tryrdlock


321 #pragma 
weak
 
__pthread_rwlock_wrlock


322 #pragma 
weak
 
__pthread_rwlock_trywrlock


323 #pragma 
weak
 
__pthread_rwlock_unlock


324 #pragma 
weak
 
__pthread_key_create


325 #pragma 
weak
 
__pthread_setspecific


326 #pragma 
weak
 
__pthread_getspecific


327 #pragma 
weak
 
__pthread_once


328 #pragma 
weak
 
__pthread_initialize


329 #pragma 
weak
 
__pthread_atfork


330 #pragma 
weak
 
_pthread_cleanup_push_defer


331 #pragma 
weak
 
_pthread_cleanup_pop_restore


332 #pragma 
weak
 
_pthread_cleanup_push


333 #pragma 
weak
 
_pthread_cleanup_pop


338 #define 
	#__libc_mutex_unlock
 
__pthread_mutex_unlock


	)

	@/usr/include/bits/timex.h

18 #ifndef 
_BITS_TIMEX_H


19 #define 
	#_BITS_TIMEX_H
 1

	)

21 #include 
	~<bits/types.h
>

25 struct 
	stimex


27 unsigned int 
	mmodes
;

28 
__syscall_slong_t
 
	moffset
;

29 
__syscall_slong_t
 
	mfreq
;

30 
__syscall_slong_t
 
	mmaxerror
;

31 
__syscall_slong_t
 
	mesterror
;

32 int 
	mstatus
;

33 
__syscall_slong_t
 
	mconstant
;

34 
__syscall_slong_t
 
	mprecision
;

35 
__syscall_slong_t
 
	mtolerance
;

36 struct 
timeval
 
	mtime
;

37 
__syscall_slong_t
 
	mtick
;

38 
__syscall_slong_t
 
	mppsfreq
;

39 
__syscall_slong_t
 
	mjitter
;

40 int 
	mshift
;

41 
__syscall_slong_t
 
	mstabil
;

42 
__syscall_slong_t
 
	mjitcnt
;

43 
__syscall_slong_t
 
	mcalcnt
;

44 
__syscall_slong_t
 
	merrcnt
;

45 
__syscall_slong_t
 
	mstbcnt
;

47 int 
	mtai
;

56 #define 
	#ADJ_OFFSET
 0x0001

	)

57 #define 
	#ADJ_FREQUENCY
 0x0002

	)

58 #define 
	#ADJ_MAXERROR
 0x0004

	)

59 #define 
	#ADJ_ESTERROR
 0x0008

	)

60 #define 
	#ADJ_STATUS
 0x0010

	)

61 #define 
	#ADJ_TIMECONST
 0x0020

	)

62 #define 
	#ADJ_TAI
 0x0080

	)

63 #define 
	#ADJ_MICRO
 0x1000

	)

64 #define 
	#ADJ_NANO
 0x2000

	)

65 #define 
	#ADJ_TICK
 0x4000

	)

66 #define 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 #define 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 #define 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 #define 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 #define 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 #define 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 #define 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 #define 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 #define 
	#MOD_CLKB
 
ADJ_TICK


	)

77 #define 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 #define 
	#MOD_TAI
 
ADJ_TAI


	)

79 #define 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 #define 
	#MOD_NANO
 
ADJ_NANO


	)

84 #define 
	#STA_PLL
 0x0001

	)

85 #define 
	#STA_PPSFREQ
 0x0002

	)

86 #define 
	#STA_PPSTIME
 0x0004

	)

87 #define 
	#STA_FLL
 0x0008

	)

89 #define 
	#STA_INS
 0x0010

	)

90 #define 
	#STA_DEL
 0x0020

	)

91 #define 
	#STA_UNSYNC
 0x0040

	)

92 #define 
	#STA_FREQHOLD
 0x0080

	)

94 #define 
	#STA_PPSSIGNAL
 0x0100

	)

95 #define 
	#STA_PPSJITTER
 0x0200

	)

96 #define 
	#STA_PPSWANDER
 0x0400

	)

97 #define 
	#STA_PPSERROR
 0x0800

	)

99 #define 
	#STA_CLOCKERR
 0x1000

	)

100 #define 
	#STA_NANO
 0x2000

	)

101 #define 
	#STA_MODE
 0x4000

	)

102 #define 
	#STA_CLK
 0x8000

	)

105 #define 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/gconv.h

22 #ifndef 
_GCONV_H


23 #define 
	#_GCONV_H
 1

	)

25 #include 
	~<features.h
>

26 #define 
	#__need_mbstate_t


	)

27 #define 
	#__need_wint_t


	)

28 #include 
	~<wchar.h
>

29 #define 
	#__need_size_t


	)

30 #define 
	#__need_wchar_t


	)

31 #include 
	~<stddef.h
>

34 #define 
	#__UNKNOWN_10646_CHAR
 ((
wchar_t
) 0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 struct 
	g__gconv_step
;

65 struct 
	g__gconv_step_data
;

66 struct 
	g__gconv_loaded_object
;

67 struct 
	g__gconv_trans_data
;

71 typedef int (*
	t__gconv_fct
) (struct 
	t__gconv_step
 *, struct 
	t__gconv_step_data
 *,

73 unsigned char **, 
	tsize_t
 *, int, int);

76 typedef 
	$wint_t
 (*
	t__gconv_btowc_fct
) (struct 
	t__gconv_step
 *, unsigned char);

79 typedef int (*
	t__gconv_init_fct
) (struct 
	t__gconv_step
 *);

80 typedef void (*
	t__gconv_end_fct
) (struct 
	t__gconv_step
 *);

84 typedef int (*
	t__gconv_trans_fct
) (struct 
	t__gconv_step
 *,

85 struct 
	t__gconv_step_data
 *, void *,

89 
	tsize_t
 *);

92 typedef int (*
	t__gconv_trans_context_fct
) (void *, const unsigned char *,

97 typedef int (*
	t__gconv_trans_query_fct
) (const char *, const char ***,

98 
	tsize_t
 *);

101 typedef int (*
	t__gconv_trans_init_fct
) (void **, const char *);

102 typedef void (*
	t__gconv_trans_end_fct
) (void *);

104 struct 
	s__gconv_trans_data


107 
__gconv_trans_fct
 
__trans_fct
;

108 
__gconv_trans_context_fct
 
__trans_context_fct
;

109 
__gconv_trans_end_fct
 
__trans_end_fct
;

110 void *
__data
;

111 struct 
__gconv_trans_data
 *
__next
;

116 struct 
	s__gconv_step


118 struct 
__gconv_loaded_object
 *
__shlib_handle
;

119 const char *
__modname
;

121 int 
__counter
;

123 char *
__from_name
;

124 char *
__to_name
;

126 
__gconv_fct
 
__fct
;

127 
__gconv_btowc_fct
 
__btowc_fct
;

128 
__gconv_init_fct
 
__init_fct
;

129 
__gconv_end_fct
 
__end_fct
;

133 int 
__min_needed_from
;

134 int 
__max_needed_from
;

135 int 
__min_needed_to
;

136 int 
__max_needed_to
;

139 int 
__stateful
;

141 void *
__data
;

146 struct 
	s__gconv_step_data


148 unsigned char *
__outbuf
;

149 unsigned char *
__outbufend
;

153 int 
__flags
;

157 int 
__invocation_counter
;

161 int 
__internal_use
;

163 
__mbstate_t
 *
__statep
;

164 
__mbstate_t
 
__state
;

168 struct 
__gconv_trans_data
 *
__trans
;

173 typedef struct 
	s__gconv_info


175 
size_t
 
__nsteps
;

176 struct 
__gconv_step
 *
__steps
;

177 
__extension__
 struct 
__gconv_step_data
 
__data
 
__flexarr
;

178 } *
	t__gconv_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub_bdflush


	)

11 #define 
	#__stub_chflags


	)

12 #define 
	#__stub_fattach


	)

13 #define 
	#__stub_fchflags


	)

14 #define 
	#__stub_fdetach


	)

15 #define 
	#__stub_getmsg


	)

16 #define 
	#__stub_gtty


	)

17 #define 
	#__stub_lchmod


	)

18 #define 
	#__stub_putmsg


	)

19 #define 
	#__stub_revoke


	)

20 #define 
	#__stub_setlogin


	)

21 #define 
	#__stub_sigreturn


	)

22 #define 
	#__stub_sstk


	)

23 #define 
	#__stub_stty


	)

	@/usr/include/wchar.h

23 #ifndef 
_WCHAR_H


25 #if !
defined
 
__need_mbstate_t
 && !defined 
__need_wint_t


26 #define 
	#_WCHAR_H
 1

	)

27 #include 
	~<features.h
>

30 #ifdef 
_WCHAR_H


32 #define 
	#__need___FILE


	)

33 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


34 #define 
	#__need_FILE


	)

36 #include 
	~<stdio.h
>

38 #define 
	#__need___va_list


	)

39 #include 
	~<stdarg.h
>

41 #include 
	~<bits/wchar.h
>

44 #define 
	#__need_size_t


	)

45 #define 
	#__need_wchar_t


	)

46 #define 
	#__need_NULL


	)

48 #if 
defined
 
_WCHAR_H
 || defined 
__need_wint_t
 || !defined 
__WINT_TYPE__


49 #undef 
__need_wint_t


50 #define 
	#__need_wint_t


	)

51 #include 
	~<stddef.h
>

55 #ifndef 
_WINT_T


60 #define 
	#_WINT_T


	)

61 typedef unsigned int 
	twint_t
;

65 #if 
defined
 
__cplusplus
 && defined 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
defined
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 typedef 
__WINT_TYPE__
 
	twint_t
;

69 
	g__END_NAMESPACE_STD


74 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

75 #define 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #if (
defined
 
_WCHAR_H
 || defined 
__need_mbstate_t
) && !defined 
____mbstate_t_defined


80 #define 
	#____mbstate_t_defined
 1

	)

84 int 
	m__count
;

87 #ifdef 
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wint_t
 
	m__wch
;

92 char 
	m__wchb
[4];

93 } 
	m__value
;

94 } 
	t__mbstate_t
;

96 #undef 
__need_mbstate_t


101 #ifdef 
_WCHAR_H


103 #ifndef 
__mbstate_t_defined


104 
__BEGIN_NAMESPACE_C99


106 typedef 
__mbstate_t
 
	tmbstate_t
;

107 
	g__END_NAMESPACE_C99


108 #define 
	#__mbstate_t_defined
 1

	)

111 #ifdef 
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mbstate_t
)

115 #ifndef 
WCHAR_MIN


117 #define 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 #define 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #ifndef 
WEOF


122 #define 
	#WEOF
 (0xffffffffu)

	)

127 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_UNIX98


128 #include 
	~<wctype.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 struct 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 extern 
wchar_t
 *
	$wcscpy
 (
wchar_t
 *
__restrict
 
__dest
,

148 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

150 extern 
wchar_t
 *
	$wcsncpy
 (
wchar_t
 *
__restrict
 
__dest
,

151 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

152 
__THROW
;

155 extern 
wchar_t
 *
	$wcscat
 (
wchar_t
 *
__restrict
 
__dest
,

156 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

158 extern 
wchar_t
 *
	$wcsncat
 (
wchar_t
 *
__restrict
 
__dest
,

159 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

160 
__THROW
;

163 extern int 
	$wcscmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
)

164 
__THROW
 
__attribute_pure__
;

166 extern int 
	$wcsncmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__attribute_pure__
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_XOPEN2K8


172 extern int 
	$wcscasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

175 extern int 
	$wcsncasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

176 
size_t
 
__n
) 
__THROW
;

180 #include 
	~<xlocale.h
>

182 extern int 
	$wcscasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

183 
__locale_t
 
__loc
) 
__THROW
;

185 extern int 
	$wcsncasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

186 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 extern int 
	$wcscoll
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

196 extern 
size_t
 
	$wcsxfrm
 (
wchar_t
 *
__restrict
 
__s1
,

197 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifdef 
__USE_XOPEN2K8


206 extern int 
	$wcscoll_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

207 
__locale_t
 
__loc
) 
__THROW
;

212 extern 
size_t
 
	$wcsxfrm_l
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

213 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

216 extern 
wchar_t
 *
	$wcsdup
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_malloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 extern "C++" 
wchar_t
 *
	$wcschr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

224 extern "C++" const 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

227 extern 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

228 
__THROW
 
__attribute_pure__
;

231 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 extern "C++" 
wchar_t
 *
	$wcsrchr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

233 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

234 extern "C++" const 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

235 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

237 extern 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

238 
__THROW
 
__attribute_pure__
;

240 
__END_NAMESPACE_STD


242 #ifdef 
__USE_GNU


245 extern 
wchar_t
 *
	$wcschrnul
 (const 
wchar_t
 *
__s
, wchar_t 
__wc
)

246 
__THROW
 
__attribute_pure__
;

249 
__BEGIN_NAMESPACE_STD


252 extern 
size_t
 
	$wcscspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__reject
)

253 
__THROW
 
__attribute_pure__
;

256 extern 
size_t
 
	$wcsspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

257 
__THROW
 
__attribute_pure__
;

259 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 extern "C++" 
wchar_t
 *
	$wcspbrk
 (
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

261 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

262 extern "C++" const 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
,

263 const 
wchar_t
 *
__accept
)

264 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

266 extern 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

267 
__THROW
 
__attribute_pure__
;

270 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 extern "C++" 
wchar_t
 *
	$wcsstr
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

272 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

273 extern "C++" const 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
,

274 const 
wchar_t
 *
__needle
)

275 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

277 extern 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

278 
__THROW
 
__attribute_pure__
;

282 extern 
wchar_t
 *
	$wcstok
 (
wchar_t
 *
__restrict
 
__s
,

283 const 
wchar_t
 *
__restrict
 
__delim
,

284 
wchar_t
 **
__restrict
 
__ptr
) 
__THROW
;

287 extern 
size_t
 
	$wcslen
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_pure__
;

288 
__END_NAMESPACE_STD


290 #ifdef 
__USE_XOPEN


292 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 extern "C++" 
wchar_t
 *
	$wcswcs
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

294 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

295 extern "C++" const 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
,

296 const 
wchar_t
 *
__needle
)

297 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

299 extern 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

300 
__THROW
 
__attribute_pure__
;

304 #ifdef 
__USE_XOPEN2K8


306 extern 
size_t
 
	$wcsnlen
 (const 
wchar_t
 *
__s
, 
size_t
 
__maxlen
)

307 
__THROW
 
__attribute_pure__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 extern "C++" 
wchar_t
 *
	$wmemchr
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

316 extern "C++" const 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

320 extern 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

321 
__THROW
 
__attribute_pure__
;

325 extern int 
	$wmemcmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__attribute_pure__
;

329 extern 
wchar_t
 *
	$wmemcpy
 (
wchar_t
 *
__restrict
 
__s1
,

330 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

334 extern 
wchar_t
 *
	$wmemmove
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 extern 
wchar_t
 *
	$wmemset
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
) 
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_GNU


344 extern 
wchar_t
 *
	$wmempcpy
 (
wchar_t
 *
__restrict
 
__s1
,

345 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 extern 
wint_t
 
	$btowc
 (int 
__c
) 
__THROW
;

357 extern int 
	$wctob
 (
wint_t
 
__c
) 
__THROW
;

361 extern int 
	$mbsinit
 (const 
mbstate_t
 *
__ps
) 
__THROW
 
__attribute_pure__
;

365 extern 
size_t
 
	$mbrtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

366 const char *
__restrict
 
__s
, 
size_t
 
__n
,

367 
mbstate_t
 *
__restrict
 
__p
) 
__THROW
;

370 extern 
size_t
 
	$wcrtomb
 (char *
__restrict
 
__s
, 
wchar_t
 
__wc
,

371 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

374 extern 
size_t
 
	$__mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

375 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

376 extern 
size_t
 
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

377 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifdef 
__USE_EXTERN_INLINES


386 extern 
wint_t
 
	$__btowc_alias
 (int 
__c
) 
	`__asm
 ("btowc");

387 
__extern_inline
 
wint_t


388 
	`__NTH
 (
	$btowc
 (int 
__c
))

389 { return (
	`__builtin_constant_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wint_t
) 
__c
 : 
	`__btowc_alias
 (__c)); 
	}
}

392 extern int 
	$__wctob_alias
 (
wint_t
 
__c
) 
	`__asm
 ("wctob");

393 
__extern_inline
 int

394 
	`__NTH
 (
	$wctob
 (
wint_t
 
__wc
))

395 { return (
	`__builtin_constant_p
 (
__wc
) && __wc >= 
L
'\0' && __wc <= L'\x7f'

396 ? (int) 
__wc
 : 
	`__wctob_alias
 (__wc)); 
	}
}

398 
__extern_inline
 
size_t


399 
__NTH
 (
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

400 
mbstate_t
 *
__restrict
 
__ps
))

401 { return (
__ps
 != 
NULL


402 ? 
	`mbrtowc
 (
NULL
, 
__s
, 
__n
, 
__ps
) : 
	`__mbrlen
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 extern 
size_t
 
	$mbsrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

409 const char **
__restrict
 
__src
, 
size_t
 
__len
,

410 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

414 extern 
size_t
 
	$wcsrtombs
 (char *
__restrict
 
__dst
,

415 const 
wchar_t
 **
__restrict
 
__src
, 
size_t
 
__len
,

416 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 extern 
size_t
 
	$mbsnrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

424 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

425 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

429 extern 
size_t
 
	$wcsnrtombs
 (char *
__restrict
 
__dst
,

430 const 
wchar_t
 **
__restrict
 
__src
,

431 
size_t
 
__nwc
, size_t 
__len
,

432 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

437 #ifdef 
__USE_XOPEN


439 extern int 
	$wcwidth
 (
wchar_t
 
__c
) 
__THROW
;

443 extern int 
	$wcswidth
 (const 
wchar_t
 *
__s
, 
size_t
 
__n
) 
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 extern double 
	$wcstod
 (const 
wchar_t
 *
__restrict
 
__nptr
,

451 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifdef 
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 extern float 
	$wcstof
 (const 
wchar_t
 *
__restrict
 
__nptr
,

458 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

459 extern long double 
	$wcstold
 (const 
wchar_t
 *
__restrict
 
__nptr
,

460 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 extern long int 
	$wcstol
 (const 
wchar_t
 *
__restrict
 
__nptr
,

469 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
) 
__THROW
;

473 extern unsigned long int 
	$wcstoul
 (const 
wchar_t
 *
__restrict
 
__nptr
,

474 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #if 
defined
 
__USE_ISOC99
 || (defined 
__GNUC__
 && defined 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__extension__


483 extern long long int 
	$wcstoll
 (const 
wchar_t
 *
__restrict
 
__nptr
,

484 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

485 
__THROW
;

489 
__extension__


490 extern unsigned long long int 
	$wcstoull
 (const 
wchar_t
 *
__restrict
 
__nptr
,

491 
wchar_t
 **
__restrict
 
__endptr
,

492 int 
__base
) 
__THROW
;

493 
__END_NAMESPACE_C99


496 #if 
defined
 
__GNUC__
 && defined 
__USE_GNU


499 
__extension__


500 extern long long int 
	$wcstoq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

501 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

502 
__THROW
;

506 
__extension__


507 extern unsigned long long int 
	$wcstouq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

508 
wchar_t
 **
__restrict
 
__endptr
,

509 int 
__base
) 
__THROW
;

512 #ifdef 
__USE_GNU


526 #include 
	~<xlocale.h
>

530 extern long int 
	$wcstol_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

531 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
,

532 
__locale_t
 
__loc
) 
__THROW
;

534 extern unsigned long int 
	$wcstoul_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

535 
wchar_t
 **
__restrict
 
__endptr
,

536 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

538 
__extension__


539 extern long long int 
	$wcstoll_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

540 
wchar_t
 **
__restrict
 
__endptr
,

541 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

543 
__extension__


544 extern unsigned long long int 
	$wcstoull_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

545 
wchar_t
 **
__restrict
 
__endptr
,

546 int 
__base
, 
__locale_t
 
__loc
)

547 
__THROW
;

549 extern double 
	$wcstod_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

550 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

551 
__THROW
;

553 extern float 
	$wcstof_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

554 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

555 
__THROW
;

557 extern long double 
	$wcstold_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

558 
wchar_t
 **
__restrict
 
__endptr
,

559 
__locale_t
 
__loc
) 
__THROW
;

563 #ifdef 
__USE_XOPEN2K8


566 extern 
wchar_t
 *
	$wcpcpy
 (
wchar_t
 *
__restrict
 
__dest
,

567 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

571 extern 
wchar_t
 *
	$wcpncpy
 (
wchar_t
 *
__restrict
 
__dest
,

572 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

573 
__THROW
;

580 extern 
__FILE
 *
	$open_wmemstream
 (
wchar_t
 **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
;

583 #if 
defined
 
__USE_ISOC95
 || defined 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 extern int 
	$fwide
 (
__FILE
 *
__fp
, int 
__mode
) 
__THROW
;

594 extern int 
	`fwprintf
 (
__FILE
 *
__restrict
 
__stream
,

595 const 
wchar_t
 *
__restrict
 
__format
, ...)

601 extern int 
	`wprintf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

604 extern int 
	$swprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

605 const 
wchar_t
 *
__restrict
 
__format
, ...)

606 
__THROW
 ;

612 extern int 
	`vfwprintf
 (
__FILE
 *
__restrict
 
__s
,

613 const 
wchar_t
 *
__restrict
 
__format
,

614 
__gnuc_va_list
 
__arg
)

620 extern int 
	`vwprintf
 (const 
wchar_t
 *
__restrict
 
__format
,

621 
__gnuc_va_list
 
__arg
)

625 extern int 
	$vswprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

626 const 
wchar_t
 *
__restrict
 
__format
,

627 
__gnuc_va_list
 
__arg
)

628 
__THROW
 ;

635 extern int 
	`fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

636 const 
wchar_t
 *
__restrict
 
__format
, ...)

642 extern int 
	`wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

645 extern int 
	$swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

646 const 
wchar_t
 *
__restrict
 
__format
, ...)

647 
__THROW
 ;

649 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

650 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

651 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

652 #ifdef 
__REDIRECT


656 extern int 
	`__REDIRECT
 (
fwscanf
, (
__FILE
 *
__restrict
 
__stream
,

657 const 
wchar_t
 *
__restrict
 
__format
, ...),

658 
__isoc99_fwscanf
)

660 extern int 
	`__REDIRECT
 (
wscanf
, (const 
wchar_t
 *
__restrict
 
__format
, ...),

661 
__isoc99_wscanf
)

663 extern int 
	`__REDIRECT_NTH
 (
swscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

664 const 
wchar_t
 *
__restrict
 
__format
,

665 ...), 
__isoc99_swscanf
)

668 extern int 
	`__isoc99_fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

669 const 
wchar_t
 *
__restrict
 
__format
, ...);

670 extern int 
	`__isoc99_wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...);

671 extern int 
	$__isoc99_swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

672 const 
wchar_t
 *
__restrict
 
__format
, ...)

673 
__THROW
;

674 #define 
	#fwscanf
 
__isoc99_fwscanf


	)

675 #define 
	#wscanf
 
__isoc99_wscanf


	)

676 #define 
	#swscanf
 
__isoc99_swscanf


	)

680 
__END_NAMESPACE_STD


683 #ifdef 
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 extern int 
	`vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

690 const 
wchar_t
 *
__restrict
 
__format
,

691 
__gnuc_va_list
 
__arg
)

697 extern int 
	`vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

698 
__gnuc_va_list
 
__arg
)

701 extern int 
	$vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

702 const 
wchar_t
 *
__restrict
 
__format
,

703 
__gnuc_va_list
 
__arg
)

704 
__THROW
 ;

706 #if !
defined
 
__USE_GNU
 \

707 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

708 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

709 #ifdef 
__REDIRECT


710 extern int 
	`__REDIRECT
 (
vfwscanf
, (
__FILE
 *
__restrict
 
__s
,

711 const 
wchar_t
 *
__restrict
 
__format
,

712 
__gnuc_va_list
 
__arg
), 
__isoc99_vfwscanf
)

714 extern int 
	`__REDIRECT
 (
vwscanf
, (const 
wchar_t
 *
__restrict
 
__format
,

715 
__gnuc_va_list
 
__arg
), 
__isoc99_vwscanf
)

717 extern int 
	`__REDIRECT_NTH
 (
vswscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

718 const 
wchar_t
 *
__restrict
 
__format
,

719 
__gnuc_va_list
 
__arg
), 
__isoc99_vswscanf
)

722 extern int 
	`__isoc99_vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

723 const 
wchar_t
 *
__restrict
 
__format
,

724 
__gnuc_va_list
 
__arg
);

725 extern int 
	`__isoc99_vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

726 
__gnuc_va_list
 
__arg
);

727 extern int 
	$__isoc99_vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

728 const 
wchar_t
 *
__restrict
 
__format
,

729 
__gnuc_va_list
 
__arg
) 
__THROW
;

730 #define 
	#vfwscanf
 
__isoc99_vfwscanf


	)

731 #define 
	#vwscanf
 
__isoc99_vwscanf


	)

732 #define 
	#vswscanf
 
__isoc99_vswscanf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 extern 
wint_t
 
	`fgetwc
 (
__FILE
 *
__stream
);

746 extern 
wint_t
 
	`getwc
 (
__FILE
 *
__stream
);

752 extern 
wint_t
 
	`getwchar
 (void);

759 extern 
wint_t
 
	`fputwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

760 extern 
wint_t
 
	`putwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

766 extern 
wint_t
 
	`putwchar
 (
wchar_t
 
__wc
);

774 extern 
wchar_t
 *
	`fgetws
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

775 
__FILE
 *
__restrict
 
__stream
);

781 extern int 
	`fputws
 (const 
wchar_t
 *
__restrict
 
__ws
,

782 
__FILE
 *
__restrict
 
__stream
);

789 extern 
wint_t
 
	`ungetwc
 (wint_t 
__wc
, 
__FILE
 *
__stream
);

790 
__END_NAMESPACE_STD


793 #ifdef 
__USE_GNU


801 extern 
wint_t
 
	`getwc_unlocked
 (
__FILE
 *
__stream
);

802 extern 
wint_t
 
	`getwchar_unlocked
 (void);

810 extern 
wint_t
 
	`fgetwc_unlocked
 (
__FILE
 *
__stream
);

818 extern 
wint_t
 
	`fputwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

827 extern 
wint_t
 
	`putwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

828 extern 
wint_t
 
	`putwchar_unlocked
 (
wchar_t
 
__wc
);

837 extern 
wchar_t
 *
	`fgetws_unlocked
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

838 
__FILE
 *
__restrict
 
__stream
);

846 extern int 
	`fputws_unlocked
 (const 
wchar_t
 *
__restrict
 
__ws
,

847 
__FILE
 *
__restrict
 
__stream
);

851 
__BEGIN_NAMESPACE_C99


855 extern 
size_t
 
	$wcsftime
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

856 const 
wchar_t
 *
__restrict
 
__format
,

857 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifdef 
__USE_GNU


861 #include 
	~<xlocale.h
>

865 extern 
size_t
 
	$wcsftime_l
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

866 const 
wchar_t
 *
__restrict
 
__format
,

867 const struct 
tm
 *
__restrict
 
__tp
,

868 
__locale_t
 
__loc
) 
__THROW
;

877 #if 
defined
 
__USE_UNIX98
 && !defined 
__USE_GNU


878 #define 
	#__need_iswxxx


	)

879 #include 
	~<wctype.h
>

883 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


884 #include 
	~<bits/wchar2.h
>

887 #ifdef 
__LDBL_COMPAT


888 #include 
	~<bits/wchar-ldbl.h
>

891 
__END_DECLS


899 #undef 
__need_mbstate_t


900 #undef 
__need_wint_t


	@/usr/include/asm-generic/errno.h

1 #ifndef 
_ASM_GENERIC_ERRNO_H


2 #define 
	#_ASM_GENERIC_ERRNO_H


	)

4 #include 
	~<asm-generic/errno-base.h
>

6 #define 
	#EDEADLK
 35

	)

7 #define 
	#ENAMETOOLONG
 36

	)

8 #define 
	#ENOLCK
 37

	)

9 #define 
	#ENOSYS
 38

	)

10 #define 
	#ENOTEMPTY
 39

	)

11 #define 
	#ELOOP
 40

	)

12 #define 
	#EWOULDBLOCK
 
EAGAIN


	)

13 #define 
	#ENOMSG
 42

	)

14 #define 
	#EIDRM
 43

	)

15 #define 
	#ECHRNG
 44

	)

16 #define 
	#EL2NSYNC
 45

	)

17 #define 
	#EL3HLT
 46

	)

18 #define 
	#EL3RST
 47

	)

19 #define 
	#ELNRNG
 48

	)

20 #define 
	#EUNATCH
 49

	)

21 #define 
	#ENOCSI
 50

	)

22 #define 
	#EL2HLT
 51

	)

23 #define 
	#EBADE
 52

	)

24 #define 
	#EBADR
 53

	)

25 #define 
	#EXFULL
 54

	)

26 #define 
	#ENOANO
 55

	)

27 #define 
	#EBADRQC
 56

	)

28 #define 
	#EBADSLT
 57

	)

30 #define 
	#EDEADLOCK
 
EDEADLK


	)

32 #define 
	#EBFONT
 59

	)

33 #define 
	#ENOSTR
 60

	)

34 #define 
	#ENODATA
 61

	)

35 #define 
	#ETIME
 62

	)

36 #define 
	#ENOSR
 63

	)

37 #define 
	#ENONET
 64

	)

38 #define 
	#ENOPKG
 65

	)

39 #define 
	#EREMOTE
 66

	)

40 #define 
	#ENOLINK
 67

	)

41 #define 
	#EADV
 68

	)

42 #define 
	#ESRMNT
 69

	)

43 #define 
	#ECOMM
 70

	)

44 #define 
	#EPROTO
 71

	)

45 #define 
	#EMULTIHOP
 72

	)

46 #define 
	#EDOTDOT
 73

	)

47 #define 
	#EBADMSG
 74

	)

48 #define 
	#EOVERFLOW
 75

	)

49 #define 
	#ENOTUNIQ
 76

	)

50 #define 
	#EBADFD
 77

	)

51 #define 
	#EREMCHG
 78

	)

52 #define 
	#ELIBACC
 79

	)

53 #define 
	#ELIBBAD
 80

	)

54 #define 
	#ELIBSCN
 81

	)

55 #define 
	#ELIBMAX
 82

	)

56 #define 
	#ELIBEXEC
 83

	)

57 #define 
	#EILSEQ
 84

	)

58 #define 
	#ERESTART
 85

	)

59 #define 
	#ESTRPIPE
 86

	)

60 #define 
	#EUSERS
 87

	)

61 #define 
	#ENOTSOCK
 88

	)

62 #define 
	#EDESTADDRREQ
 89

	)

63 #define 
	#EMSGSIZE
 90

	)

64 #define 
	#EPROTOTYPE
 91

	)

65 #define 
	#ENOPROTOOPT
 92

	)

66 #define 
	#EPROTONOSUPPORT
 93

	)

67 #define 
	#ESOCKTNOSUPPORT
 94

	)

68 #define 
	#EOPNOTSUPP
 95

	)

69 #define 
	#EPFNOSUPPORT
 96

	)

70 #define 
	#EAFNOSUPPORT
 97

	)

71 #define 
	#EADDRINUSE
 98

	)

72 #define 
	#EADDRNOTAVAIL
 99

	)

73 #define 
	#ENETDOWN
 100

	)

74 #define 
	#ENETUNREACH
 101

	)

75 #define 
	#ENETRESET
 102

	)

76 #define 
	#ECONNABORTED
 103

	)

77 #define 
	#ECONNRESET
 104

	)

78 #define 
	#ENOBUFS
 105

	)

79 #define 
	#EISCONN
 106

	)

80 #define 
	#ENOTCONN
 107

	)

81 #define 
	#ESHUTDOWN
 108

	)

82 #define 
	#ETOOMANYREFS
 109

	)

83 #define 
	#ETIMEDOUT
 110

	)

84 #define 
	#ECONNREFUSED
 111

	)

85 #define 
	#EHOSTDOWN
 112

	)

86 #define 
	#EHOSTUNREACH
 113

	)

87 #define 
	#EALREADY
 114

	)

88 #define 
	#EINPROGRESS
 115

	)

89 #define 
	#ESTALE
 116

	)

90 #define 
	#EUCLEAN
 117

	)

91 #define 
	#ENOTNAM
 118

	)

92 #define 
	#ENAVAIL
 119

	)

93 #define 
	#EISNAM
 120

	)

94 #define 
	#EREMOTEIO
 121

	)

95 #define 
	#EDQUOT
 122

	)

97 #define 
	#ENOMEDIUM
 123

	)

98 #define 
	#EMEDIUMTYPE
 124

	)

99 #define 
	#ECANCELED
 125

	)

100 #define 
	#ENOKEY
 126

	)

101 #define 
	#EKEYEXPIRED
 127

	)

102 #define 
	#EKEYREVOKED
 128

	)

103 #define 
	#EKEYREJECTED
 129

	)

106 #define 
	#EOWNERDEAD
 130

	)

107 #define 
	#ENOTRECOVERABLE
 131

	)

109 #define 
	#ERFKILL
 132

	)

111 #define 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

19 #ifndef 
_WCHAR_H


23 #if 
defined
 
__USE_ISOC95
 || defined 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fwprintf
);

26 
__LDBL_REDIR_DECL
 (
wprintf
);

27 
__LDBL_REDIR_DECL
 (
swprintf
);

28 
__LDBL_REDIR_DECL
 (
vfwprintf
);

29 
__LDBL_REDIR_DECL
 (
vwprintf
);

30 
__LDBL_REDIR_DECL
 (
vswprintf
);

31 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

32 && !
defined
 
	g__REDIRECT
 \

33 && (
defined
 
	g__STRICT_ANSI__
 || defined 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwscanf
, 
__nldbl___isoc99_fwscanf
)

35 
	$__LDBL_REDIR1_DECL
 (
wscanf
, 
__nldbl___isoc99_wscanf
)

36 
	$__LDBL_REDIR1_DECL
 (
swscanf
, 
__nldbl___isoc99_swscanf
)

38 
	`__LDBL_REDIR_DECL
 (
fwscanf
);

39 
	`__LDBL_REDIR_DECL
 (
wscanf
);

40 
	`__LDBL_REDIR_DECL
 (
swscanf
);

42 
__END_NAMESPACE_C99


45 #ifdef 
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wcstold
, 
wcstod
);

48 #if !
defined
 
__USE_GNU
 && !defined 
__REDIRECT
 \

49 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwscanf
, 
__nldbl___isoc99_vfwscanf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwscanf
, 
__nldbl___isoc99_vwscanf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswscanf
, 
__nldbl___isoc99_vswscanf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwscanf
);

55 
	`__LDBL_REDIR_DECL
 (
vwscanf
);

56 
	`__LDBL_REDIR_DECL
 (
vswscanf
);

58 
__END_NAMESPACE_C99


61 #ifdef 
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wcstold_l
, 
wcstod_l
);

65 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


66 
	$__LDBL_REDIR_DECL
 (
__swprintf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vswprintf_chk
)

68 #if 
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fwprintf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__wprintf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfwprintf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vwprintf_chk
)

	@/usr/include/bits/wchar.h

19 #ifndef 
_BITS_WCHAR_H


20 #define 
	#_BITS_WCHAR_H
 1

	)

22 #include 
	~<bits/wordsize.h
>

24 #if 
__WORDSIZE
 == 64

25 #define 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 #define 
	#__WCHAR_MAX
 (2147483647)

	)

28 #define 
	#__WCHAR_MIN
 (-2147483647l - 1l)

	)

29 #define 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wchar2.h

19 #ifndef 
_WCHAR_H


24 extern 
wchar_t
 *
	$__wmemcpy_chk
 (
wchar_t
 *
__restrict
 
__s1
,

25 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
) 
__THROW
;

27 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemcpy_alias
,

28 (
wchar_t
 *
__restrict
 
__s1
,

29 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
),

30 
wmemcpy
);

31 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemcpy_chk_warn
,

32 (
wchar_t
 *
__restrict
 
__s1
,

33 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmemcpy_chk
)

35 
	`__warnattr
 ("wmemcpy called with length bigger than size of destination "

38 
__fortify_function
 
wchar_t
 *

39 
	`__NTH
 (
	$wmemcpy
 (
wchar_t
 *
__restrict
 
__s1
, const wchar_t *__restrict 
__s2
,

40 
size_t
 
__n
))

42 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

44 if (!
	`__builtin_constant_p
 (
__n
))

45 return 
	`__wmemcpy_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

48 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

49 return 
	`__wmemcpy_chk_warn
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

52 return 
	`__wmemcpy_alias
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 extern 
wchar_t
 *
	$__wmemmove_chk
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

57 
size_t
 
__n
, size_t 
__ns1
) 
__THROW
;

58 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_alias
, (wchar_t *
__s1
,

59 const 
wchar_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_warn
,

62 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

63 
size_t
 
__n
, size_t 
__ns1
), 
__wmemmove_chk
)

64 
	`__warnattr
 ("wmemmove called with length bigger than size of destination "

67 
__fortify_function
 
wchar_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
))

70 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

72 if (!
	`__builtin_constant_p
 (
__n
))

73 return 
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

76 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

77 return 
	`__wmemmove_chk_warn
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

80 return 
	`__wmemmove_alias
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifdef 
__USE_GNU


85 extern 
wchar_t
 *
	$__wmempcpy_chk
 (
wchar_t
 *
__restrict
 
__s1
,

86 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
) 
__THROW
;

88 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmempcpy_alias
,

89 (
wchar_t
 *
__restrict
 
__s1
,

90 const 
wchar_t
 *
__restrict
 
__s2
,

91 
size_t
 
__n
), 
wmempcpy
);

92 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmempcpy_chk_warn
,

93 (
wchar_t
 *
__restrict
 
__s1
,

94 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmempcpy_chk
)

96 
	`__warnattr
 ("wmempcpy called with length bigger than size of destination "

99 
__fortify_function
 
wchar_t
 *

100 
	`__NTH
 (
	$wmempcpy
 (
wchar_t
 *
__restrict
 
__s1
, const wchar_t *__restrict 
__s2
,

101 
size_t
 
__n
))

103 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

105 if (!
	`__builtin_constant_p
 (
__n
))

106 return 
	`__wmempcpy_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

109 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

110 return 
	`__wmempcpy_chk_warn
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

113 return 
	`__wmempcpy_alias
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 extern 
wchar_t
 *
	$__wmemset_chk
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
) 
__THROW
;

120 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemset_alias
, (wchar_t *
__s
, wchar_t 
__c
,

121 
size_t
 
__n
), 
wmemset
);

122 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemset_chk_warn
,

123 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmemset_chk
)

125 
	`__warnattr
 ("wmemset called with length bigger than size of destination "

128 
__fortify_function
 
wchar_t
 *

129 
	`__NTH
 (
	$wmemset
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
))

131 if (
	`__bos0
 (
__s
) != (
size_t
) -1)

133 if (!
	`__builtin_constant_p
 (
__n
))

134 return 
	`__wmemset_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__s) / sizeof (
wchar_t
));

136 if (
__n
 > 
	`__bos0
 (
__s
) / sizeof (
wchar_t
))

137 return 
	`__wmemset_chk_warn
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
) / sizeof (
wchar_t
));

140 return 
	`__wmemset_alias
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 extern 
wchar_t
 *
	$__wcscpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

145 const 
wchar_t
 *
__restrict
 
__src
,

146 
size_t
 
__n
) 
__THROW
;

147 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcscpy_alias
,

148 (
wchar_t
 *
__restrict
 
__dest
,

149 const 
wchar_t
 *
__restrict
 
__src
), 
wcscpy
);

151 
__fortify_function
 
wchar_t
 *

152 
	`__NTH
 (
	$wcscpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

154 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

155 return 
	`__wcscpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

156 return 
	`__wcscpy_alias
 (
__dest
, 
__src
);

157 
	}
}

160 extern 
wchar_t
 *
	$__wcpcpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

161 const 
wchar_t
 *
__restrict
 
__src
,

162 
size_t
 
__destlen
) 
__THROW
;

163 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpcpy_alias
,

164 (
wchar_t
 *
__restrict
 
__dest
,

165 const 
wchar_t
 *
__restrict
 
__src
), 
wcpcpy
);

167 
__fortify_function
 
wchar_t
 *

168 
	`__NTH
 (
	$wcpcpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

170 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

171 return 
	`__wcpcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

172 return 
	`__wcpcpy_alias
 (
__dest
, 
__src
);

173 
	}
}

176 extern 
wchar_t
 *
	$__wcsncpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

177 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
,

178 
size_t
 
__destlen
) 
__THROW
;

179 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncpy_alias
,

180 (
wchar_t
 *
__restrict
 
__dest
,

181 const 
wchar_t
 *
__restrict
 
__src
,

182 
size_t
 
__n
), 
wcsncpy
);

183 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncpy_chk_warn
,

184 (
wchar_t
 *
__restrict
 
__dest
,

185 const 
wchar_t
 *
__restrict
 
__src
,

186 
size_t
 
__n
, size_t 
__destlen
), 
__wcsncpy_chk
)

187 
	`__warnattr
 ("wcsncpy called with length bigger than size of destination "

190 
__fortify_function
 
wchar_t
 *

191 
	`__NTH
 (
	$wcsncpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

192 
size_t
 
__n
))

194 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

196 if (!
	`__builtin_constant_p
 (
__n
))

197 return 
	`__wcsncpy_chk
 (
__dest
, 
__src
, 
__n
,

198 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

199 if (
__n
 > 
	`__bos
 (
__dest
) / sizeof (
wchar_t
))

200 return 
	`__wcsncpy_chk_warn
 (
__dest
, 
__src
, 
__n
,

201 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

203 return 
	`__wcsncpy_alias
 (
__dest
, 
__src
, 
__n
);

204 
	}
}

207 extern 
wchar_t
 *
	$__wcpncpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

208 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
,

209 
size_t
 
__destlen
) 
__THROW
;

210 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpncpy_alias
,

211 (
wchar_t
 *
__restrict
 
__dest
,

212 const 
wchar_t
 *
__restrict
 
__src
,

213 
size_t
 
__n
), 
wcpncpy
);

214 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpncpy_chk_warn
,

215 (
wchar_t
 *
__restrict
 
__dest
,

216 const 
wchar_t
 *
__restrict
 
__src
,

217 
size_t
 
__n
, size_t 
__destlen
), 
__wcpncpy_chk
)

218 
	`__warnattr
 ("wcpncpy called with length bigger than size of destination "

221 
__fortify_function
 
wchar_t
 *

222 
	`__NTH
 (
	$wcpncpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

223 
size_t
 
__n
))

225 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

227 if (!
	`__builtin_constant_p
 (
__n
))

228 return 
	`__wcpncpy_chk
 (
__dest
, 
__src
, 
__n
,

229 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

230 if (
__n
 > 
	`__bos
 (
__dest
) / sizeof (
wchar_t
))

231 return 
	`__wcpncpy_chk_warn
 (
__dest
, 
__src
, 
__n
,

232 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

234 return 
	`__wcpncpy_alias
 (
__dest
, 
__src
, 
__n
);

235 
	}
}

238 extern 
wchar_t
 *
	$__wcscat_chk
 (
wchar_t
 *
__restrict
 
__dest
,

239 const 
wchar_t
 *
__restrict
 
__src
,

240 
size_t
 
__destlen
) 
__THROW
;

241 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcscat_alias
,

242 (
wchar_t
 *
__restrict
 
__dest
,

243 const 
wchar_t
 *
__restrict
 
__src
), 
wcscat
);

245 
__fortify_function
 
wchar_t
 *

246 
	`__NTH
 (
	$wcscat
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

248 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

249 return 
	`__wcscat_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

250 return 
	`__wcscat_alias
 (
__dest
, 
__src
);

251 
	}
}

254 extern 
wchar_t
 *
	$__wcsncat_chk
 (
wchar_t
 *
__restrict
 
__dest
,

255 const 
wchar_t
 *
__restrict
 
__src
,

256 
size_t
 
__n
, size_t 
__destlen
) 
__THROW
;

257 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncat_alias
,

258 (
wchar_t
 *
__restrict
 
__dest
,

259 const 
wchar_t
 *
__restrict
 
__src
,

260 
size_t
 
__n
), 
wcsncat
);

262 
__fortify_function
 
wchar_t
 *

263 
	`__NTH
 (
	$wcsncat
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

264 
size_t
 
__n
))

266 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

267 return 
	`__wcsncat_chk
 (
__dest
, 
__src
, 
__n
,

268 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

269 return 
	`__wcsncat_alias
 (
__dest
, 
__src
, 
__n
);

270 
	}
}

273 extern int 
	$__swprintf_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

274 int 
__flag
, 
size_t
 
__s_len
,

275 const 
wchar_t
 *
__restrict
 
__format
, ...)

276 
__THROW
 ;

278 extern int 
	`__REDIRECT_NTH_LDBL
 (
__swprintf_alias
,

279 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

280 const 
wchar_t
 *
__restrict
 
__fmt
, ...),

281 
swprintf
);

283 #ifdef 
__va_arg_pack


284 
__fortify_function
 int

285 
	`__NTH
 (
	$swprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

286 const 
wchar_t
 *
__restrict
 
__fmt
, ...))

288 if (
	`__bos
 (
__s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1)

289 return 
	`__swprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
) / sizeof (
wchar_t
),

291 
__fmt
, 
	`__va_arg_pack
 ());

292 return 
	`__swprintf_alias
 (
__s
, 
__n
, 
__fmt
, 
	`__va_arg_pack
 ());

293 
	}
}

294 #elif !
defined
 
__cplusplus


296 #define 
	#swprintf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__swprintf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
) / sizeof (
wchar_t
), 
__VA_ARGS__
) \

300 : 
	`swprintf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 extern int 
	$__vswprintf_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

304 int 
__flag
, 
size_t
 
__s_len
,

305 const 
wchar_t
 *
__restrict
 
__format
,

306 
__gnuc_va_list
 
__arg
)

307 
__THROW
 ;

309 extern int 
	`__REDIRECT_NTH_LDBL
 (
__vswprintf_alias
,

310 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

311 const 
wchar_t
 *
__restrict
 
__fmt
,

312 
__gnuc_va_list
 
__ap
), 
vswprintf
);

314 
__fortify_function
 int

315 
	`__NTH
 (
	$vswprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

316 const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

318 if (
	`__bos
 (
__s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1)

319 return 
	`__vswprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
) / sizeof (
wchar_t
), 
__fmt
, 
__ap
);

321 return 
	`__vswprintf_alias
 (
__s
, 
__n
, 
__fmt
, 
__ap
);

322 
	}
}

325 #if 
__USE_FORTIFY_LEVEL
 > 1

327 extern int 
__fwprintf_chk
 (
__FILE
 *
__restrict
 
__stream
, int 
__flag
,

328 const 
wchar_t
 *
__restrict
 
__format
, ...);

329 extern int 
__wprintf_chk
 (int 
__flag
, const 
wchar_t
 *
__restrict
 
__format
,

331 extern int 
__vfwprintf_chk
 (
__FILE
 *
__restrict
 
__stream
, int 
__flag
,

332 const 
wchar_t
 *
__restrict
 
__format
,

333 
__gnuc_va_list
 
__ap
);

334 extern int 
__vwprintf_chk
 (int 
__flag
, const 
wchar_t
 *
__restrict
 
__format
,

335 
__gnuc_va_list
 
__ap
);

337 #ifdef 
__va_arg_pack


338 
__fortify_function
 int

339 
	$wprintf
 (const 
wchar_t
 *
__restrict
 
__fmt
, ...)

341 return 
	`__wprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

342 
	}
}

344 
__fortify_function
 int

345 
	$fwprintf
 (
__FILE
 *
__restrict
 
__stream
, const 
wchar_t
 *__restrict 
__fmt
, ...)

347 return 
	`__fwprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_arg_pack
 ());

349 
	}
}

350 #elif !
defined
 
__cplusplus


351 #define 
	#wprintf
(...) \

352 
	`__wprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 #define 
	#fwprintf
(
stream
, ...) \

354 
	`__fwprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__fortify_function
 int

358 
	$vwprintf
 (const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

360 return 
	`__vwprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

361 
	}
}

363 
__fortify_function
 int

364 
	$vfwprintf
 (
__FILE
 *
__restrict
 
__stream
,

365 const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

367 return 
	`__vfwprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

368 
	}
}

372 extern 
wchar_t
 *
	$__fgetws_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

373 
__FILE
 *
__restrict
 
__stream
) 
__wur
;

374 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_alias
,

375 (
wchar_t
 *
__restrict
 
__s
, int 
__n
,

376 
__FILE
 *
__restrict
 
__stream
), 
fgetws
) 
__wur
;

377 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_chk_warn
,

378 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

379 
__FILE
 *
__restrict
 
__stream
), 
__fgetws_chk
)

380 
__wur
 
	`__warnattr
 ("fgetws called with bigger size than length "

383 
__fortify_function
 
__wur
 
wchar_t
 *

384 
	$fgetws
 (
wchar_t
 *
__restrict
 
__s
, int 
__n
, 
__FILE
 *__restrict 
__stream
)

386 if (
	`__bos
 (
__s
) != (
size_t
) -1)

388 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

389 return 
	`__fgetws_chk
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

390 
__n
, 
__stream
);

392 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
) / sizeof (
wchar_t
))

393 return 
	`__fgetws_chk_warn
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

394 
__n
, 
__stream
);

396 return 
	`__fgetws_alias
 (
__s
, 
__n
, 
__stream
);

397 
	}
}

399 #ifdef 
__USE_GNU


400 extern 
wchar_t
 *
	$__fgetws_unlocked_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
,

401 int 
__n
, 
__FILE
 *
__restrict
 
__stream
)

402 
__wur
;

403 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_unlocked_alias
,

404 (
wchar_t
 *
__restrict
 
__s
, int 
__n
,

405 
__FILE
 *
__restrict
 
__stream
), 
fgetws_unlocked
)

406 
__wur
;

407 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_unlocked_chk_warn
,

408 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

409 
__FILE
 *
__restrict
 
__stream
),

410 
__fgetws_unlocked_chk
)

411 
__wur
 
	`__warnattr
 ("fgetws_unlocked called with bigger size than length "

414 
__fortify_function
 
__wur
 
wchar_t
 *

415 
	$fgetws_unlocked
 (
wchar_t
 *
__restrict
 
__s
, int 
__n
, 
__FILE
 *__restrict 
__stream
)

417 if (
	`__bos
 (
__s
) != (
size_t
) -1)

419 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

420 return 
	`__fgetws_unlocked_chk
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

421 
__n
, 
__stream
);

423 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
) / sizeof (
wchar_t
))

424 return 
	`__fgetws_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

425 
__n
, 
__stream
);

427 return 
	`__fgetws_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

428 
	}
}

432 extern 
size_t
 
	$__wcrtomb_chk
 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

433 
mbstate_t
 *
__restrict
 
__p
,

434 
size_t
 
__buflen
) 
__THROW
 
__wur
;

435 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcrtomb_alias
,

436 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

437 
mbstate_t
 *
__restrict
 
__ps
), 
wcrtomb
) 
__wur
;

439 
__fortify_function
 
__wur
 
size_t


440 
	`__NTH
 (
	$wcrtomb
 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

441 
mbstate_t
 *
__restrict
 
__ps
))

446 #define 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #if 
defined
 
MB_LEN_MAX
 && MB_LEN_MAX != 
__WCHAR_MB_LEN_MAX


450 if (
	`__bos
 (
__s
) != (
size_t
) -1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451 return 
	`__wcrtomb_chk
 (
__s
, 
__wchar
, 
__ps
, 
	`__bos
 (__s));

452 return 
	`__wcrtomb_alias
 (
__s
, 
__wchar
, 
__ps
);

453 
	}
}

456 extern 
size_t
 
	$__mbsrtowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

457 const char **
__restrict
 
__src
,

458 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

459 
size_t
 
__dstlen
) 
__THROW
;

460 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsrtowcs_alias
,

461 (
wchar_t
 *
__restrict
 
__dst
,

462 const char **
__restrict
 
__src
,

463 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

464 
mbsrtowcs
);

465 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsrtowcs_chk_warn
,

466 (
wchar_t
 *
__restrict
 
__dst
,

467 const char **
__restrict
 
__src
,

468 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

469 
size_t
 
__dstlen
), 
__mbsrtowcs_chk
)

470 
	`__warnattr
 ("mbsrtowcs called with dst buffer smaller than len "

473 
__fortify_function
 
size_t


474 
	`__NTH
 (
	$mbsrtowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char **__restrict 
__src
,

475 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

477 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

479 if (!
	`__builtin_constant_p
 (
__len
))

480 return 
	`__mbsrtowcs_chk
 (
__dst
, 
__src
, 
__len
, 
__ps
,

481 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

483 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

484 return 
	`__mbsrtowcs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
__ps
,

485 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

487 return 
	`__mbsrtowcs_alias
 (
__dst
, 
__src
, 
__len
, 
__ps
);

488 
	}
}

491 extern 
size_t
 
	$__wcsrtombs_chk
 (char *
__restrict
 
__dst
,

492 const 
wchar_t
 **
__restrict
 
__src
,

493 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

494 
size_t
 
__dstlen
) 
__THROW
;

495 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsrtombs_alias
,

496 (char *
__restrict
 
__dst
,

497 const 
wchar_t
 **
__restrict
 
__src
,

498 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

499 
wcsrtombs
);

500 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsrtombs_chk_warn
,

501 (char *
__restrict
 
__dst
,

502 const 
wchar_t
 **
__restrict
 
__src
,

503 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

504 
size_t
 
__dstlen
), 
__wcsrtombs_chk
)

505 
	`__warnattr
 ("wcsrtombs called with dst buffer smaller than len");

507 
__fortify_function
 
size_t


508 
	`__NTH
 (
	$wcsrtombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 **__restrict 
__src
,

509 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

511 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

513 if (!
	`__builtin_constant_p
 (
__len
))

514 return 
	`__wcsrtombs_chk
 (
__dst
, 
__src
, 
__len
, 
__ps
, 
	`__bos
 (__dst));

516 if (
__len
 > 
	`__bos
 (
__dst
))

517 return 
	`__wcsrtombs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
__ps
, 
	`__bos
 (__dst));

519 return 
	`__wcsrtombs_alias
 (
__dst
, 
__src
, 
__len
, 
__ps
);

520 
	}
}

523 #ifdef 
__USE_GNU


524 extern 
size_t
 
	$__mbsnrtowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

525 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

526 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

527 
size_t
 
__dstlen
) 
__THROW
;

528 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsnrtowcs_alias
,

529 (
wchar_t
 *
__restrict
 
__dst
,

530 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

531 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

532 
mbsnrtowcs
);

533 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsnrtowcs_chk_warn
,

534 (
wchar_t
 *
__restrict
 
__dst
,

535 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

536 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

537 
size_t
 
__dstlen
), 
__mbsnrtowcs_chk
)

538 
	`__warnattr
 ("mbsnrtowcs called with dst buffer smaller than len "

541 
__fortify_function
 
size_t


542 
	`__NTH
 (
	$mbsnrtowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char **__restrict 
__src
,

543 
size_t
 
__nmc
, size_t 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

545 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

547 if (!
	`__builtin_constant_p
 (
__len
))

548 return 
	`__mbsnrtowcs_chk
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
,

549 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

551 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

552 return 
	`__mbsnrtowcs_chk_warn
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
,

553 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

555 return 
	`__mbsnrtowcs_alias
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
);

556 
	}
}

559 extern 
size_t
 
	$__wcsnrtombs_chk
 (char *
__restrict
 
__dst
,

560 const 
wchar_t
 **
__restrict
 
__src
,

561 
size_t
 
__nwc
, size_t 
__len
,

562 
mbstate_t
 *
__restrict
 
__ps
, 
size_t
 
__dstlen
)

563 
__THROW
;

564 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsnrtombs_alias
,

565 (char *
__restrict
 
__dst
,

566 const 
wchar_t
 **
__restrict
 
__src
,

567 
size_t
 
__nwc
, size_t 
__len
,

568 
mbstate_t
 *
__restrict
 
__ps
), 
wcsnrtombs
);

569 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsnrtombs_chk_warn
,

570 (char *
__restrict
 
__dst
,

571 const 
wchar_t
 **
__restrict
 
__src
,

572 
size_t
 
__nwc
, size_t 
__len
,

573 
mbstate_t
 *
__restrict
 
__ps
,

574 
size_t
 
__dstlen
), 
__wcsnrtombs_chk
)

575 
	`__warnattr
 ("wcsnrtombs called with dst buffer smaller than len");

577 
__fortify_function
 
size_t


578 
	`__NTH
 (
	$wcsnrtombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 **__restrict 
__src
,

579 
size_t
 
__nwc
, size_t 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

581 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

583 if (!
	`__builtin_constant_p
 (
__len
))

584 return 
	`__wcsnrtombs_chk
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
,

585 
	`__bos
 (
__dst
));

587 if (
__len
 > 
	`__bos
 (
__dst
))

588 return 
	`__wcsnrtombs_chk_warn
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
,

589 
	`__bos
 (
__dst
));

591 return 
	`__wcsnrtombs_alias
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
);

592 
	}
}

	@/usr/include/linux/ioctl.h

1 #ifndef 
_LINUX_IOCTL_H


2 #define 
	#_LINUX_IOCTL_H


	)

4 #include 
	~<asm/ioctl.h
>

	@/usr/include/pthread.h

18 #ifndef 
_PTHREAD_H


19 #define 
	#_PTHREAD_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<endian.h
>

23 #include 
	~<sched.h
>

24 #include 
	~<time.h
>

26 #include 
	~<bits/pthreadtypes.h
>

27 #include 
	~<bits/setjmp.h
>

28 #include 
	~<bits/wordsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 #define 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 #define 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifdef 
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifdef 
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #if 
defined
 
__USE_POSIX199506
 || defined 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifdef 
__PTHREAD_MUTEX_HAVE_PREV


86 #define 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifdef 
__USE_GNU


89 #define 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 #define 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 #define 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 #define 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 #define 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifdef 
__USE_GNU


103 #define 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 #define 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 #define 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #ifndef 
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #if 
__WORDSIZE
 == 64

129 #define 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 #define 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

136 #ifdef 
__USE_GNU


137 #ifdef 
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


143 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 0, 0, 0 } }

	)

147 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 #define 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 #define 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 #define 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 #define 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 #define 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 #define 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 #define 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }

	)

192 struct 
	s_pthread_cleanup_buffer


194 void (*
	m__routine
) (void *);

195 void *
	m__arg
;

196 int 
	m__canceltype
;

197 struct 
_pthread_cleanup_buffer
 *
	m__prev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 #define 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 #define 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 #define 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 #define 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 #define 
	#PTHREAD_CANCELED
 ((void *) -1)

	)

219 #define 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifdef 
__USE_XOPEN2K


226 #define 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 extern int 
pthread_create
 (
pthread_t
 *
__restrict
 
__newthread
,

236 const 
pthread_attr_t
 *
__restrict
 
__attr
,

237 void *(*
__start_routine
) (void *),

238 void *
__restrict
 
__arg
) 
__THROWNL
 
__nonnull
 ((1, 3));

244 extern void 
	$pthread_exit
 (void *
__retval
) 
	`__attribute__
 ((
__noreturn__
));

252 extern int 
	`pthread_join
 (
pthread_t
 
__th
, void **
__thread_return
);

254 #ifdef 
__USE_GNU


257 extern int 
	$pthread_tryjoin_np
 (
pthread_t
 
__th
, void **
__thread_return
) 
__THROW
;

265 extern int 
	`pthread_timedjoin_np
 (
pthread_t
 
__th
, void **
__thread_return
,

266 const struct 
timespec
 *
__abstime
);

273 extern int 
	$pthread_detach
 (
pthread_t
 
__th
) 
__THROW
;

277 extern 
pthread_t
 
	$pthread_self
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

280 extern int 
	$pthread_equal
 (
pthread_t
 
__thread1
, pthread_t 
__thread2
)

281 
__THROW
 
	`__attribute__
 ((
__const__
));

289 extern int 
	$pthread_attr_init
 (
pthread_attr_t
 *
__attr
) 
__THROW
 
	`__nonnull
 ((1));

292 extern int 
	$pthread_attr_destroy
 (
pthread_attr_t
 *
__attr
)

293 
__THROW
 
	`__nonnull
 ((1));

296 extern int 
	$pthread_attr_getdetachstate
 (const 
pthread_attr_t
 *
__attr
,

297 int *
__detachstate
)

298 
__THROW
 
	`__nonnull
 ((1, 2));

301 extern int 
	$pthread_attr_setdetachstate
 (
pthread_attr_t
 *
__attr
,

302 int 
__detachstate
)

303 
__THROW
 
	`__nonnull
 ((1));

307 extern int 
	$pthread_attr_getguardsize
 (const 
pthread_attr_t
 *
__attr
,

308 
size_t
 *
__guardsize
)

309 
__THROW
 
	`__nonnull
 ((1, 2));

312 extern int 
	$pthread_attr_setguardsize
 (
pthread_attr_t
 *
__attr
,

313 
size_t
 
__guardsize
)

314 
__THROW
 
	`__nonnull
 ((1));

318 extern int 
	$pthread_attr_getschedparam
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

319 struct 
sched_param
 *
__restrict
 
__param
)

320 
__THROW
 
	`__nonnull
 ((1, 2));

323 extern int 
	$pthread_attr_setschedparam
 (
pthread_attr_t
 *
__restrict
 
__attr
,

324 const struct 
sched_param
 *
__restrict


325 
__param
) 
__THROW
 
	`__nonnull
 ((1, 2));

328 extern int 
	$pthread_attr_getschedpolicy
 (const 
pthread_attr_t
 *
__restrict


329 
__attr
, int *
__restrict
 
__policy
)

330 
__THROW
 
	`__nonnull
 ((1, 2));

333 extern int 
	$pthread_attr_setschedpolicy
 (
pthread_attr_t
 *
__attr
, int 
__policy
)

334 
__THROW
 
	`__nonnull
 ((1));

337 extern int 
	$pthread_attr_getinheritsched
 (const 
pthread_attr_t
 *
__restrict


338 
__attr
, int *
__restrict
 
__inherit
)

339 
__THROW
 
	`__nonnull
 ((1, 2));

342 extern int 
	$pthread_attr_setinheritsched
 (
pthread_attr_t
 *
__attr
,

343 int 
__inherit
)

344 
__THROW
 
	`__nonnull
 ((1));

348 extern int 
	$pthread_attr_getscope
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

349 int *
__restrict
 
__scope
)

350 
__THROW
 
	`__nonnull
 ((1, 2));

353 extern int 
	$pthread_attr_setscope
 (
pthread_attr_t
 *
__attr
, int 
__scope
)

354 
__THROW
 
	`__nonnull
 ((1));

357 extern int 
	$pthread_attr_getstackaddr
 (const 
pthread_attr_t
 *
__restrict


358 
__attr
, void **
__restrict
 
__stackaddr
)

359 
__THROW
 
	`__nonnull
 ((1, 2)) 
__attribute_deprecated__
;

365 extern int 
	$pthread_attr_setstackaddr
 (
pthread_attr_t
 *
__attr
,

366 void *
__stackaddr
)

367 
__THROW
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
;

370 extern int 
	$pthread_attr_getstacksize
 (const 
pthread_attr_t
 *
__restrict


371 
__attr
, 
size_t
 *
__restrict
 
__stacksize
)

372 
__THROW
 
	`__nonnull
 ((1, 2));

377 extern int 
	$pthread_attr_setstacksize
 (
pthread_attr_t
 *
__attr
,

378 
size_t
 
__stacksize
)

379 
__THROW
 
	`__nonnull
 ((1));

381 #ifdef 
__USE_XOPEN2K


383 extern int 
	$pthread_attr_getstack
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

384 void **
__restrict
 
__stackaddr
,

385 
size_t
 *
__restrict
 
__stacksize
)

386 
__THROW
 
	`__nonnull
 ((1, 2, 3));

391 extern int 
	$pthread_attr_setstack
 (
pthread_attr_t
 *
__attr
, void *
__stackaddr
,

392 
size_t
 
__stacksize
) 
__THROW
 
	`__nonnull
 ((1));

395 #ifdef 
__USE_GNU


398 extern int 
	$pthread_attr_setaffinity_np
 (
pthread_attr_t
 *
__attr
,

399 
size_t
 
__cpusetsize
,

400 const 
cpu_set_t
 *
__cpuset
)

401 
__THROW
 
	`__nonnull
 ((1, 3));

405 extern int 
	$pthread_attr_getaffinity_np
 (const 
pthread_attr_t
 *
__attr
,

406 
size_t
 
__cpusetsize
,

407 
cpu_set_t
 *
__cpuset
)

408 
__THROW
 
	`__nonnull
 ((1, 3));

414 extern int 
	$pthread_getattr_np
 (
pthread_t
 
__th
, 
pthread_attr_t
 *
__attr
)

415 
__THROW
 
	`__nonnull
 ((2));

423 extern int 
	$pthread_setschedparam
 (
pthread_t
 
__target_thread
, int 
__policy
,

424 const struct 
sched_param
 *
__param
)

425 
__THROW
 
	`__nonnull
 ((3));

428 extern int 
	$pthread_getschedparam
 (
pthread_t
 
__target_thread
,

429 int *
__restrict
 
__policy
,

430 struct 
sched_param
 *
__restrict
 
__param
)

431 
__THROW
 
	`__nonnull
 ((2, 3));

434 extern int 
	$pthread_setschedprio
 (
pthread_t
 
__target_thread
, int 
__prio
)

435 
__THROW
;

438 #ifdef 
__USE_GNU


440 extern int 
	$pthread_getname_np
 (
pthread_t
 
__target_thread
, char *
__buf
,

441 
size_t
 
__buflen
)

442 
__THROW
 
	`__nonnull
 ((2));

445 extern int 
	$pthread_setname_np
 (
pthread_t
 
__target_thread
, const char *
__name
)

446 
__THROW
 
	`__nonnull
 ((2));

450 #ifdef 
__USE_UNIX98


452 extern int 
	$pthread_getconcurrency
 (void) 
__THROW
;

455 extern int 
	$pthread_setconcurrency
 (int 
__level
) 
__THROW
;

458 #ifdef 
__USE_GNU


463 extern int 
	$pthread_yield
 (void) 
__THROW
;

468 extern int 
	$pthread_setaffinity_np
 (
pthread_t
 
__th
, 
size_t
 
__cpusetsize
,

469 const 
cpu_set_t
 *
__cpuset
)

470 
__THROW
 
	`__nonnull
 ((3));

473 extern int 
	$pthread_getaffinity_np
 (
pthread_t
 
__th
, 
size_t
 
__cpusetsize
,

474 
cpu_set_t
 *
__cpuset
)

475 
__THROW
 
	`__nonnull
 ((3));

488 extern int 
	`pthread_once
 (
pthread_once_t
 *
__once_control
,

489 void (*
__init_routine
) (void)) 
	`__nonnull
 ((1, 2));

500 extern int 
	`pthread_setcancelstate
 (int 
__state
, int *
__oldstate
);

504 extern int 
	`pthread_setcanceltype
 (int 
__type
, int *
__oldtype
);

507 extern int 
	`pthread_cancel
 (
pthread_t
 
__th
);

512 extern void 
	`pthread_testcancel
 (void);

521 
__jmp_buf
 
__cancel_jmp_buf
;

522 int 
__mask_was_saved
;

523 } 
__cancel_jmp_buf
[1];

524 void *
__pad
[4];

525 } 
	t__pthread_unwind_buf_t
 
	t__attribute__
 ((
	t__aligned__
));

528 #ifndef 
__cleanup_fct_attribute


529 #define 
	#__cleanup_fct_attribute


	)

534 struct 
	s__pthread_cleanup_frame


536 void (*
__cancel_routine
) (void *);

537 void *
__cancel_arg
;

538 int 
__do_it
;

539 int 
__cancel_type
;

542 #if 
defined
 
__GNUC__
 && defined 
__EXCEPTIONS


543 #ifdef 
__cplusplus


545 class 
	c__pthread_cleanup_class


547 void (*
__cancel_routine
) (void *);

548 void *
__cancel_arg
;

549 int 
__do_it
;

550 int 
__cancel_type
;

552 
public
:

553 
	`__pthread_cleanup_class
 (void (*
__fct
) (void *), void *
__arg
)

554 : 
	`__cancel_routine
 (
__fct
), 
	`__cancel_arg
 (
__arg
), 
	$__do_it
 (1) { }

555 ~
	$__pthread_cleanup_class
 () { if (
__do_it
) 
	`__cancel_routine
 (
__cancel_arg
); 
	}
}

556 void 
	$__setdoit
 (int 
__newval
) { 
__do_it
 = __newval; 
	}
}

557 void 
	$__defer
 () { 
	`pthread_setcanceltype
 (
PTHREAD_CANCEL_DEFERRED
,

558 &
__cancel_type
); 
	}
}

559 void 
	$__restore
 () const { 
	`pthread_setcanceltype
 (
__cancel_type
, 0); 
	}
}

569 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

571 
__pthread_cleanup_class
 
	`__clframe
 (
routine
, 
arg
)

	)

575 #define 
	#pthread_cleanup_pop
(
execute
) \

576 
__clframe
.
	`__setdoit
 (
execute
); \

577 } while (0)

	)

579 #ifdef 
__USE_GNU


583 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

585 
__pthread_cleanup_class
 
	`__clframe
 (
routine
, 
arg
); \

586 
__clframe
.
	`__defer
 ()

	)

591 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

592 
__clframe
.
	`__restore
 (); \

593 
__clframe
.
	`__setdoit
 (
execute
); \

594 } while (0)

	)

601 
__extern_inline
 void

602 
	$__pthread_cleanup_routine
 (struct 
__pthread_cleanup_frame
 *
__frame
)

604 if (
__frame
->
__do_it
)

605 
__frame
->
	`__cancel_routine
 (__frame->
__cancel_arg
);

606 
	}
}

615 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

617 struct 
__pthread_cleanup_frame
 
__clframe
 \

618 
	`__attribute__
 ((
	`__cleanup__
 (
__pthread_cleanup_routine
))) \

619 = { .
__cancel_routine
 = (
routine
), .
__cancel_arg
 = (
arg
), \

620 .
__do_it
 = 1 };

	)

624 #define 
	#pthread_cleanup_pop
(
execute
) \

625 
__clframe
.
__do_it
 = (
execute
); \

626 } while (0)

	)

628 #ifdef 
__USE_GNU


632 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

634 struct 
__pthread_cleanup_frame
 
__clframe
 \

635 
	`__attribute__
 ((
	`__cleanup__
 (
__pthread_cleanup_routine
))) \

636 = { .
__cancel_routine
 = (
routine
), .
__cancel_arg
 = (
arg
), \

637 .
__do_it
 = 1 }; \

638 (void) 
	`pthread_setcanceltype
 (
PTHREAD_CANCEL_DEFERRED
, \

639 &
__clframe
.
__cancel_type
)

	)

644 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

645 (void) 
	`pthread_setcanceltype
 (
__clframe
.
__cancel_type
, 
NULL
); \

646 
__clframe
.
__do_it
 = (
execute
); \

647 } while (0)

	)

658 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

660 
__pthread_unwind_buf_t
 
__cancel_buf
; \

661 void (*
__cancel_routine
) (void *) = (
routine
); \

662 void *
__cancel_arg
 = (
arg
); \

663 int 
__not_first_call
 = 
	`__sigsetjmp
 ((struct 
__jmp_buf_tag
 *) (void *) \

664 
__cancel_buf
.
__cancel_jmp_buf
, 0); \

665 if (
	`__glibc_unlikely
 (
__not_first_call
)) \

667 
	`__cancel_routine
 (
__cancel_arg
); \

668 
	`__pthread_unwind_next
 (&
__cancel_buf
); \

672 
	`__pthread_register_cancel
 (&
__cancel_buf
); \

673 do {

	)

674 extern void 
__pthread_register_cancel
 (
__pthread_unwind_buf_t
 *
__buf
)

675 
__cleanup_fct_attribute
;

679 #define 
	#pthread_cleanup_pop
(
execute
) \

682 
	`__pthread_unregister_cancel
 (&
__cancel_buf
); \

683 if (
execute
) \

684 
	`__cancel_routine
 (
__cancel_arg
); \

685 } while (0)

	)

686 extern void 
	$__pthread_unregister_cancel
 (
__pthread_unwind_buf_t
 *
__buf
)

687 
__cleanup_fct_attribute
;

689 #ifdef 
__USE_GNU


693 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

695 
__pthread_unwind_buf_t
 
__cancel_buf
; \

696 void (*
__cancel_routine
) (void *) = (
routine
); \

697 void *
__cancel_arg
 = (
arg
); \

698 int 
__not_first_call
 = 
	`__sigsetjmp
 ((struct 
__jmp_buf_tag
 *) (void *) \

699 
__cancel_buf
.
__cancel_jmp_buf
, 0); \

700 if (
	`__glibc_unlikely
 (
__not_first_call
)) \

702 
	`__cancel_routine
 (
__cancel_arg
); \

703 
	`__pthread_unwind_next
 (&
__cancel_buf
); \

707 
	`__pthread_register_cancel_defer
 (&
__cancel_buf
); \

708 do {

	)

709 extern void 
	`__pthread_register_cancel_defer
 (
__pthread_unwind_buf_t
 *
__buf
)

710 
__cleanup_fct_attribute
;

715 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

718 
	`__pthread_unregister_cancel_restore
 (&
__cancel_buf
); \

719 if (
execute
) \

720 
	`__cancel_routine
 (
__cancel_arg
); \

721 
	}
} while (0)

	)

722 extern void 
	$__pthread_unregister_cancel_restore
 (
__pthread_unwind_buf_t
 *
__buf
)

723 
__cleanup_fct_attribute
;

727 extern void 
	$__pthread_unwind_next
 (
__pthread_unwind_buf_t
 *
__buf
)

728 
__cleanup_fct_attribute
 
	`__attribute__
 ((
__noreturn__
))

729 #ifndef 
SHARED


730 
	`__attribute__
 ((
__weak__
))

736 struct 
__jmp_buf_tag
;

737 extern int 
	$__sigsetjmp
 (struct 
__jmp_buf_tag
 *
__env
, int 
__savemask
) 
__THROWNL
;

743 extern int 
	$pthread_mutex_init
 (
pthread_mutex_t
 *
__mutex
,

744 const 
pthread_mutexattr_t
 *
__mutexattr
)

745 
__THROW
 
	`__nonnull
 ((1));

748 extern int 
	$pthread_mutex_destroy
 (
pthread_mutex_t
 *
__mutex
)

749 
__THROW
 
	`__nonnull
 ((1));

752 extern int 
	$pthread_mutex_trylock
 (
pthread_mutex_t
 *
__mutex
)

753 
__THROWNL
 
	`__nonnull
 ((1));

756 extern int 
	$pthread_mutex_lock
 (
pthread_mutex_t
 *
__mutex
)

757 
__THROWNL
 
	`__nonnull
 ((1));

759 #ifdef 
__USE_XOPEN2K


761 extern int 
	$pthread_mutex_timedlock
 (
pthread_mutex_t
 *
__restrict
 
__mutex
,

762 const struct 
timespec
 *
__restrict


763 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

767 extern int 
	$pthread_mutex_unlock
 (
pthread_mutex_t
 *
__mutex
)

768 
__THROWNL
 
	`__nonnull
 ((1));

772 extern int 
	$pthread_mutex_getprioceiling
 (const 
pthread_mutex_t
 *

773 
__restrict
 
__mutex
,

774 int *
__restrict
 
__prioceiling
)

775 
__THROW
 
	`__nonnull
 ((1, 2));

779 extern int 
	$pthread_mutex_setprioceiling
 (
pthread_mutex_t
 *
__restrict
 
__mutex
,

780 int 
__prioceiling
,

781 int *
__restrict
 
__old_ceiling
)

782 
__THROW
 
	`__nonnull
 ((1, 3));

785 #ifdef 
__USE_XOPEN2K8


787 extern int 
	$pthread_mutex_consistent
 (
pthread_mutex_t
 *
__mutex
)

788 
__THROW
 
	`__nonnull
 ((1));

789 #ifdef 
__USE_GNU


790 extern int 
	$pthread_mutex_consistent_np
 (
pthread_mutex_t
 *
__mutex
)

791 
__THROW
 
	`__nonnull
 ((1));

800 extern int 
	$pthread_mutexattr_init
 (
pthread_mutexattr_t
 *
__attr
)

801 
__THROW
 
	`__nonnull
 ((1));

804 extern int 
	$pthread_mutexattr_destroy
 (
pthread_mutexattr_t
 *
__attr
)

805 
__THROW
 
	`__nonnull
 ((1));

808 extern int 
	$pthread_mutexattr_getpshared
 (const 
pthread_mutexattr_t
 *

809 
__restrict
 
__attr
,

810 int *
__restrict
 
__pshared
)

811 
__THROW
 
	`__nonnull
 ((1, 2));

814 extern int 
	$pthread_mutexattr_setpshared
 (
pthread_mutexattr_t
 *
__attr
,

815 int 
__pshared
)

816 
__THROW
 
	`__nonnull
 ((1));

818 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


820 extern int 
	$pthread_mutexattr_gettype
 (const 
pthread_mutexattr_t
 *
__restrict


821 
__attr
, int *
__restrict
 
__kind
)

822 
__THROW
 
	`__nonnull
 ((1, 2));

827 extern int 
	$pthread_mutexattr_settype
 (
pthread_mutexattr_t
 *
__attr
, int 
__kind
)

828 
__THROW
 
	`__nonnull
 ((1));

832 extern int 
	$pthread_mutexattr_getprotocol
 (const 
pthread_mutexattr_t
 *

833 
__restrict
 
__attr
,

834 int *
__restrict
 
__protocol
)

835 
__THROW
 
	`__nonnull
 ((1, 2));

839 extern int 
	$pthread_mutexattr_setprotocol
 (
pthread_mutexattr_t
 *
__attr
,

840 int 
__protocol
)

841 
__THROW
 
	`__nonnull
 ((1));

844 extern int 
	$pthread_mutexattr_getprioceiling
 (const 
pthread_mutexattr_t
 *

845 
__restrict
 
__attr
,

846 int *
__restrict
 
__prioceiling
)

847 
__THROW
 
	`__nonnull
 ((1, 2));

850 extern int 
	$pthread_mutexattr_setprioceiling
 (
pthread_mutexattr_t
 *
__attr
,

851 int 
__prioceiling
)

852 
__THROW
 
	`__nonnull
 ((1));

854 #ifdef 
__USE_XOPEN2K


856 extern int 
	$pthread_mutexattr_getrobust
 (const 
pthread_mutexattr_t
 *
__attr
,

857 int *
__robustness
)

858 
__THROW
 
	`__nonnull
 ((1, 2));

859 #ifdef 
__USE_GNU


860 extern int 
	$pthread_mutexattr_getrobust_np
 (const 
pthread_mutexattr_t
 *
__attr
,

861 int *
__robustness
)

862 
__THROW
 
	`__nonnull
 ((1, 2));

866 extern int 
	$pthread_mutexattr_setrobust
 (
pthread_mutexattr_t
 *
__attr
,

867 int 
__robustness
)

868 
__THROW
 
	`__nonnull
 ((1));

869 #ifdef 
__USE_GNU


870 extern int 
	$pthread_mutexattr_setrobust_np
 (
pthread_mutexattr_t
 *
__attr
,

871 int 
__robustness
)

872 
__THROW
 
	`__nonnull
 ((1));

877 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


882 extern int 
	$pthread_rwlock_init
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

883 const 
pthread_rwlockattr_t
 *
__restrict


884 
__attr
) 
__THROW
 
	`__nonnull
 ((1));

887 extern int 
	$pthread_rwlock_destroy
 (
pthread_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__nonnull
 ((1));

891 extern int 
	$pthread_rwlock_rdlock
 (
pthread_rwlock_t
 *
__rwlock
)

892 
__THROWNL
 
	`__nonnull
 ((1));

895 extern int 
	$pthread_rwlock_tryrdlock
 (
pthread_rwlock_t
 *
__rwlock
)

896 
__THROWNL
 
	`__nonnull
 ((1));

898 #ifdef 
__USE_XOPEN2K


900 extern int 
	$pthread_rwlock_timedrdlock
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

901 const struct 
timespec
 *
__restrict


902 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

906 extern int 
	$pthread_rwlock_wrlock
 (
pthread_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__nonnull
 ((1));

910 extern int 
	$pthread_rwlock_trywrlock
 (
pthread_rwlock_t
 *
__rwlock
)

911 
__THROWNL
 
	`__nonnull
 ((1));

913 #ifdef 
__USE_XOPEN2K


915 extern int 
	$pthread_rwlock_timedwrlock
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

916 const struct 
timespec
 *
__restrict


917 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

921 extern int 
	$pthread_rwlock_unlock
 (
pthread_rwlock_t
 *
__rwlock
)

922 
__THROWNL
 
	`__nonnull
 ((1));

928 extern int 
	$pthread_rwlockattr_init
 (
pthread_rwlockattr_t
 *
__attr
)

929 
__THROW
 
	`__nonnull
 ((1));

932 extern int 
	$pthread_rwlockattr_destroy
 (
pthread_rwlockattr_t
 *
__attr
)

933 
__THROW
 
	`__nonnull
 ((1));

936 extern int 
	$pthread_rwlockattr_getpshared
 (const 
pthread_rwlockattr_t
 *

937 
__restrict
 
__attr
,

938 int *
__restrict
 
__pshared
)

939 
__THROW
 
	`__nonnull
 ((1, 2));

942 extern int 
	$pthread_rwlockattr_setpshared
 (
pthread_rwlockattr_t
 *
__attr
,

943 int 
__pshared
)

944 
__THROW
 
	`__nonnull
 ((1));

947 extern int 
	$pthread_rwlockattr_getkind_np
 (const 
pthread_rwlockattr_t
 *

948 
__restrict
 
__attr
,

949 int *
__restrict
 
__pref
)

950 
__THROW
 
	`__nonnull
 ((1, 2));

953 extern int 
	$pthread_rwlockattr_setkind_np
 (
pthread_rwlockattr_t
 *
__attr
,

954 int 
__pref
) 
__THROW
 
	`__nonnull
 ((1));

962 extern int 
	$pthread_cond_init
 (
pthread_cond_t
 *
__restrict
 
__cond
,

963 const 
pthread_condattr_t
 *
__restrict
 
__cond_attr
)

964 
__THROW
 
	`__nonnull
 ((1));

967 extern int 
	$pthread_cond_destroy
 (
pthread_cond_t
 *
__cond
)

968 
__THROW
 
	`__nonnull
 ((1));

971 extern int 
	$pthread_cond_signal
 (
pthread_cond_t
 *
__cond
)

972 
__THROWNL
 
	`__nonnull
 ((1));

975 extern int 
	$pthread_cond_broadcast
 (
pthread_cond_t
 *
__cond
)

976 
__THROWNL
 
	`__nonnull
 ((1));

983 extern int 
	$pthread_cond_wait
 (
pthread_cond_t
 *
__restrict
 
__cond
,

984 
pthread_mutex_t
 *
__restrict
 
__mutex
)

985 
	`__nonnull
 ((1, 2));

994 extern int 
	$pthread_cond_timedwait
 (
pthread_cond_t
 *
__restrict
 
__cond
,

995 
pthread_mutex_t
 *
__restrict
 
__mutex
,

996 const struct 
timespec
 *
__restrict
 
__abstime
)

997 
	`__nonnull
 ((1, 2, 3));

1002 extern int 
	$pthread_condattr_init
 (
pthread_condattr_t
 *
__attr
)

1003 
__THROW
 
	`__nonnull
 ((1));

1006 extern int 
	$pthread_condattr_destroy
 (
pthread_condattr_t
 *
__attr
)

1007 
__THROW
 
	`__nonnull
 ((1));

1010 extern int 
	$pthread_condattr_getpshared
 (const 
pthread_condattr_t
 *

1011 
__restrict
 
__attr
,

1012 int *
__restrict
 
__pshared
)

1013 
__THROW
 
	`__nonnull
 ((1, 2));

1016 extern int 
	$pthread_condattr_setpshared
 (
pthread_condattr_t
 *
__attr
,

1017 int 
__pshared
) 
__THROW
 
	`__nonnull
 ((1));

1019 #ifdef 
__USE_XOPEN2K


1021 extern int 
	$pthread_condattr_getclock
 (const 
pthread_condattr_t
 *

1022 
__restrict
 
__attr
,

1023 
__clockid_t
 *
__restrict
 
__clock_id
)

1024 
__THROW
 
	`__nonnull
 ((1, 2));

1027 extern int 
	$pthread_condattr_setclock
 (
pthread_condattr_t
 *
__attr
,

1028 
__clockid_t
 
__clock_id
)

1029 
__THROW
 
	`__nonnull
 ((1));

1033 #ifdef 
__USE_XOPEN2K


1038 extern int 
	$pthread_spin_init
 (
pthread_spinlock_t
 *
__lock
, int 
__pshared
)

1039 
__THROW
 
	`__nonnull
 ((1));

1042 extern int 
	$pthread_spin_destroy
 (
pthread_spinlock_t
 *
__lock
)

1043 
__THROW
 
	`__nonnull
 ((1));

1046 extern int 
	$pthread_spin_lock
 (
pthread_spinlock_t
 *
__lock
)

1047 
__THROWNL
 
	`__nonnull
 ((1));

1050 extern int 
	$pthread_spin_trylock
 (
pthread_spinlock_t
 *
__lock
)

1051 
__THROWNL
 
	`__nonnull
 ((1));

1054 extern int 
	$pthread_spin_unlock
 (
pthread_spinlock_t
 *
__lock
)

1055 
__THROWNL
 
	`__nonnull
 ((1));

1062 extern int 
	$pthread_barrier_init
 (
pthread_barrier_t
 *
__restrict
 
__barrier
,

1063 const 
pthread_barrierattr_t
 *
__restrict


1064 
__attr
, unsigned int 
__count
)

1065 
__THROW
 
	`__nonnull
 ((1));

1068 extern int 
	$pthread_barrier_destroy
 (
pthread_barrier_t
 *
__barrier
)

1069 
__THROW
 
	`__nonnull
 ((1));

1072 extern int 
	$pthread_barrier_wait
 (
pthread_barrier_t
 *
__barrier
)

1073 
__THROWNL
 
	`__nonnull
 ((1));

1077 extern int 
	$pthread_barrierattr_init
 (
pthread_barrierattr_t
 *
__attr
)

1078 
__THROW
 
	`__nonnull
 ((1));

1081 extern int 
	$pthread_barrierattr_destroy
 (
pthread_barrierattr_t
 *
__attr
)

1082 
__THROW
 
	`__nonnull
 ((1));

1085 extern int 
	$pthread_barrierattr_getpshared
 (const 
pthread_barrierattr_t
 *

1086 
__restrict
 
__attr
,

1087 int *
__restrict
 
__pshared
)

1088 
__THROW
 
	`__nonnull
 ((1, 2));

1091 extern int 
	$pthread_barrierattr_setpshared
 (
pthread_barrierattr_t
 *
__attr
,

1092 int 
__pshared
)

1093 
__THROW
 
	`__nonnull
 ((1));

1105 extern int 
	`pthread_key_create
 (
pthread_key_t
 *
__key
,

1106 void (*
__destr_function
) (void *))

1107 
__THROW
 
	`__nonnull
 ((1));

1110 extern int 
	$pthread_key_delete
 (
pthread_key_t
 
__key
) 
__THROW
;

1113 extern void *
	$pthread_getspecific
 (
pthread_key_t
 
__key
) 
__THROW
;

1116 extern int 
	$pthread_setspecific
 (
pthread_key_t
 
__key
,

1117 const void *
__pointer
) 
__THROW
 ;

1120 #ifdef 
__USE_XOPEN2K


1122 extern int 
	$pthread_getcpuclockid
 (
pthread_t
 
__thread_id
,

1123 
__clockid_t
 *
__clock_id
)

1124 
__THROW
 
	`__nonnull
 ((2));

1139 extern int 
	`pthread_atfork
 (void (*
__prepare
) (void),

1140 void (*
__parent
) (void),

1141 void (*
__child
) (void)) 
__THROW
;

1144 #ifdef 
__USE_EXTERN_INLINES


1146 
__extern_inline
 int

1147 
	`__NTH
 (
	$pthread_equal
 (
pthread_t
 
__thread1
, pthread_t 
__thread2
))

1149 return 
__thread1
 == 
__thread2
;

1150 
	}
}

1153 
	g__END_DECLS


	@/usr/include/wctype.h

23 #ifndef 
_WCTYPE_H


25 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 #ifndef 
__need_iswxxx


29 #define 
	#_WCTYPE_H
 1

	)

32 #define 
	#__need_wint_t


	)

33 #include 
	~<wchar.h
>

37 #ifndef 
WEOF


38 #define 
	#WEOF
 (0xffffffffu)

	)

41 #undef 
__need_iswxxx


46 #ifndef 
__iswxxx_defined


47 #define 
	#__iswxxx_defined
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 typedef unsigned long int 
	twctype_t
;

53 
	g__END_NAMESPACE_C99


55 #ifndef 
_ISwbit


60 #include 
	~<endian.h
>

61 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


62 #define 
	#_ISwbit
(
bit
) (1 << (bit))

	)

64 #define 
	#_ISwbit
(
bit
) \

65 ((
bit
) < 8 ? (int) ((1UL << (bit)) << 24) \

66 : ((
bit
) < 16 ? (int) ((1UL << (bit)) << 8) \

67 : ((
bit
) < 24 ? (int) ((1UL << (bit)) >> 8) \

68 : (int) ((1UL << (
bit
)) >> 24))))

	)

73 
	m__ISwupper
 = 0,

74 
	m__ISwlower
 = 1,

75 
	m__ISwalpha
 = 2,

76 
	m__ISwdigit
 = 3,

77 
	m__ISwxdigit
 = 4,

78 
	m__ISwspace
 = 5,

79 
	m__ISwprint
 = 6,

80 
	m__ISwgraph
 = 7,

81 
	m__ISwblank
 = 8,

82 
	m__ISwcntrl
 = 9,

83 
	m__ISwpunct
 = 10,

84 
	m__ISwalnum
 = 11,

86 
	m_ISwupper
 = 
_ISwbit
 (
__ISwupper
),

87 
	m_ISwlower
 = 
_ISwbit
 (
__ISwlower
),

88 
	m_ISwalpha
 = 
_ISwbit
 (
__ISwalpha
),

89 
	m_ISwdigit
 = 
_ISwbit
 (
__ISwdigit
),

90 
	m_ISwxdigit
 = 
_ISwbit
 (
__ISwxdigit
),

91 
	m_ISwspace
 = 
_ISwbit
 (
__ISwspace
),

92 
	m_ISwprint
 = 
_ISwbit
 (
__ISwprint
),

93 
	m_ISwgraph
 = 
_ISwbit
 (
__ISwgraph
),

94 
	m_ISwblank
 = 
_ISwbit
 (
__ISwblank
),

95 
	m_ISwcntrl
 = 
_ISwbit
 (
__ISwcntrl
),

96 
	m_ISwpunct
 = 
_ISwbit
 (
__ISwpunct
),

97 
	m_ISwalnum
 = 
_ISwbit
 (
__ISwalnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 extern int 
	$iswalnum
 (
wint_t
 
__wc
) 
__THROW
;

117 extern int 
	$iswalpha
 (
wint_t
 
__wc
) 
__THROW
;

120 extern int 
	$iswcntrl
 (
wint_t
 
__wc
) 
__THROW
;

124 extern int 
	$iswdigit
 (
wint_t
 
__wc
) 
__THROW
;

128 extern int 
	$iswgraph
 (
wint_t
 
__wc
) 
__THROW
;

133 extern int 
	$iswlower
 (
wint_t
 
__wc
) 
__THROW
;

136 extern int 
	$iswprint
 (
wint_t
 
__wc
) 
__THROW
;

141 extern int 
	$iswpunct
 (
wint_t
 
__wc
) 
__THROW
;

146 extern int 
	$iswspace
 (
wint_t
 
__wc
) 
__THROW
;

151 extern int 
	$iswupper
 (
wint_t
 
__wc
) 
__THROW
;

156 extern int 
	$iswxdigit
 (
wint_t
 
__wc
) 
__THROW
;

161 #ifdef 
__USE_ISOC99


162 extern int 
	$iswblank
 (
wint_t
 
__wc
) 
__THROW
;

171 extern 
wctype_t
 
	$wctype
 (const char *
__property
) 
__THROW
;

175 extern int 
	$iswctype
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
) 
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 typedef const 
	t__int32_t
 *
	twctrans_t
;

187 
__END_NAMESPACE_C99


188 #ifdef 
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
wctrans_t
)

192 
__BEGIN_NAMESPACE_C99


194 extern 
wint_t
 
	$towlower
 (
wint_t
 
__wc
) 
__THROW
;

197 extern 
wint_t
 
	$towupper
 (
wint_t
 
__wc
) 
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifdef 
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 extern 
wctrans_t
 
	$wctrans
 (const char *
__property
) 
__THROW
;

221 extern 
wint_t
 
	$towctrans
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
) 
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifdef 
__USE_XOPEN2K8


226 #include 
	~<xlocale.h
>

230 extern int 
	$iswalnum_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

236 extern int 
	$iswalpha_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

239 extern int 
	$iswcntrl_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

243 extern int 
	$iswdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

247 extern int 
	$iswgraph_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

252 extern int 
	$iswlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

255 extern int 
	$iswprint_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

260 extern int 
	$iswpunct_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

265 extern int 
	$iswspace_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

270 extern int 
	$iswupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

275 extern int 
	$iswxdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

280 extern int 
	$iswblank_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

284 extern 
wctype_t
 
	$wctype_l
 (const char *
__property
, 
__locale_t
 
__locale
)

285 
__THROW
;

289 extern int 
	$iswctype_l
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
, 
__locale_t
 
__locale
)

290 
__THROW
;

298 extern 
wint_t
 
	$towlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

301 extern 
wint_t
 
	$towupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

305 extern 
wctrans_t
 
	$wctrans_l
 (const char *
__property
, 
__locale_t
 
__locale
)

306 
__THROW
;

309 extern 
wint_t
 
	$towctrans_l
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
,

310 
__locale_t
 
__locale
) 
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #ifndef 
_ASM_GENERIC_ERRNO_BASE_H


2 #define 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 #define 
	#EPERM
 1

	)

5 #define 
	#ENOENT
 2

	)

6 #define 
	#ESRCH
 3

	)

7 #define 
	#EINTR
 4

	)

8 #define 
	#EIO
 5

	)

9 #define 
	#ENXIO
 6

	)

10 #define 
	#E2BIG
 7

	)

11 #define 
	#ENOEXEC
 8

	)

12 #define 
	#EBADF
 9

	)

13 #define 
	#ECHILD
 10

	)

14 #define 
	#EAGAIN
 11

	)

15 #define 
	#ENOMEM
 12

	)

16 #define 
	#EACCES
 13

	)

17 #define 
	#EFAULT
 14

	)

18 #define 
	#ENOTBLK
 15

	)

19 #define 
	#EBUSY
 16

	)

20 #define 
	#EEXIST
 17

	)

21 #define 
	#EXDEV
 18

	)

22 #define 
	#ENODEV
 19

	)

23 #define 
	#ENOTDIR
 20

	)

24 #define 
	#EISDIR
 21

	)

25 #define 
	#EINVAL
 22

	)

26 #define 
	#ENFILE
 23

	)

27 #define 
	#EMFILE
 24

	)

28 #define 
	#ENOTTY
 25

	)

29 #define 
	#ETXTBSY
 26

	)

30 #define 
	#EFBIG
 27

	)

31 #define 
	#ENOSPC
 28

	)

32 #define 
	#ESPIPE
 29

	)

33 #define 
	#EROFS
 30

	)

34 #define 
	#EMLINK
 31

	)

35 #define 
	#EPIPE
 32

	)

36 #define 
	#EDOM
 33

	)

37 #define 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 #include 
	~<asm-generic/ioctl.h
>

	@/usr/include/bits/setjmp.h

19 #ifndef 
_BITS_SETJMP_H


20 #define 
	#_BITS_SETJMP_H
 1

	)

22 #if !
defined
 
_SETJMP_H
 && !defined 
_PTHREAD_H


26 #include 
	~<bits/wordsize.h
>

28 #ifndef 
_ASM


30 #if 
__WORDSIZE
 == 64

31 typedef long int 
	t__jmp_buf
[8];

32 #elif 
defined
 
__x86_64__


33 typedef long long int 
	t__jmp_buf
[8];

35 typedef int 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #ifndef 
_SCHED_H


21 #define 
	#_SCHED_H
 1

	)

23 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 #define 
	#__need_size_t


	)

29 #include 
	~<stddef.h
>

31 #define 
	#__need_time_t


	)

32 #define 
	#__need_timespec


	)

33 #include 
	~<time.h
>

35 #ifndef 
__pid_t_defined


36 typedef 
__pid_t
 
	tpid_t
;

37 #define 
	#__pid_t_defined


	)

42 #include 
	~<bits/sched.h
>

44 #define 
	#sched_priority
 
__sched_priority


	)

47 
__BEGIN_DECLS


50 extern int 
	$sched_setparam
 (
__pid_t
 
__pid
, const struct 
sched_param
 *
__param
)

51 
__THROW
;

54 extern int 
	$sched_getparam
 (
__pid_t
 
__pid
, struct 
sched_param
 *
__param
) 
__THROW
;

57 extern int 
	$sched_setscheduler
 (
__pid_t
 
__pid
, int 
__policy
,

58 const struct 
sched_param
 *
__param
) 
__THROW
;

61 extern int 
	$sched_getscheduler
 (
__pid_t
 
__pid
) 
__THROW
;

64 extern int 
	$sched_yield
 (void) 
__THROW
;

67 extern int 
	$sched_get_priority_max
 (int 
__algorithm
) 
__THROW
;

70 extern int 
	$sched_get_priority_min
 (int 
__algorithm
) 
__THROW
;

73 extern int 
	$sched_rr_get_interval
 (
__pid_t
 
__pid
, struct 
timespec
 *
__t
) 
__THROW
;

76 #ifdef 
__USE_GNU


78 #define 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 #define 
	#CPU_SET
(
cpu
, 
cpusetp
) 
	`__CPU_SET_S
 (cpu, sizeof (
cpu_set_t
), cpusetp)

	)

80 #define 
	#CPU_CLR
(
cpu
, 
cpusetp
) 
	`__CPU_CLR_S
 (cpu, sizeof (
cpu_set_t
), cpusetp)

	)

81 #define 
	#CPU_ISSET
(
cpu
, 
cpusetp
) 
	`__CPU_ISSET_S
 (cpu, sizeof (
cpu_set_t
), \

82 
cpusetp
)

	)

83 #define 
	#CPU_ZERO
(
cpusetp
) 
	`__CPU_ZERO_S
 (sizeof (
cpu_set_t
), cpusetp)

	)

84 #define 
	#CPU_COUNT
(
cpusetp
) 
	`__CPU_COUNT_S
 (sizeof (
cpu_set_t
), cpusetp)

	)

86 #define 
	#CPU_SET_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_SET_S
 (cpu, setsize, cpusetp)

	)

87 #define 
	#CPU_CLR_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_CLR_S
 (cpu, setsize, cpusetp)

	)

88 #define 
	#CPU_ISSET_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
cpusetp
)

	)

90 #define 
	#CPU_ZERO_S
(
setsize
, 
cpusetp
) 
	`__CPU_ZERO_S
 (setsize, cpusetp)

	)

91 #define 
	#CPU_COUNT_S
(
setsize
, 
cpusetp
) 
	`__CPU_COUNT_S
 (setsize, cpusetp)

	)

93 #define 
	#CPU_EQUAL
(
cpusetp1
, 
cpusetp2
) \

94 
	`__CPU_EQUAL_S
 (sizeof (
cpu_set_t
), 
cpusetp1
, 
cpusetp2
)

	)

95 #define 
	#CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

96 
	`__CPU_EQUAL_S
 (
setsize
, 
cpusetp1
, 
cpusetp2
)

	)

98 #define 
	#CPU_AND
(
destset
, 
srcset1
, 
srcset2
) \

99 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, &)

	)

100 #define 
	#CPU_OR
(
destset
, 
srcset1
, 
srcset2
) \

101 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, |)

	)

102 #define 
	#CPU_XOR
(
destset
, 
srcset1
, 
srcset2
) \

103 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, ^)

	)

104 #define 
	#CPU_AND_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

105 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, &)

	)

106 #define 
	#CPU_OR_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

107 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, |)

	)

108 #define 
	#CPU_XOR_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

109 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, ^)

	)

111 #define 
	#CPU_ALLOC_SIZE
(
count
) 
	`__CPU_ALLOC_SIZE
 (count)

	)

112 #define 
	#CPU_ALLOC
(
count
) 
	`__CPU_ALLOC
 (count)

	)

113 #define 
	#CPU_FREE
(
cpuset
) 
	`__CPU_FREE
 (cpuset)

	)

117 extern int 
	$sched_setaffinity
 (
__pid_t
 
__pid
, 
size_t
 
__cpusetsize
,

118 const 
cpu_set_t
 *
__cpuset
) 
__THROW
;

121 extern int 
	$sched_getaffinity
 (
__pid_t
 
__pid
, 
size_t
 
__cpusetsize
,

122 
cpu_set_t
 *
__cpuset
) 
__THROW
;

125 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #ifndef 
_ASM_GENERIC_IOCTL_H


2 #define 
	#_ASM_GENERIC_IOCTL_H


	)

22 #define 
	#_IOC_NRBITS
 8

	)

23 #define 
	#_IOC_TYPEBITS
 8

	)

30 #ifndef 
_IOC_SIZEBITS


31 #define 
	#_IOC_SIZEBITS
 14

	)

34 #ifndef 
_IOC_DIRBITS


35 #define 
	#_IOC_DIRBITS
 2

	)

38 #define 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 #define 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 #define 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 #define 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 #define 
	#_IOC_NRSHIFT
 0

	)

44 #define 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 #define 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 #define 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

56 #ifndef 
_IOC_NONE


57 #define 
	#_IOC_NONE
 0U

	)

60 #ifndef 
_IOC_WRITE


61 #define 
	#_IOC_WRITE
 1U

	)

64 #ifndef 
_IOC_READ


65 #define 
	#_IOC_READ
 2U

	)

68 #define 
	#_IOC
(
dir
,
type
,
nr
,
size
) \

69 (((
dir
) << 
_IOC_DIRSHIFT
) | \

70 ((
type
) << 
_IOC_TYPESHIFT
) | \

71 ((
nr
) << 
_IOC_NRSHIFT
) | \

72 ((
size
) << 
_IOC_SIZESHIFT
))

	)

74 #define 
	#_IOC_TYPECHECK
(
t
) (sizeof(t))

	)

82 #define 
	#_IO
(
type
,
nr
) 
	`_IOC
(
_IOC_NONE
,(type),(nr),0)

	)

83 #define 
	#_IOR
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

84 #define 
	#_IOW
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_WRITE
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

85 #define 
	#_IOWR
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

86 #define 
	#_IOR_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
,(type),(nr),sizeof(size))

	)

87 #define 
	#_IOW_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_WRITE
,(type),(nr),sizeof(size))

	)

88 #define 
	#_IOWR_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,(type),(nr),sizeof(size))

	)

91 #define 
	#_IOC_DIR
(
nr
) (((nr) >> 
_IOC_DIRSHIFT
) & 
_IOC_DIRMASK
)

	)

92 #define 
	#_IOC_TYPE
(
nr
) (((nr) >> 
_IOC_TYPESHIFT
) & 
_IOC_TYPEMASK
)

	)

93 #define 
	#_IOC_NR
(
nr
) (((nr) >> 
_IOC_NRSHIFT
) & 
_IOC_NRMASK
)

	)

94 #define 
	#_IOC_SIZE
(
nr
) (((nr) >> 
_IOC_SIZESHIFT
) & 
_IOC_SIZEMASK
)

	)

98 #define 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

99 #define 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

100 #define 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
) << 
_IOC_DIRSHIFT
)

	)

101 #define 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

102 #define 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/sched.h

21 #ifndef 
__need_schedparam


23 #ifndef 
_SCHED_H


29 #define 
	#SCHED_OTHER
 0

	)

30 #define 
	#SCHED_FIFO
 1

	)

31 #define 
	#SCHED_RR
 2

	)

32 #ifdef 
__USE_GNU


33 #define 
	#SCHED_BATCH
 3

	)

34 #define 
	#SCHED_IDLE
 5

	)

36 #define 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifdef 
__USE_GNU


41 #define 
	#CSIGNAL
 0x000000ff

	)

42 #define 
	#CLONE_VM
 0x00000100

	)

43 #define 
	#CLONE_FS
 0x00000200

	)

44 #define 
	#CLONE_FILES
 0x00000400

	)

45 #define 
	#CLONE_SIGHAND
 0x00000800

	)

46 #define 
	#CLONE_PTRACE
 0x00002000

	)

47 #define 
	#CLONE_VFORK
 0x00004000

	)

49 #define 
	#CLONE_PARENT
 0x00008000

	)

51 #define 
	#CLONE_THREAD
 0x00010000

	)

52 #define 
	#CLONE_NEWNS
 0x00020000

	)

53 #define 
	#CLONE_SYSVSEM
 0x00040000

	)

54 #define 
	#CLONE_SETTLS
 0x00080000

	)

55 #define 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 #define 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 #define 
	#CLONE_DETACHED
 0x00400000

	)

60 #define 
	#CLONE_UNTRACED
 0x00800000

	)

62 #define 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 #define 
	#CLONE_NEWUTS
 0x04000000

	)

65 #define 
	#CLONE_NEWIPC
 0x08000000

	)

66 #define 
	#CLONE_NEWUSER
 0x10000000

	)

67 #define 
	#CLONE_NEWPID
 0x20000000

	)

68 #define 
	#CLONE_NEWNET
 0x40000000

	)

69 #define 
	#CLONE_IO
 0x80000000

	)

73 struct 
	ssched_param


75 int 
	m__sched_priority
;

78 
	g__BEGIN_DECLS


80 #ifdef 
__USE_GNU


82 extern int 
clone
 (int (*
__fn
) (void *
__arg
), void *
__child_stack
,

83 int 
__flags
, void *
__arg
, ...) 
__THROW
;

86 extern int 
	$unshare
 (int 
__flags
) 
__THROW
;

89 extern int 
	$sched_getcpu
 (void) 
__THROW
;

92 extern int 
	$setns
 (int 
__fd
, int 
__nstype
) 
__THROW
;

96 
__END_DECLS


100 #if !
defined
 
__defined_schedparam
 \

101 && (
defined
 
__need_schedparam
 || defined 
_SCHED_H
)

102 #define 
	#__defined_schedparam
 1

	)

104 struct 
	s__sched_param


106 int 
__sched_priority
;

108 #undef 
__need_schedparam


112 #if 
defined
 
_SCHED_H
 && !defined 
__cpu_set_t_defined


113 #define 
	#__cpu_set_t_defined


	)

115 #define 
	#__CPU_SETSIZE
 1024

	)

116 #define 
	#__NCPUBITS
 (8 * sizeof (
__cpu_mask
))

	)

119 typedef unsigned long int 
	t__cpu_mask
;

122 #define 
	#__CPUELT
(
cpu
) ((cpu) / 
__NCPUBITS
)

	)

123 #define 
	#__CPUMASK
(
cpu
) ((
__cpu_mask
) 1 << ((cpu) % 
__NCPUBITS
))

	)

128 
__cpu_mask
 
__bits
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	tcpu_set_t
;

132 #if 
	`__GNUC_PREREQ
 (2, 91)

133 #define 
	#__CPU_ZERO_S
(
setsize
, 
cpusetp
) \

134 do 
	`__builtin_memset
 (
cpusetp
, '\0', 
setsize
); while (0)

	)

136 #define 
	#__CPU_ZERO_S
(
setsize
, 
cpusetp
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

140 
__cpu_mask
 *
__bits
 = (
cpusetp
)->__bits; \

141 for (
__i
 = 0; __i < 
__imax
; ++__i) \

142 
__bits
[
__i
] = 0; \

143 
	}
} while (0)

	)

145 #define 
	#__CPU_SET_S
(
cpu
, 
setsize
, 
cpusetp
) \

146 (
__extension__
 \

147 ({ 
size_t
 
__cpu
 = (
cpu
); \

148 
__cpu
 < 8 * (
setsize
) \

149 ? (((
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

150 |= 
	`__CPUMASK
 (
__cpu
)) \

151 : 0; }))

	)

152 #define 
	#__CPU_CLR_S
(
cpu
, 
setsize
, 
cpusetp
) \

153 (
__extension__
 \

154 ({ 
size_t
 
__cpu
 = (
cpu
); \

155 
__cpu
 < 8 * (
setsize
) \

156 ? (((
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

157 &= ~
	`__CPUMASK
 (
__cpu
)) \

158 : 0; }))

	)

159 #define 
	#__CPU_ISSET_S
(
cpu
, 
setsize
, 
cpusetp
) \

160 (
__extension__
 \

161 ({ 
size_t
 
__cpu
 = (
cpu
); \

162 
__cpu
 < 8 * (
setsize
) \

163 ? ((((const 
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

164 & 
	`__CPUMASK
 (
__cpu
))) != 0 \

165 : 0; }))

	)

167 #define 
	#__CPU_COUNT_S
(
setsize
, 
cpusetp
) \

168 
	`__sched_cpucount
 (
setsize
, 
cpusetp
)

	)

170 #if 
__GNUC_PREREQ
 (2, 91)

171 #define 
	#__CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

172 (
	`__builtin_memcmp
 (
cpusetp1
, 
cpusetp2
, 
setsize
) == 0)

	)

174 #define 
	#__CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

175 (
__extension__
 \

176 ({ const 
__cpu_mask
 *
__arr1
 = (
cpusetp1
)->
__bits
; \

177 const 
__cpu_mask
 *
__arr2
 = (
cpusetp2
)->
__bits
; \

178 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

179 
size_t
 
__i
; \

180 for (
__i
 = 0; __i < 
__imax
; ++__i) \

181 if (
__arr1
[
__i
] != 
__arr2
[__i]) \

183 
__i
 == 
__imax
; }))

	)

186 #define 
	#__CPU_OP_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
, 
op
) \

187 (
__extension__
 \

188 ({ 
cpu_set_t
 *
__dest
 = (
destset
); \

189 const 
__cpu_mask
 *
__arr1
 = (
srcset1
)->
__bits
; \

190 const 
__cpu_mask
 *
__arr2
 = (
srcset2
)->
__bits
; \

191 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

192 
size_t
 
__i
; \

193 for (
__i
 = 0; __i < 
__imax
; ++__i) \

194 ((
__cpu_mask
 *) 
__dest
->
__bits
)[
__i
] = 
__arr1
[__i] 
op
 
__arr2
[__i]; \

195 
__dest
; }))

	)

197 #define 
	#__CPU_ALLOC_SIZE
(
count
) \

198 ((((
count
) + 
__NCPUBITS
 - 1) / __NCPUBITS) * sizeof (
__cpu_mask
))

	)

199 #define 
	#__CPU_ALLOC
(
count
) 
	`__sched_cpualloc
 (count)

	)

200 #define 
	#__CPU_FREE
(
cpuset
) 
	`__sched_cpufree
 (cpuset)

	)

202 
__BEGIN_DECLS


204 extern int 
	$__sched_cpucount
 (
size_t
 
__setsize
, const 
cpu_set_t
 *
__setp
)

205 
__THROW
;

206 extern 
cpu_set_t
 *
	$__sched_cpualloc
 (
size_t
 
__count
) 
__THROW
 
__wur
;

207 extern void 
	$__sched_cpufree
 (
cpu_set_t
 *
__set
) 
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
84
2213
example.c
linenoise.c
linenoise.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/timex.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/sched.h
